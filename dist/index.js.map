{"version":3,"sources":["../src/commands/add.ts","../src/commands/init.ts","../src/preflights/preflight-init.ts","../src/utils/errors.ts","../src/utils/get-project-info.ts","../src/utils/frameworks.ts","../src/utils/get-config.ts","../src/utils/resolve-import.ts","../src/utils/get-package-info.ts","../src/utils/add-components.ts","../src/utils/updaters/update-css-vars.ts","../src/utils/get-package-manager.ts","../src/utils/updaters/update-dependencies.ts","../src/utils/updaters/update-files.ts","../src/utils/transformers/index.ts","../src/utils/transformers/transform-css-vars.ts","../src/utils/icon-libraries.ts","../src/utils/transformers/transform-icons.ts","../src/utils/transformers/transform-import.ts","../src/utils/transformers/transform-jsx.ts","../src/utils/transformers/transform-rsc.ts","../src/utils/transformers/transform-tw-prefix.ts","../src/utils/create-project.ts","../src/utils/updaters/update-tailwind-content.ts","../src/preflights/preflight-add.ts","../src/utils/update-app-index.ts","../src/commands/build.ts","../src/preflights/preflight-build.ts","../src/commands/diff.ts","../src/commands/info.ts","../src/commands/migrate.ts","../src/migrations/migrate-icons.ts","../src/preflights/preflight-migrate.ts","../src/index.ts","../package.json"],"names":["path","fs","MISSING_DIR_OR_EMPTY_PROJECT","MISSING_CONFIG","TAILWIND_NOT_CONFIGURED","IMPORT_ALIAS_MISSING","UNSUPPORTED_FRAMEWORK","BUILD_MISSING_REGISTRY_FILE","FRAMEWORKS","createMatchPath","resolveImport","importPath","config","cosmiconfig","fg","loadConfig","z","DEFAULT_COMPONENTS","DEFAULT_UTILS","DEFAULT_TAILWIND_CSS","DEFAULT_TAILWIND_CONFIG","explorer","rawConfigSchema","configSchema","workspaceConfigSchema","getConfig","cwd","getRawConfig","resolveConfigPaths","tsConfig","configResult","componentPath","highlighter","getWorkspaceConfig","resolvedAliases","key","isAliasKey","resolvedPath","packageRoot","findPackageRoot","result","commonRoot","findCommonRoot","relativePath","matchingPackageRoot","pkgPath","pkgDir","parts1","parts2","commonParts","i","getPackageInfo","shouldThrow","packageJsonPath","PROJECT_SHARED_IGNORE","TS_CONFIG_SCHEMA","getProjectInfo","configFiles","isSrcDir","isTsx","tailwindConfigFile","tailwindCssFile","tailwindVersion","aliasPrefix","packageJson","isTypeScriptProject","getTailwindConfigFile","getTailwindCssFile","getTailwindVersion","getTsConfigAliasPrefix","isUsingAppDir","type","file","dep","packageInfo","files","needle","contents","alias","paths","getProjectConfig","defaultProjectInfo","existingConfig","projectInfo","getProjectTailwindVersionFromConfig","preFlightInit","options","errors","projectSpinner","spinner","logger","frameworkSpinner","tailwindSpinnerMessage","tailwindSpinner","tsConfigSpinner","postcss","AtRule","updateCssVars","cssVars","cssFilepath","cssFilepathRelative","cssVarsSpinner","raw","output","transformCssVars","input","plugins","updateCssVarsPlugin","addCustomVariant","updateCssVarsPluginV4","updateThemePlugin","updateTailwindConfigPlugin","updateTailwindConfigAnimationPlugin","updateTailwindConfigKeyframesPlugin","cleanupDefaultNextStylesPlugin","updateBaseLayerPlugin","root","requiredRules","baseLayer","node","selector","apply","rule","applyRule","vars","addOrUpdateVars","removeConflictVars","rootRule","propsToRemove","bodyRule","darkRootRule","ruleNode","value","prop","newDecl","existingDecl","isLocalHSLValue","variables","themeNode","upsertThemeNode","themeVarNodes","variable","radiusVariables","cssVarNode","isColorValue","params","variantNode","tailwindConfig","quote","getQuoteType","pluginNodes","lastPluginNode","plugin","pluginName","pluginNode","existingKeyFrameNodes","keyframeValueSchema","keyframeName","keyframeValue","parsedKeyframeValue","keyframeNode","values","existingAnimationNodes","parsedAnimationValue","animationNode","chunks","chunk","detect","getPackageManager","targetDir","withFallback","packageManager","userAgent","execa","prompts","updateDependencies","dependencies","dependenciesSpinner","flag","isUsingReact19","confirmation","existsSync","basename","tmpdir","SyntaxKind","sourceFile","baseColor","valueWithColorMapping","applyColorMapping","splitClassName","className","parts","rest","alpha","split","name","variant","PREFIXES","mapping","classNames","lightMode","darkMode","modifier","prefix","ICON_LIBRARIES","SOURCE_LIBRARY","transformIcons","registryIcons","getRegistryIcons","sourceLibrary","targetLibrary","targetedIcons","importDeclaration","specifier","iconName","targetedIcon","iconImportDeclaration","icon","_useSemicolon","COMMON_CN_IMPORTS","transformImport","isRemote","importDeclarations","moduleSpecifier","updateImportAliases","transformFromAstSync","parse","transformTypescript","recast","PARSE_OPTIONS","transformJsx","ast","code","directiveRegex","transformRsc","first","Project","ScriptKind","transformTwPrefixes","defaultClassNames","applyPrefix","callExpression","arg","prefixed","project","createTempSourceFile","filename","dir","transform","opts","transformers","tempFile","transformer","updateFiles","filesCreatedSpinner","getRegistryBaseColor","filesCreated","filesUpdated","filesSkipped","filePath","resolveFilePath","f","fileName","match","existingFile","overwrite","content","resolveFileTargetDirectory","resolveNestedFilePath","normalizedPaths","p","normalizedNeedle","needleDir","needleSegments","testPath","normalizedFilePath","normalizedTargetDir","fileSegments","targetSegments","lastTargetSegment","commonDirIndex","segment","addComponents","components","workspaceConfig","addWorkspaceComponents","addProjectComponents","registrySpinner","tree","registryResolveItemsTree","handleError","updateTailwindConfig","registryItems","resolveRegistryItems","fetchRegistry","payload","registryItemSchema","registryParentMap","getRegistryParentMap","registryTypeAliasMap","getRegistryTypeAliasMap","rootSpinner","component","registryParent","targetConfig","workspaceRoot","os","MONOREPO_TEMPLATE_URL","createProject","projectType","projectName","nextVersion","isRemoteComponent","meta","error","projectPath","createNextProject","createMonorepoProject","createSpinner","args","templatePath","response","tarPath","extractedPath","updateTailwindContent","tailwindFileRelativePath","transformTailwindContent","_createSourceFile","configObject","property","addTailwindConfigContent","quoteChar","_getQuoteChar","existingProperty","newProperty","initializer","contentItem","newValue","element","Command","initOptionsSchema","init","runInit","newProjectType","preflight","projectConfig","promptForMinimalConfig","promptForConfig","proceed","componentSpinner","targetPath","fullConfig","defaultConfig","styles","baseColors","getRegistryStyles","getRegistryBaseColors","style","color","cssVariables","s","preFlightAdd","updateAppIndex","indexPath","registryItem","getRegistryItem","addOptionsSchema","add","isTheme","confirm","promptForRegistryComponents","shouldUpdateAppIndex","registryIndex","getRegistryIndex","entry","preFlightBuild","resolvePaths","buildOptionsSchema","build","registry","registrySchema","buildSpinner","diffLines","updateOptionsSchema","diff","projectComponents","item","componentsWithUpdates","changes","diffComponent","change","printDiff","fetchTree","getItemTargetPath","fileContent","registryContent","patch","part","info","randomBytes","migrateIcons","uiPath","libraryChoices","iconLibrary","migrateOptions","migrationSpinner","migrateIconsFile","iconsMapping","sourceLibraryImport","targetLibraryImport","preFlightMigrate","migrations","migrateOptionsSchema","migration","migrate","package_default","main","program"],"mappings":"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","sourcesContent":["import path from \"path\"\nimport { runInit } from \"@/src/commands/init\"\nimport { preFlightAdd } from \"@/src/preflights/preflight-add\"\nimport { getRegistryIndex } from \"@/src/registry/api\"\nimport { addComponents } from \"@/src/utils/add-components\"\nimport { createProject } from \"@/src/utils/create-project\"\nimport * as ERRORS from \"@/src/utils/errors\"\nimport { getConfig } from \"@/src/utils/get-config\"\nimport { handleError } from \"@/src/utils/handle-error\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport { updateAppIndex } from \"@/src/utils/update-app-index\"\nimport { Command } from \"commander\"\nimport prompts from \"prompts\"\nimport { z } from \"zod\"\n\nexport const addOptionsSchema = z.object({\n  components: z.array(z.string()).optional(),\n  yes: z.boolean(),\n  overwrite: z.boolean(),\n  cwd: z.string(),\n  all: z.boolean(),\n  path: z.string().optional(),\n  silent: z.boolean(),\n  srcDir: z.boolean().optional(),\n})\n\nexport const add = new Command()\n  .name(\"add\")\n  .description(\"add a component to your project\")\n  .argument(\n    \"[components...]\",\n    \"the components to add or a url to the component.\"\n  )\n  .option(\"-y, --yes\", \"skip confirmation prompt.\", false)\n  .option(\"-o, --overwrite\", \"overwrite existing files.\", false)\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd()\n  )\n  .option(\"-a, --all\", \"add all available components\", false)\n  .option(\"-p, --path <path>\", \"the path to add the component to.\")\n  .option(\"-s, --silent\", \"mute output.\", false)\n  .option(\n    \"--src-dir\",\n    \"use the src directory when creating a new project.\",\n    false\n  )\n  .action(async (components, opts) => {\n    try {\n      const options = addOptionsSchema.parse({\n        components,\n        cwd: path.resolve(opts.cwd),\n        ...opts,\n      })\n\n      // Confirm if user is installing themes.\n      // For now, we assume a theme is prefixed with \"theme-\".\n      const isTheme = options.components?.some((component) =>\n        component.includes(\"theme-\")\n      )\n      if (!options.yes && isTheme) {\n        logger.break()\n        const { confirm } = await prompts({\n          type: \"confirm\",\n          name: \"confirm\",\n          message: highlighter.warn(\n            \"You are about to install a new theme. \\nExisting CSS variables will be overwritten. Continue?\"\n          ),\n        })\n        if (!confirm) {\n          logger.break()\n          logger.log(\"Theme installation cancelled.\")\n          logger.break()\n          process.exit(1)\n        }\n      }\n\n      if (!options.components?.length) {\n        options.components = await promptForRegistryComponents(options)\n      }\n\n      let { errors, config } = await preFlightAdd(options)\n\n      // No components.json file. Prompt the user to run init.\n      if (errors[ERRORS.MISSING_CONFIG]) {\n        const { proceed } = await prompts({\n          type: \"confirm\",\n          name: \"proceed\",\n          message: `You need to create a ${highlighter.info(\n            \"components.json\"\n          )} file to add components. Proceed?`,\n          initial: true,\n        })\n\n        if (!proceed) {\n          logger.break()\n          process.exit(1)\n        }\n\n        config = await runInit({\n          cwd: options.cwd,\n          yes: true,\n          force: true,\n          defaults: false,\n          skipPreflight: false,\n          silent: true,\n          isNewProject: false,\n          srcDir: options.srcDir,\n        })\n      }\n\n      let shouldUpdateAppIndex = false\n      if (errors[ERRORS.MISSING_DIR_OR_EMPTY_PROJECT]) {\n        const { projectPath, projectType } = await createProject({\n          cwd: options.cwd,\n          force: options.overwrite,\n          srcDir: options.srcDir,\n          components: options.components,\n        })\n        if (!projectPath) {\n          logger.break()\n          process.exit(1)\n        }\n        options.cwd = projectPath\n\n        if (projectType === \"monorepo\") {\n          options.cwd = path.resolve(options.cwd, \"apps/web\")\n          config = await getConfig(options.cwd)\n        } else {\n          config = await runInit({\n            cwd: options.cwd,\n            yes: true,\n            force: true,\n            defaults: false,\n            skipPreflight: true,\n            silent: true,\n            isNewProject: true,\n            srcDir: options.srcDir,\n          })\n\n          shouldUpdateAppIndex =\n            options.components?.length === 1 &&\n            !!options.components[0].match(/\\/chat\\/b\\//)\n        }\n      }\n\n      if (!config) {\n        throw new Error(\n          `Failed to read config at ${highlighter.info(options.cwd)}.`\n        )\n      }\n\n      await addComponents(options.components, config, options)\n\n      // If we're adding a single component and it's from the v0 registry,\n      // let's update the app/page.tsx file to import the component.\n      if (shouldUpdateAppIndex) {\n        await updateAppIndex(options.components[0], config)\n      }\n    } catch (error) {\n      logger.break()\n      handleError(error)\n    }\n  })\n\nasync function promptForRegistryComponents(\n  options: z.infer<typeof addOptionsSchema>\n) {\n  const registryIndex = await getRegistryIndex()\n  if (!registryIndex) {\n    logger.break()\n    handleError(new Error(\"Failed to fetch registry index.\"))\n    return []\n  }\n\n  if (options.all) {\n    return registryIndex.map((entry) => entry.name)\n  }\n\n  if (options.components?.length) {\n    return options.components\n  }\n\n  const { components } = await prompts({\n    type: \"multiselect\",\n    name: \"components\",\n    message: \"Which components would you like to add?\",\n    hint: \"Space to select. A to toggle all. Enter to submit.\",\n    instructions: false,\n    choices: registryIndex\n      .filter((entry) => entry.type === \"registry:ui\")\n      .map((entry) => ({\n        title: entry.name,\n        value: entry.name,\n        selected: options.all ? true : options.components?.includes(entry.name),\n      })),\n  })\n\n  if (!components?.length) {\n    logger.warn(\"No components selected. Exiting.\")\n    logger.info(\"\")\n    process.exit(1)\n  }\n\n  const result = z.array(z.string()).safeParse(components)\n  if (!result.success) {\n    logger.error(\"\")\n    handleError(new Error(\"Something went wrong. Please try again.\"))\n    return []\n  }\n  return result.data\n}\n","import { promises as fs } from \"fs\"\nimport path from \"path\"\nimport { preFlightInit } from \"@/src/preflights/preflight-init\"\nimport { getRegistryBaseColors, getRegistryStyles } from \"@/src/registry/api\"\nimport { addComponents } from \"@/src/utils/add-components\"\nimport { createProject } from \"@/src/utils/create-project\"\nimport * as ERRORS from \"@/src/utils/errors\"\nimport {\n  DEFAULT_COMPONENTS,\n  DEFAULT_TAILWIND_CONFIG,\n  DEFAULT_TAILWIND_CSS,\n  DEFAULT_UTILS,\n  getConfig,\n  rawConfigSchema,\n  resolveConfigPaths,\n  type Config,\n} from \"@/src/utils/get-config\"\nimport { getProjectConfig, getProjectInfo } from \"@/src/utils/get-project-info\"\nimport { handleError } from \"@/src/utils/handle-error\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport { updateTailwindContent } from \"@/src/utils/updaters/update-tailwind-content\"\nimport { Command } from \"commander\"\nimport prompts from \"prompts\"\nimport { z } from \"zod\"\n\nexport const initOptionsSchema = z.object({\n  cwd: z.string(),\n  components: z.array(z.string()).optional(),\n  yes: z.boolean(),\n  defaults: z.boolean(),\n  force: z.boolean(),\n  silent: z.boolean(),\n  isNewProject: z.boolean(),\n  srcDir: z.boolean().optional(),\n})\n\nexport const init = new Command()\n  .name(\"init\")\n  .description(\"initialize your project and install dependencies\")\n  .argument(\n    \"[components...]\",\n    \"the components to add or a url to the component.\"\n  )\n  .option(\"-y, --yes\", \"skip confirmation prompt.\", true)\n  .option(\"-d, --defaults,\", \"use default configuration.\", false)\n  .option(\"-f, --force\", \"force overwrite of existing configuration.\", false)\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd()\n  )\n  .option(\"-s, --silent\", \"mute output.\", false)\n  .option(\n    \"--src-dir\",\n    \"use the src directory when creating a new project.\",\n    false\n  )\n  .action(async (components, opts) => {\n    try {\n      const options = initOptionsSchema.parse({\n        cwd: path.resolve(opts.cwd),\n        isNewProject: false,\n        components,\n        ...opts,\n      })\n\n      await runInit(options)\n\n      logger.log(\n        `${highlighter.success(\n          \"Success!\"\n        )} Project initialization completed.\\nYou may now add components.`\n      )\n      logger.break()\n    } catch (error) {\n      logger.break()\n      handleError(error)\n    }\n  })\n\nexport async function runInit(\n  options: z.infer<typeof initOptionsSchema> & {\n    skipPreflight?: boolean\n  }\n) {\n  let projectInfo\n  let newProjectType\n  if (!options.skipPreflight) {\n    const preflight = await preFlightInit(options)\n    if (preflight.errors[ERRORS.MISSING_DIR_OR_EMPTY_PROJECT]) {\n      const { projectPath, projectType } = await createProject(options)\n      if (!projectPath) {\n        process.exit(1)\n      }\n      options.cwd = projectPath\n      options.isNewProject = true\n      newProjectType = projectType\n    }\n    projectInfo = preflight.projectInfo\n  } else {\n    projectInfo = await getProjectInfo(options.cwd)\n  }\n\n  if (newProjectType === \"monorepo\") {\n    options.cwd = path.resolve(options.cwd, \"apps/web\")\n    return await getConfig(options.cwd)\n  }\n\n  const projectConfig = await getProjectConfig(options.cwd, projectInfo)\n  const config = projectConfig\n    ? await promptForMinimalConfig(projectConfig, options)\n    : await promptForConfig(await getConfig(options.cwd))\n\n  if (!options.yes) {\n    const { proceed } = await prompts({\n      type: \"confirm\",\n      name: \"proceed\",\n      message: `Write configuration to ${highlighter.info(\n        \"components.json\"\n      )}. Proceed?`,\n      initial: true,\n    })\n\n    if (!proceed) {\n      process.exit(0)\n    }\n  }\n\n  // Write components.json.\n  const componentSpinner = spinner(`Writing components.json.`).start()\n  const targetPath = path.resolve(options.cwd, \"components.json\")\n  await fs.writeFile(targetPath, JSON.stringify(config, null, 2), \"utf8\")\n  componentSpinner.succeed()\n\n  // Add components.\n  const fullConfig = await resolveConfigPaths(options.cwd, config)\n  const components = [\"index\", ...(options.components || [])]\n  await addComponents(components, fullConfig, {\n    // Init will always overwrite files.\n    overwrite: true,\n    silent: options.silent,\n    isNewProject:\n      options.isNewProject || projectInfo?.framework.name === \"next-app\",\n  })\n\n  // If a new project is using src dir, let's update the tailwind content config.\n  // TODO: Handle this per framework.\n  if (options.isNewProject && options.srcDir) {\n    await updateTailwindContent(\n      [\"./src/**/*.{js,ts,jsx,tsx,mdx}\"],\n      fullConfig,\n      {\n        silent: options.silent,\n      }\n    )\n  }\n\n  return fullConfig\n}\n\nasync function promptForConfig(defaultConfig: Config | null = null) {\n  const [styles, baseColors] = await Promise.all([\n    getRegistryStyles(),\n    getRegistryBaseColors(),\n  ])\n\n  logger.info(\"\")\n  const options = await prompts([\n    {\n      type: \"toggle\",\n      name: \"typescript\",\n      message: `Would you like to use ${highlighter.info(\n        \"TypeScript\"\n      )} (recommended)?`,\n      initial: defaultConfig?.tsx ?? true,\n      active: \"yes\",\n      inactive: \"no\",\n    },\n    {\n      type: \"select\",\n      name: \"style\",\n      message: `Which ${highlighter.info(\"style\")} would you like to use?`,\n      choices: styles.map((style) => ({\n        title: style.label,\n        value: style.name,\n      })),\n    },\n    {\n      type: \"select\",\n      name: \"tailwindBaseColor\",\n      message: `Which color would you like to use as the ${highlighter.info(\n        \"base color\"\n      )}?`,\n      choices: baseColors.map((color) => ({\n        title: color.label,\n        value: color.name,\n      })),\n    },\n    {\n      type: \"text\",\n      name: \"tailwindCss\",\n      message: `Where is your ${highlighter.info(\"global CSS\")} file?`,\n      initial: defaultConfig?.tailwind.css ?? DEFAULT_TAILWIND_CSS,\n    },\n    {\n      type: \"toggle\",\n      name: \"tailwindCssVariables\",\n      message: `Would you like to use ${highlighter.info(\n        \"CSS variables\"\n      )} for theming?`,\n      initial: defaultConfig?.tailwind.cssVariables ?? true,\n      active: \"yes\",\n      inactive: \"no\",\n    },\n    {\n      type: \"text\",\n      name: \"tailwindPrefix\",\n      message: `Are you using a custom ${highlighter.info(\n        \"tailwind prefix eg. tw-\"\n      )}? (Leave blank if not)`,\n      initial: \"\",\n    },\n    {\n      type: \"text\",\n      name: \"tailwindConfig\",\n      message: `Where is your ${highlighter.info(\n        \"tailwind.config.js\"\n      )} located?`,\n      initial: defaultConfig?.tailwind.config ?? DEFAULT_TAILWIND_CONFIG,\n    },\n    {\n      type: \"text\",\n      name: \"components\",\n      message: `Configure the import alias for ${highlighter.info(\n        \"components\"\n      )}:`,\n      initial: defaultConfig?.aliases[\"components\"] ?? DEFAULT_COMPONENTS,\n    },\n    {\n      type: \"text\",\n      name: \"utils\",\n      message: `Configure the import alias for ${highlighter.info(\"utils\")}:`,\n      initial: defaultConfig?.aliases[\"utils\"] ?? DEFAULT_UTILS,\n    },\n    {\n      type: \"toggle\",\n      name: \"rsc\",\n      message: `Are you using ${highlighter.info(\"React Server Components\")}?`,\n      initial: defaultConfig?.rsc ?? true,\n      active: \"yes\",\n      inactive: \"no\",\n    },\n  ])\n\n  return rawConfigSchema.parse({\n    $schema: \"https://ui.shadcn.com/schema.json\",\n    style: options.style,\n    tailwind: {\n      config: options.tailwindConfig,\n      css: options.tailwindCss,\n      baseColor: options.tailwindBaseColor,\n      cssVariables: options.tailwindCssVariables,\n      prefix: options.tailwindPrefix,\n    },\n    rsc: options.rsc,\n    tsx: options.typescript,\n    aliases: {\n      utils: options.utils,\n      components: options.components,\n      // TODO: fix this.\n      lib: options.components.replace(/\\/components$/, \"lib\"),\n      hooks: options.components.replace(/\\/components$/, \"hooks\"),\n    },\n  })\n}\n\nasync function promptForMinimalConfig(\n  defaultConfig: Config,\n  opts: z.infer<typeof initOptionsSchema>\n) {\n  let style = defaultConfig.style\n  let baseColor = defaultConfig.tailwind.baseColor\n  let cssVariables = defaultConfig.tailwind.cssVariables\n\n  if (!opts.defaults) {\n    const [styles, baseColors] = await Promise.all([\n      getRegistryStyles(),\n      getRegistryBaseColors(),\n    ])\n\n    const options = await prompts([\n      {\n        type: \"select\",\n        name: \"style\",\n        message: `Which ${highlighter.info(\"style\")} would you like to use?`,\n        choices: styles.map((style) => ({\n          title: style.label,\n          value: style.name,\n        })),\n        initial: styles.findIndex((s) => s.name === style),\n      },\n      {\n        type: \"select\",\n        name: \"tailwindBaseColor\",\n        message: `Which color would you like to use as the ${highlighter.info(\n          \"base color\"\n        )}?`,\n        choices: baseColors.map((color) => ({\n          title: color.label,\n          value: color.name,\n        })),\n      },\n      {\n        type: \"toggle\",\n        name: \"tailwindCssVariables\",\n        message: `Would you like to use ${highlighter.info(\n          \"CSS variables\"\n        )} for theming?`,\n        initial: defaultConfig?.tailwind.cssVariables,\n        active: \"yes\",\n        inactive: \"no\",\n      },\n    ])\n\n    style = options.style\n    baseColor = options.tailwindBaseColor\n    cssVariables = options.tailwindCssVariables\n  }\n\n  return rawConfigSchema.parse({\n    $schema: defaultConfig?.$schema,\n    style,\n    tailwind: {\n      ...defaultConfig?.tailwind,\n      baseColor,\n      cssVariables,\n    },\n    rsc: defaultConfig?.rsc,\n    tsx: defaultConfig?.tsx,\n    aliases: defaultConfig?.aliases,\n    iconLibrary: defaultConfig?.iconLibrary,\n  })\n}\n","import path from \"path\"\nimport { initOptionsSchema } from \"@/src/commands/init\"\nimport * as ERRORS from \"@/src/utils/errors\"\nimport { getProjectInfo } from \"@/src/utils/get-project-info\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport fs from \"fs-extra\"\nimport { z } from \"zod\"\n\nexport async function preFlightInit(\n  options: z.infer<typeof initOptionsSchema>\n) {\n  const errors: Record<string, boolean> = {}\n\n  // Ensure target directory exists.\n  // Check for empty project. We assume if no package.json exists, the project is empty.\n  if (\n    !fs.existsSync(options.cwd) ||\n    !fs.existsSync(path.resolve(options.cwd, \"package.json\"))\n  ) {\n    errors[ERRORS.MISSING_DIR_OR_EMPTY_PROJECT] = true\n    return {\n      errors,\n      projectInfo: null,\n    }\n  }\n\n  const projectSpinner = spinner(`Preflight checks.`, {\n    silent: options.silent,\n  }).start()\n\n  if (\n    fs.existsSync(path.resolve(options.cwd, \"components.json\")) &&\n    !options.force\n  ) {\n    projectSpinner?.fail()\n    logger.break()\n    logger.error(\n      `A ${highlighter.info(\n        \"components.json\"\n      )} file already exists at ${highlighter.info(\n        options.cwd\n      )}.\\nTo start over, remove the ${highlighter.info(\n        \"components.json\"\n      )} file and run ${highlighter.info(\"init\")} again.`\n    )\n    logger.break()\n    process.exit(1)\n  }\n\n  projectSpinner?.succeed()\n\n  const frameworkSpinner = spinner(`Verifying framework.`, {\n    silent: options.silent,\n  }).start()\n  const projectInfo = await getProjectInfo(options.cwd)\n  if (!projectInfo || projectInfo?.framework.name === \"manual\") {\n    errors[ERRORS.UNSUPPORTED_FRAMEWORK] = true\n    frameworkSpinner?.fail()\n    logger.break()\n    if (projectInfo?.framework.links.installation) {\n      logger.error(\n        `We could not detect a supported framework at ${highlighter.info(\n          options.cwd\n        )}.\\n` +\n          `Visit ${highlighter.info(\n            projectInfo?.framework.links.installation\n          )} to manually configure your project.\\nOnce configured, you can use the cli to add components.`\n      )\n    }\n    logger.break()\n    process.exit(1)\n  }\n  frameworkSpinner?.succeed(\n    `Verifying framework. Found ${highlighter.info(\n      projectInfo.framework.label\n    )}.`\n  )\n\n  let tailwindSpinnerMessage = \"Validating Tailwind CSS.\"\n\n  if (projectInfo.tailwindVersion === \"v4\") {\n    tailwindSpinnerMessage = `Validating Tailwind CSS config. Found ${highlighter.info(\n      \"v4\"\n    )}.`\n  }\n\n  const tailwindSpinner = spinner(tailwindSpinnerMessage, {\n    silent: options.silent,\n  }).start()\n  if (\n    projectInfo.tailwindVersion === \"v3\" &&\n    (!projectInfo?.tailwindConfigFile || !projectInfo?.tailwindCssFile)\n  ) {\n    errors[ERRORS.TAILWIND_NOT_CONFIGURED] = true\n    tailwindSpinner?.fail()\n  } else if (\n    projectInfo.tailwindVersion === \"v4\" &&\n    !projectInfo?.tailwindCssFile\n  ) {\n    errors[ERRORS.TAILWIND_NOT_CONFIGURED] = true\n    tailwindSpinner?.fail()\n  } else if (!projectInfo.tailwindVersion) {\n    errors[ERRORS.TAILWIND_NOT_CONFIGURED] = true\n    tailwindSpinner?.fail()\n  } else {\n    tailwindSpinner?.succeed()\n  }\n\n  const tsConfigSpinner = spinner(`Validating import alias.`, {\n    silent: options.silent,\n  }).start()\n  if (!projectInfo?.aliasPrefix) {\n    errors[ERRORS.IMPORT_ALIAS_MISSING] = true\n    tsConfigSpinner?.fail()\n  } else {\n    tsConfigSpinner?.succeed()\n  }\n\n  if (Object.keys(errors).length > 0) {\n    if (errors[ERRORS.TAILWIND_NOT_CONFIGURED]) {\n      logger.break()\n      logger.error(\n        `No Tailwind CSS configuration found at ${highlighter.info(\n          options.cwd\n        )}.`\n      )\n      logger.error(\n        `It is likely you do not have Tailwind CSS installed or have an invalid configuration.`\n      )\n      logger.error(`Install Tailwind CSS then try again.`)\n      if (projectInfo?.framework.links.tailwind) {\n        logger.error(\n          `Visit ${highlighter.info(\n            projectInfo?.framework.links.tailwind\n          )} to get started.`\n        )\n      }\n    }\n\n    if (errors[ERRORS.IMPORT_ALIAS_MISSING]) {\n      logger.break()\n      logger.error(`No import alias found in your tsconfig.json file.`)\n      if (projectInfo?.framework.links.installation) {\n        logger.error(\n          `Visit ${highlighter.info(\n            projectInfo?.framework.links.installation\n          )} to learn how to set an import alias.`\n        )\n      }\n    }\n\n    logger.break()\n    process.exit(1)\n  }\n\n  return {\n    errors,\n    projectInfo,\n  }\n}\n","export const MISSING_DIR_OR_EMPTY_PROJECT = \"1\"\nexport const EXISTING_CONFIG = \"2\"\nexport const MISSING_CONFIG = \"3\"\nexport const FAILED_CONFIG_READ = \"4\"\nexport const TAILWIND_NOT_CONFIGURED = \"5\"\nexport const IMPORT_ALIAS_MISSING = \"6\"\nexport const UNSUPPORTED_FRAMEWORK = \"7\"\nexport const COMPONENT_URL_NOT_FOUND = \"8\"\nexport const COMPONENT_URL_UNAUTHORIZED = \"9\"\nexport const COMPONENT_URL_FORBIDDEN = \"10\"\nexport const COMPONENT_URL_BAD_REQUEST = \"11\"\nexport const COMPONENT_URL_INTERNAL_SERVER_ERROR = \"12\"\nexport const BUILD_MISSING_REGISTRY_FILE = \"13\"\n","import path from \"path\"\nimport { FRAMEWORKS, Framework } from \"@/src/utils/frameworks\"\nimport {\n  Config,\n  RawConfig,\n  getConfig,\n  resolveConfigPaths,\n} from \"@/src/utils/get-config\"\nimport { getPackageInfo } from \"@/src/utils/get-package-info\"\nimport fg from \"fast-glob\"\nimport fs from \"fs-extra\"\nimport { loadConfig } from \"tsconfig-paths\"\nimport { z } from \"zod\"\n\nexport type TailwindVersion = \"v3\" | \"v4\" | null\n\ntype ProjectInfo = {\n  framework: Framework\n  isSrcDir: boolean\n  isRSC: boolean\n  isTsx: boolean\n  tailwindConfigFile: string | null\n  tailwindCssFile: string | null\n  tailwindVersion: TailwindVersion\n  aliasPrefix: string | null\n}\n\nconst PROJECT_SHARED_IGNORE = [\n  \"**/node_modules/**\",\n  \".next\",\n  \"public\",\n  \"dist\",\n  \"build\",\n]\n\nconst TS_CONFIG_SCHEMA = z.object({\n  compilerOptions: z.object({\n    paths: z.record(z.string().or(z.array(z.string()))),\n  }),\n})\n\nexport async function getProjectInfo(cwd: string): Promise<ProjectInfo | null> {\n  const [\n    configFiles,\n    isSrcDir,\n    isTsx,\n    tailwindConfigFile,\n    tailwindCssFile,\n    tailwindVersion,\n    aliasPrefix,\n    packageJson,\n  ] = await Promise.all([\n    fg.glob(\"**/{next,vite,astro}.config.*|gatsby-config.*|composer.json\", {\n      cwd,\n      deep: 3,\n      ignore: PROJECT_SHARED_IGNORE,\n    }),\n    fs.pathExists(path.resolve(cwd, \"src\")),\n    isTypeScriptProject(cwd),\n    getTailwindConfigFile(cwd),\n    getTailwindCssFile(cwd),\n    getTailwindVersion(cwd),\n    getTsConfigAliasPrefix(cwd),\n    getPackageInfo(cwd, false),\n  ])\n\n  const isUsingAppDir = await fs.pathExists(\n    path.resolve(cwd, `${isSrcDir ? \"src/\" : \"\"}app`)\n  )\n\n  const type: ProjectInfo = {\n    framework: FRAMEWORKS[\"manual\"],\n    isSrcDir,\n    isRSC: false,\n    isTsx,\n    tailwindConfigFile,\n    tailwindCssFile,\n    tailwindVersion,\n    aliasPrefix,\n  }\n\n  // Next.js.\n  if (configFiles.find((file) => file.startsWith(\"next.config.\"))?.length) {\n    type.framework = isUsingAppDir\n      ? FRAMEWORKS[\"next-app\"]\n      : FRAMEWORKS[\"next-pages\"]\n    type.isRSC = isUsingAppDir\n    return type\n  }\n\n  // Astro.\n  if (configFiles.find((file) => file.startsWith(\"astro.config.\"))?.length) {\n    type.framework = FRAMEWORKS[\"astro\"]\n    return type\n  }\n\n  // Gatsby.\n  if (configFiles.find((file) => file.startsWith(\"gatsby-config.\"))?.length) {\n    type.framework = FRAMEWORKS[\"gatsby\"]\n    return type\n  }\n\n  // Laravel.\n  if (configFiles.find((file) => file.startsWith(\"composer.json\"))?.length) {\n    type.framework = FRAMEWORKS[\"laravel\"]\n    return type\n  }\n\n  // Remix.\n  if (\n    Object.keys(packageJson?.dependencies ?? {}).find((dep) =>\n      dep.startsWith(\"@remix-run/\")\n    )\n  ) {\n    type.framework = FRAMEWORKS[\"remix\"]\n    return type\n  }\n\n  // Vite.\n  // Some Remix templates also have a vite.config.* file.\n  // We'll assume that it got caught by the Remix check above.\n  if (configFiles.find((file) => file.startsWith(\"vite.config.\"))?.length) {\n    type.framework = FRAMEWORKS[\"vite\"]\n    return type\n  }\n\n  return type\n}\n\nexport async function getTailwindVersion(\n  cwd: string\n): Promise<ProjectInfo[\"tailwindVersion\"]> {\n  const packageInfo = getPackageInfo(cwd)\n\n  if (\n    !packageInfo?.dependencies?.tailwindcss &&\n    !packageInfo?.devDependencies?.tailwindcss\n  ) {\n    return null\n  }\n\n  if (\n    /^(?:\\^|~)?3(?:\\.\\d+)*(?:-.*)?$/.test(\n      packageInfo?.dependencies?.tailwindcss ||\n        packageInfo?.devDependencies?.tailwindcss ||\n        \"\"\n    )\n  ) {\n    return \"v3\"\n  }\n\n  return \"v4\"\n}\n\nexport async function getTailwindCssFile(cwd: string) {\n  const [files, tailwindVersion] = await Promise.all([\n    fg.glob([\"**/*.css\", \"**/*.scss\"], {\n      cwd,\n      deep: 5,\n      ignore: PROJECT_SHARED_IGNORE,\n    }),\n    getTailwindVersion(cwd),\n  ])\n\n  if (!files.length) {\n    return null\n  }\n\n  const needle =\n    tailwindVersion === \"v4\" ? `@import \"tailwindcss\"` : \"@tailwind base\"\n  for (const file of files) {\n    const contents = await fs.readFile(path.resolve(cwd, file), \"utf8\")\n    if (\n      contents.includes(`@import \"tailwindcss\"`) ||\n      contents.includes(`@import 'tailwindcss'`) ||\n      contents.includes(`@tailwind base`)\n    ) {\n      return file\n    }\n  }\n\n  return null\n}\n\nexport async function getTailwindConfigFile(cwd: string) {\n  const files = await fg.glob(\"tailwind.config.*\", {\n    cwd,\n    deep: 3,\n    ignore: PROJECT_SHARED_IGNORE,\n  })\n\n  if (!files.length) {\n    return null\n  }\n\n  return files[0]\n}\n\nexport async function getTsConfigAliasPrefix(cwd: string) {\n  const tsConfig = await loadConfig(cwd)\n\n  if (\n    tsConfig?.resultType === \"failed\" ||\n    !Object.entries(tsConfig?.paths).length\n  ) {\n    return null\n  }\n\n  // This assume that the first alias is the prefix.\n  for (const [alias, paths] of Object.entries(tsConfig.paths)) {\n    if (\n      paths.includes(\"./*\") ||\n      paths.includes(\"./src/*\") ||\n      paths.includes(\"./app/*\") ||\n      paths.includes(\"./resources/js/*\") // Laravel.\n    ) {\n      return alias.replace(/\\/\\*$/, \"\") ?? null\n    }\n  }\n\n  // Use the first alias as the prefix.\n  return Object.keys(tsConfig?.paths)?.[0].replace(/\\/\\*$/, \"\") ?? null\n}\n\nexport async function isTypeScriptProject(cwd: string) {\n  const files = await fg.glob(\"tsconfig.*\", {\n    cwd,\n    deep: 1,\n    ignore: PROJECT_SHARED_IGNORE,\n  })\n\n  return files.length > 0\n}\n\nexport async function getTsConfig(cwd: string) {\n  for (const fallback of [\n    \"tsconfig.json\",\n    \"tsconfig.web.json\",\n    \"tsconfig.app.json\",\n  ]) {\n    const filePath = path.resolve(cwd, fallback)\n    if (!(await fs.pathExists(filePath))) {\n      continue\n    }\n\n    // We can't use fs.readJSON because it doesn't support comments.\n    const contents = await fs.readFile(filePath, \"utf8\")\n    const cleanedContents = contents.replace(/\\/\\*\\s*\\*\\//g, \"\")\n    const result = TS_CONFIG_SCHEMA.safeParse(JSON.parse(cleanedContents))\n\n    if (result.error) {\n      continue\n    }\n\n    return result.data\n  }\n\n  return null\n}\n\nexport async function getProjectConfig(\n  cwd: string,\n  defaultProjectInfo: ProjectInfo | null = null\n): Promise<Config | null> {\n  // Check for existing component config.\n  const [existingConfig, projectInfo] = await Promise.all([\n    getConfig(cwd),\n    !defaultProjectInfo\n      ? getProjectInfo(cwd)\n      : Promise.resolve(defaultProjectInfo),\n  ])\n\n  if (existingConfig) {\n    return existingConfig\n  }\n\n  if (\n    !projectInfo ||\n    !projectInfo.tailwindCssFile ||\n    (projectInfo.tailwindVersion === \"v3\" && !projectInfo.tailwindConfigFile)\n  ) {\n    return null\n  }\n\n  const config: RawConfig = {\n    $schema: \"https://ui.shadcn.com/schema.json\",\n    rsc: projectInfo.isRSC,\n    tsx: projectInfo.isTsx,\n    style: \"new-york\",\n    tailwind: {\n      config: projectInfo.tailwindConfigFile ?? \"\",\n      baseColor: \"zinc\",\n      css: projectInfo.tailwindCssFile,\n      cssVariables: true,\n      prefix: \"\",\n    },\n    iconLibrary: \"lucide\",\n    aliases: {\n      components: `${projectInfo.aliasPrefix}/components`,\n      ui: `${projectInfo.aliasPrefix}/components/ui`,\n      hooks: `${projectInfo.aliasPrefix}/hooks`,\n      lib: `${projectInfo.aliasPrefix}/lib`,\n      utils: `${projectInfo.aliasPrefix}/lib/utils`,\n    },\n  }\n\n  return await resolveConfigPaths(cwd, config)\n}\n\nexport async function getProjectTailwindVersionFromConfig(\n  config: Config\n): Promise<TailwindVersion> {\n  if (!config.resolvedPaths.cwd) {\n    return \"v3\"\n  }\n\n  const projectInfo = await getProjectInfo(config.resolvedPaths.cwd)\n\n  if (!projectInfo?.tailwindVersion) {\n    return null\n  }\n\n  return projectInfo.tailwindVersion\n}\n","export const FRAMEWORKS = {\n  \"next-app\": {\n    name: \"next-app\",\n    label: \"Next.js\",\n    links: {\n      installation: \"https://ui.shadcn.com/docs/installation/next\",\n      tailwind: \"https://tailwindcss.com/docs/guides/nextjs\",\n    },\n  },\n  \"next-pages\": {\n    name: \"next-pages\",\n    label: \"Next.js\",\n    links: {\n      installation: \"https://ui.shadcn.com/docs/installation/next\",\n      tailwind: \"https://tailwindcss.com/docs/guides/nextjs\",\n    },\n  },\n  remix: {\n    name: \"remix\",\n    label: \"Remix\",\n    links: {\n      installation: \"https://ui.shadcn.com/docs/installation/remix\",\n      tailwind: \"https://tailwindcss.com/docs/guides/remix\",\n    },\n  },\n  vite: {\n    name: \"vite\",\n    label: \"Vite\",\n    links: {\n      installation: \"https://ui.shadcn.com/docs/installation/vite\",\n      tailwind: \"https://tailwindcss.com/docs/guides/vite\",\n    },\n  },\n  astro: {\n    name: \"astro\",\n    label: \"Astro\",\n    links: {\n      installation: \"https://ui.shadcn.com/docs/installation/astro\",\n      tailwind: \"https://tailwindcss.com/docs/guides/astro\",\n    },\n  },\n  laravel: {\n    name: \"laravel\",\n    label: \"Laravel\",\n    links: {\n      installation: \"https://ui.shadcn.com/docs/installation/laravel\",\n      tailwind: \"https://tailwindcss.com/docs/guides/laravel\",\n    },\n  },\n  gatsby: {\n    name: \"gatsby\",\n    label: \"Gatsby\",\n    links: {\n      installation: \"https://ui.shadcn.com/docs/installation/gatsby\",\n      tailwind: \"https://tailwindcss.com/docs/guides/gatsby\",\n    },\n  },\n  manual: {\n    name: \"manual\",\n    label: \"Manual\",\n    links: {\n      installation: \"https://ui.shadcn.com/docs/installation/manual\",\n      tailwind: \"https://tailwindcss.com/docs/installation\",\n    },\n  },\n} as const\n\nexport type Framework = (typeof FRAMEWORKS)[keyof typeof FRAMEWORKS]\n","import path from \"path\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { resolveImport } from \"@/src/utils/resolve-import\"\nimport { cosmiconfig } from \"cosmiconfig\"\nimport fg from \"fast-glob\"\nimport { loadConfig } from \"tsconfig-paths\"\nimport { z } from \"zod\"\n\nexport const DEFAULT_STYLE = \"default\"\nexport const DEFAULT_COMPONENTS = \"@/components\"\nexport const DEFAULT_UTILS = \"@/lib/utils\"\nexport const DEFAULT_TAILWIND_CSS = \"app/globals.css\"\nexport const DEFAULT_TAILWIND_CONFIG = \"tailwind.config.js\"\nexport const DEFAULT_TAILWIND_BASE_COLOR = \"slate\"\n\n// TODO: Figure out if we want to support all cosmiconfig formats.\n// A simple components.json file would be nice.\nconst explorer = cosmiconfig(\"components\", {\n  searchPlaces: [\"components.json\"],\n})\n\nexport const rawConfigSchema = z\n  .object({\n    $schema: z.string().optional(),\n    style: z.string(),\n    rsc: z.coerce.boolean().default(false),\n    tsx: z.coerce.boolean().default(true),\n    tailwind: z.object({\n      config: z.string().optional(),\n      css: z.string(),\n      baseColor: z.string(),\n      cssVariables: z.boolean().default(true),\n      prefix: z.string().default(\"\").optional(),\n    }),\n    aliases: z.object({\n      components: z.string(),\n      utils: z.string(),\n      ui: z.string().optional(),\n      lib: z.string().optional(),\n      hooks: z.string().optional(),\n    }),\n    iconLibrary: z.string().optional(),\n  })\n  .strict()\n\nexport type RawConfig = z.infer<typeof rawConfigSchema>\n\nexport const configSchema = rawConfigSchema.extend({\n  resolvedPaths: z.object({\n    cwd: z.string(),\n    tailwindConfig: z.string(),\n    tailwindCss: z.string(),\n    utils: z.string(),\n    components: z.string(),\n    lib: z.string(),\n    hooks: z.string(),\n    ui: z.string(),\n  }),\n})\n\nexport type Config = z.infer<typeof configSchema>\n\n// TODO: type the key.\n// Okay for now since I don't want a breaking change.\nexport const workspaceConfigSchema = z.record(configSchema)\n\nexport async function getConfig(cwd: string) {\n  const config = await getRawConfig(cwd)\n\n  if (!config) {\n    return null\n  }\n\n  // Set default icon library if not provided.\n  if (!config.iconLibrary) {\n    config.iconLibrary = config.style === \"new-york\" ? \"radix\" : \"lucide\"\n  }\n\n  return await resolveConfigPaths(cwd, config)\n}\n\nexport async function resolveConfigPaths(cwd: string, config: RawConfig) {\n  // Read tsconfig.json.\n  const tsConfig = await loadConfig(cwd)\n\n  if (tsConfig.resultType === \"failed\") {\n    throw new Error(\n      `Failed to load ${config.tsx ? \"tsconfig\" : \"jsconfig\"}.json. ${\n        tsConfig.message ?? \"\"\n      }`.trim()\n    )\n  }\n\n  return configSchema.parse({\n    ...config,\n    resolvedPaths: {\n      cwd,\n      tailwindConfig: config.tailwind.config\n        ? path.resolve(cwd, config.tailwind.config)\n        : \"\",\n      tailwindCss: path.resolve(cwd, config.tailwind.css),\n      utils: await resolveImport(config.aliases[\"utils\"], tsConfig),\n      components: await resolveImport(config.aliases[\"components\"], tsConfig),\n      ui: config.aliases[\"ui\"]\n        ? await resolveImport(config.aliases[\"ui\"], tsConfig)\n        : path.resolve(\n            (await resolveImport(config.aliases[\"components\"], tsConfig)) ??\n              cwd,\n            \"ui\"\n          ),\n      // TODO: Make this configurable.\n      // For now, we assume the lib and hooks directories are one level up from the components directory.\n      lib: config.aliases[\"lib\"]\n        ? await resolveImport(config.aliases[\"lib\"], tsConfig)\n        : path.resolve(\n            (await resolveImport(config.aliases[\"utils\"], tsConfig)) ?? cwd,\n            \"..\"\n          ),\n      hooks: config.aliases[\"hooks\"]\n        ? await resolveImport(config.aliases[\"hooks\"], tsConfig)\n        : path.resolve(\n            (await resolveImport(config.aliases[\"components\"], tsConfig)) ??\n              cwd,\n            \"..\",\n            \"hooks\"\n          ),\n    },\n  })\n}\n\nexport async function getRawConfig(cwd: string): Promise<RawConfig | null> {\n  try {\n    const configResult = await explorer.search(cwd)\n\n    if (!configResult) {\n      return null\n    }\n\n    return rawConfigSchema.parse(configResult.config)\n  } catch (error) {\n    const componentPath = `${cwd}/components.json`\n    throw new Error(\n      `Invalid configuration found in ${highlighter.info(componentPath)}.`\n    )\n  }\n}\n\n// Note: we can check for -workspace.yaml or \"workspace\" in package.json.\n// Since cwd is not necessarily the root of the project.\n// We'll instead check if ui aliases resolve to a different root.\nexport async function getWorkspaceConfig(config: Config) {\n  let resolvedAliases: any = {}\n\n  for (const key of Object.keys(config.aliases)) {\n    if (!isAliasKey(key, config)) {\n      continue\n    }\n\n    const resolvedPath = config.resolvedPaths[key]\n    const packageRoot = await findPackageRoot(\n      config.resolvedPaths.cwd,\n      resolvedPath\n    )\n\n    if (!packageRoot) {\n      resolvedAliases[key] = config\n      continue\n    }\n\n    resolvedAliases[key] = await getConfig(packageRoot)\n  }\n\n  const result = workspaceConfigSchema.safeParse(resolvedAliases)\n  if (!result.success) {\n    return null\n  }\n\n  return result.data\n}\n\nexport async function findPackageRoot(cwd: string, resolvedPath: string) {\n  const commonRoot = findCommonRoot(cwd, resolvedPath)\n  const relativePath = path.relative(commonRoot, resolvedPath)\n\n  const packageRoots = await fg.glob(\"**/package.json\", {\n    cwd: commonRoot,\n    deep: 3,\n    ignore: [\"**/node_modules/**\", \"**/dist/**\", \"**/build/**\", \"**/public/**\"],\n  })\n\n  const matchingPackageRoot = packageRoots\n    .map((pkgPath) => path.dirname(pkgPath))\n    .find((pkgDir) => relativePath.startsWith(pkgDir))\n\n  return matchingPackageRoot ? path.join(commonRoot, matchingPackageRoot) : null\n}\n\nfunction isAliasKey(\n  key: string,\n  config: Config\n): key is keyof Config[\"aliases\"] {\n  return Object.keys(config.resolvedPaths)\n    .filter((key) => key !== \"utils\")\n    .includes(key)\n}\n\nexport function findCommonRoot(cwd: string, resolvedPath: string) {\n  const parts1 = cwd.split(path.sep)\n  const parts2 = resolvedPath.split(path.sep)\n  const commonParts = []\n\n  for (let i = 0; i < Math.min(parts1.length, parts2.length); i++) {\n    if (parts1[i] !== parts2[i]) {\n      break\n    }\n    commonParts.push(parts1[i])\n  }\n\n  return commonParts.join(path.sep)\n}\n","import { createMatchPath, type ConfigLoaderSuccessResult } from \"tsconfig-paths\"\n\nexport async function resolveImport(\n  importPath: string,\n  config: Pick<ConfigLoaderSuccessResult, \"absoluteBaseUrl\" | \"paths\">\n) {\n  return createMatchPath(config.absoluteBaseUrl, config.paths)(\n    importPath,\n    undefined,\n    () => true,\n    [\".ts\", \".tsx\"]\n  )\n}\n","import path from \"path\"\nimport fs from \"fs-extra\"\nimport { type PackageJson } from \"type-fest\"\n\nexport function getPackageInfo(\n  cwd: string = \"\",\n  shouldThrow: boolean = true\n): PackageJson | null {\n  const packageJsonPath = path.join(cwd, \"package.json\")\n\n  return fs.readJSONSync(packageJsonPath, {\n    throws: shouldThrow,\n  }) as PackageJson\n}\n","import path from \"path\"\nimport {\n  fetchRegistry,\n  getRegistryParentMap,\n  getRegistryTypeAliasMap,\n  registryResolveItemsTree,\n  resolveRegistryItems,\n} from \"@/src/registry/api\"\nimport { registryItemSchema } from \"@/src/registry/schema\"\nimport {\n  configSchema,\n  findCommonRoot,\n  findPackageRoot,\n  getWorkspaceConfig,\n  workspaceConfigSchema,\n  type Config,\n} from \"@/src/utils/get-config\"\nimport { getProjectTailwindVersionFromConfig } from \"@/src/utils/get-project-info\"\nimport { handleError } from \"@/src/utils/handle-error\"\nimport { logger } from \"@/src/utils/logger\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport { updateCssVars } from \"@/src/utils/updaters/update-css-vars\"\nimport { updateDependencies } from \"@/src/utils/updaters/update-dependencies\"\nimport { updateFiles } from \"@/src/utils/updaters/update-files\"\nimport { updateTailwindConfig } from \"@/src/utils/updaters/update-tailwind-config\"\nimport { z } from \"zod\"\n\nexport async function addComponents(\n  components: string[],\n  config: Config,\n  options: {\n    overwrite?: boolean\n    silent?: boolean\n    isNewProject?: boolean\n  }\n) {\n  options = {\n    overwrite: false,\n    silent: false,\n    isNewProject: false,\n    ...options,\n  }\n\n  const workspaceConfig = await getWorkspaceConfig(config)\n  if (\n    workspaceConfig &&\n    workspaceConfig?.ui.resolvedPaths.cwd !== config.resolvedPaths.cwd\n  ) {\n    return await addWorkspaceComponents(components, config, workspaceConfig, {\n      ...options,\n      isRemote:\n        components?.length === 1 && !!components[0].match(/\\/chat\\/b\\//),\n    })\n  }\n\n  return await addProjectComponents(components, config, options)\n}\n\nasync function addProjectComponents(\n  components: string[],\n  config: z.infer<typeof configSchema>,\n  options: {\n    overwrite?: boolean\n    silent?: boolean\n    isNewProject?: boolean\n  }\n) {\n  const registrySpinner = spinner(`Checking registry.`, {\n    silent: options.silent,\n  })?.start()\n  const tree = await registryResolveItemsTree(components, config)\n  if (!tree) {\n    registrySpinner?.fail()\n    return handleError(new Error(\"Failed to fetch components from registry.\"))\n  }\n  registrySpinner?.succeed()\n\n  const tailwindVersion = await getProjectTailwindVersionFromConfig(config)\n\n  await updateTailwindConfig(tree.tailwind?.config, config, {\n    silent: options.silent,\n    tailwindVersion,\n  })\n  await updateCssVars(tree.cssVars, config, {\n    cleanupDefaultNextStyles: options.isNewProject,\n    silent: options.silent,\n    tailwindVersion,\n    tailwindConfig: tree.tailwind?.config,\n  })\n\n  await updateDependencies(tree.dependencies, config, {\n    silent: options.silent,\n  })\n  await updateFiles(tree.files, config, {\n    overwrite: options.overwrite,\n    silent: options.silent,\n  })\n\n  if (tree.docs) {\n    logger.info(tree.docs)\n  }\n}\n\nasync function addWorkspaceComponents(\n  components: string[],\n  config: z.infer<typeof configSchema>,\n  workspaceConfig: z.infer<typeof workspaceConfigSchema>,\n  options: {\n    overwrite?: boolean\n    silent?: boolean\n    isNewProject?: boolean\n    isRemote?: boolean\n  }\n) {\n  const registrySpinner = spinner(`Checking registry.`, {\n    silent: options.silent,\n  })?.start()\n  let registryItems = await resolveRegistryItems(components, config)\n  let result = await fetchRegistry(registryItems)\n  const payload = z.array(registryItemSchema).parse(result)\n  if (!payload) {\n    registrySpinner?.fail()\n    return handleError(new Error(\"Failed to fetch components from registry.\"))\n  }\n  registrySpinner?.succeed()\n\n  const registryParentMap = getRegistryParentMap(payload)\n  const registryTypeAliasMap = getRegistryTypeAliasMap()\n\n  const filesCreated: string[] = []\n  const filesUpdated: string[] = []\n  const filesSkipped: string[] = []\n\n  const rootSpinner = spinner(`Installing components.`)?.start()\n\n  for (const component of payload) {\n    const alias = registryTypeAliasMap.get(component.type)\n    const registryParent = registryParentMap.get(component.name)\n\n    // We don't support this type of component.\n    if (!alias) {\n      continue\n    }\n\n    // A good start is ui for now.\n    // TODO: Add support for other types.\n    let targetConfig =\n      component.type === \"registry:ui\" || registryParent?.type === \"registry:ui\"\n        ? workspaceConfig.ui\n        : config\n\n    const tailwindVersion = await getProjectTailwindVersionFromConfig(\n      targetConfig\n    )\n\n    const workspaceRoot = findCommonRoot(\n      config.resolvedPaths.cwd,\n      targetConfig.resolvedPaths.ui\n    )\n    const packageRoot =\n      (await findPackageRoot(workspaceRoot, targetConfig.resolvedPaths.cwd)) ??\n      targetConfig.resolvedPaths.cwd\n\n    // 1. Update tailwind config.\n    if (component.tailwind?.config) {\n      await updateTailwindConfig(component.tailwind?.config, targetConfig, {\n        silent: true,\n        tailwindVersion,\n      })\n      filesUpdated.push(\n        path.relative(workspaceRoot, targetConfig.resolvedPaths.tailwindConfig)\n      )\n    }\n\n    // 2. Update css vars.\n    if (component.cssVars) {\n      await updateCssVars(component.cssVars, targetConfig, {\n        silent: true,\n        tailwindVersion,\n        tailwindConfig: component.tailwind?.config,\n      })\n      filesUpdated.push(\n        path.relative(workspaceRoot, targetConfig.resolvedPaths.tailwindCss)\n      )\n    }\n\n    // 3. Update dependencies.\n    await updateDependencies(component.dependencies, targetConfig, {\n      silent: true,\n    })\n\n    // 4. Update files.\n    const files = await updateFiles(component.files, targetConfig, {\n      overwrite: options.overwrite,\n      silent: true,\n      rootSpinner,\n      isRemote: options.isRemote,\n    })\n\n    filesCreated.push(\n      ...files.filesCreated.map((file) =>\n        path.relative(workspaceRoot, path.join(packageRoot, file))\n      )\n    )\n    filesUpdated.push(\n      ...files.filesUpdated.map((file) =>\n        path.relative(workspaceRoot, path.join(packageRoot, file))\n      )\n    )\n    filesSkipped.push(\n      ...files.filesSkipped.map((file) =>\n        path.relative(workspaceRoot, path.join(packageRoot, file))\n      )\n    )\n  }\n\n  rootSpinner?.succeed()\n\n  // Sort files.\n  filesCreated.sort()\n  filesUpdated.sort()\n  filesSkipped.sort()\n\n  const hasUpdatedFiles = filesCreated.length || filesUpdated.length\n  if (!hasUpdatedFiles && !filesSkipped.length) {\n    spinner(`No files updated.`, {\n      silent: options.silent,\n    })?.info()\n  }\n\n  if (filesCreated.length) {\n    spinner(\n      `Created ${filesCreated.length} ${\n        filesCreated.length === 1 ? \"file\" : \"files\"\n      }:`,\n      {\n        silent: options.silent,\n      }\n    )?.succeed()\n    for (const file of filesCreated) {\n      logger.log(`  - ${file}`)\n    }\n  }\n\n  if (filesUpdated.length) {\n    spinner(\n      `Updated ${filesUpdated.length} ${\n        filesUpdated.length === 1 ? \"file\" : \"files\"\n      }:`,\n      {\n        silent: options.silent,\n      }\n    )?.info()\n    for (const file of filesUpdated) {\n      logger.log(`  - ${file}`)\n    }\n  }\n\n  if (filesSkipped.length) {\n    spinner(\n      `Skipped ${filesSkipped.length} ${\n        filesUpdated.length === 1 ? \"file\" : \"files\"\n      }: (use --overwrite to overwrite)`,\n      {\n        silent: options.silent,\n      }\n    )?.info()\n    for (const file of filesSkipped) {\n      logger.log(`  - ${file}`)\n    }\n  }\n}\n","import { promises as fs } from \"fs\"\nimport path from \"path\"\nimport {\n  registryItemCssVarsSchema,\n  registryItemTailwindSchema,\n} from \"@/src/registry/schema\"\nimport { Config } from \"@/src/utils/get-config\"\nimport { TailwindVersion } from \"@/src/utils/get-project-info\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport postcss from \"postcss\"\nimport AtRule from \"postcss/lib/at-rule\"\nimport Root from \"postcss/lib/root\"\nimport Rule from \"postcss/lib/rule\"\nimport { z } from \"zod\"\n\nexport async function updateCssVars(\n  cssVars: z.infer<typeof registryItemCssVarsSchema> | undefined,\n  config: Config,\n  options: {\n    cleanupDefaultNextStyles?: boolean\n    silent?: boolean\n    tailwindVersion?: TailwindVersion\n    tailwindConfig?: z.infer<typeof registryItemTailwindSchema>[\"config\"]\n  }\n) {\n  if (!config.resolvedPaths.tailwindCss) {\n    return\n  }\n\n  options = {\n    cleanupDefaultNextStyles: false,\n    silent: false,\n    tailwindVersion: \"v3\",\n    ...options,\n  }\n  const cssFilepath = config.resolvedPaths.tailwindCss\n  const cssFilepathRelative = path.relative(\n    config.resolvedPaths.cwd,\n    cssFilepath\n  )\n  const cssVarsSpinner = spinner(\n    `Updating ${highlighter.info(cssFilepathRelative)}`,\n    {\n      silent: options.silent,\n    }\n  ).start()\n  const raw = await fs.readFile(cssFilepath, \"utf8\")\n  let output = await transformCssVars(raw, cssVars ?? {}, config, {\n    cleanupDefaultNextStyles: options.cleanupDefaultNextStyles,\n    tailwindVersion: options.tailwindVersion,\n    tailwindConfig: options.tailwindConfig,\n  })\n  await fs.writeFile(cssFilepath, output, \"utf8\")\n  cssVarsSpinner.succeed()\n}\n\nexport async function transformCssVars(\n  input: string,\n  cssVars: z.infer<typeof registryItemCssVarsSchema>,\n  config: Config,\n  options: {\n    cleanupDefaultNextStyles?: boolean\n    tailwindVersion?: TailwindVersion\n    tailwindConfig?: z.infer<typeof registryItemTailwindSchema>[\"config\"]\n  } = {\n    cleanupDefaultNextStyles: false,\n    tailwindVersion: \"v3\",\n    tailwindConfig: undefined,\n  }\n) {\n  options = {\n    cleanupDefaultNextStyles: false,\n    tailwindVersion: \"v3\",\n    tailwindConfig: undefined,\n    ...options,\n  }\n\n  let plugins = [updateCssVarsPlugin(cssVars)]\n\n  if (options.tailwindVersion === \"v4\") {\n    plugins = [\n      addCustomVariant({ params: \"dark (&:is(.dark *))\" }),\n      updateCssVarsPluginV4(cssVars),\n      updateThemePlugin(cssVars),\n    ]\n\n    if (options.tailwindConfig) {\n      plugins.push(updateTailwindConfigPlugin(options.tailwindConfig))\n      plugins.push(updateTailwindConfigAnimationPlugin(options.tailwindConfig))\n      plugins.push(updateTailwindConfigKeyframesPlugin(options.tailwindConfig))\n    }\n  }\n\n  if (options.cleanupDefaultNextStyles) {\n    plugins.push(cleanupDefaultNextStylesPlugin())\n  }\n\n  if (config.tailwind.cssVariables) {\n    plugins.push(updateBaseLayerPlugin())\n  }\n\n  const result = await postcss(plugins).process(input, {\n    from: undefined,\n  })\n\n  let output = result.css.replace(/\\/\\* ---break--- \\*\\//g, \"\")\n\n  if (options.tailwindVersion === \"v4\") {\n    output = output.replace(/(\\n\\s*\\n)+/g, \"\\n\\n\")\n  }\n\n  return output\n}\n\nfunction updateBaseLayerPlugin() {\n  return {\n    postcssPlugin: \"update-base-layer\",\n    Once(root: Root) {\n      const requiredRules = [\n        { selector: \"*\", apply: \"border-border\" },\n        { selector: \"body\", apply: \"bg-background text-foreground\" },\n      ]\n\n      let baseLayer = root.nodes.find(\n        (node): node is AtRule =>\n          node.type === \"atrule\" &&\n          node.name === \"layer\" &&\n          node.params === \"base\" &&\n          requiredRules.every(({ selector, apply }) =>\n            node.nodes?.some(\n              (rule): rule is Rule =>\n                rule.type === \"rule\" &&\n                rule.selector === selector &&\n                rule.nodes.some(\n                  (applyRule): applyRule is AtRule =>\n                    applyRule.type === \"atrule\" &&\n                    applyRule.name === \"apply\" &&\n                    applyRule.params === apply\n                )\n            )\n          )\n      ) as AtRule | undefined\n\n      if (!baseLayer) {\n        baseLayer = postcss.atRule({\n          name: \"layer\",\n          params: \"base\",\n          raws: { semicolon: true, between: \" \", before: \"\\n\" },\n        })\n        root.append(baseLayer)\n        root.insertBefore(baseLayer, postcss.comment({ text: \"---break---\" }))\n      }\n\n      requiredRules.forEach(({ selector, apply }) => {\n        const existingRule = baseLayer?.nodes?.find(\n          (node): node is Rule =>\n            node.type === \"rule\" && node.selector === selector\n        )\n\n        if (!existingRule) {\n          baseLayer?.append(\n            postcss.rule({\n              selector,\n              nodes: [\n                postcss.atRule({\n                  name: \"apply\",\n                  params: apply,\n                  raws: { semicolon: true, before: \"\\n    \" },\n                }),\n              ],\n              raws: { semicolon: true, between: \" \", before: \"\\n  \" },\n            })\n          )\n        }\n      })\n    },\n  }\n}\n\nfunction updateCssVarsPlugin(\n  cssVars: z.infer<typeof registryItemCssVarsSchema>\n) {\n  return {\n    postcssPlugin: \"update-css-vars\",\n    Once(root: Root) {\n      let baseLayer = root.nodes.find(\n        (node) =>\n          node.type === \"atrule\" &&\n          node.name === \"layer\" &&\n          node.params === \"base\"\n      ) as AtRule | undefined\n\n      if (!(baseLayer instanceof AtRule)) {\n        baseLayer = postcss.atRule({\n          name: \"layer\",\n          params: \"base\",\n          nodes: [],\n          raws: {\n            semicolon: true,\n            before: \"\\n\",\n            between: \" \",\n          },\n        })\n        root.append(baseLayer)\n        root.insertBefore(baseLayer, postcss.comment({ text: \"---break---\" }))\n      }\n\n      if (baseLayer !== undefined) {\n        // Add variables for each key in cssVars\n        Object.entries(cssVars).forEach(([key, vars]) => {\n          const selector = key === \"light\" ? \":root\" : `.${key}`\n          // TODO: Fix typecheck.\n          addOrUpdateVars(baseLayer as AtRule, selector, vars)\n        })\n      }\n    },\n  }\n}\n\nfunction removeConflictVars(root: Rule | Root) {\n  const rootRule = root.nodes.find(\n    (node): node is Rule => node.type === \"rule\" && node.selector === \":root\"\n  )\n\n  if (rootRule) {\n    const propsToRemove = [\"--background\", \"--foreground\"]\n\n    rootRule.nodes\n      .filter(\n        (node): node is postcss.Declaration =>\n          node.type === \"decl\" && propsToRemove.includes(node.prop)\n      )\n      .forEach((node) => node.remove())\n\n    if (rootRule.nodes.length === 0) {\n      rootRule.remove()\n    }\n  }\n}\n\nfunction cleanupDefaultNextStylesPlugin() {\n  return {\n    postcssPlugin: \"cleanup-default-next-styles\",\n    Once(root: Root) {\n      const bodyRule = root.nodes.find(\n        (node): node is Rule => node.type === \"rule\" && node.selector === \"body\"\n      )\n      if (bodyRule) {\n        // Remove color from the body node.\n        bodyRule.nodes\n          .find(\n            (node): node is postcss.Declaration =>\n              node.type === \"decl\" &&\n              node.prop === \"color\" &&\n              [\"rgb(var(--foreground-rgb))\", \"var(--foreground)\"].includes(\n                node.value\n              )\n          )\n          ?.remove()\n\n        // Remove background: linear-gradient.\n        bodyRule.nodes\n          .find((node): node is postcss.Declaration => {\n            return (\n              node.type === \"decl\" &&\n              node.prop === \"background\" &&\n              // This is only going to run on create project, so all good.\n              (node.value.startsWith(\"linear-gradient\") ||\n                node.value === \"var(--background)\")\n            )\n          })\n          ?.remove()\n\n        // Remove font-family: Arial, Helvetica, sans-serif;\n        bodyRule.nodes\n          .find(\n            (node): node is postcss.Declaration =>\n              node.type === \"decl\" &&\n              node.prop === \"font-family\" &&\n              node.value === \"Arial, Helvetica, sans-serif\"\n          )\n          ?.remove()\n\n        // If the body rule is empty, remove it.\n        if (bodyRule.nodes.length === 0) {\n          bodyRule.remove()\n        }\n      }\n\n      removeConflictVars(root)\n\n      const darkRootRule = root.nodes.find(\n        (node): node is Rule =>\n          node.type === \"atrule\" &&\n          node.params === \"(prefers-color-scheme: dark)\"\n      )\n\n      if (darkRootRule) {\n        removeConflictVars(darkRootRule)\n        if (darkRootRule.nodes.length === 0) {\n          darkRootRule.remove()\n        }\n      }\n    },\n  }\n}\n\nfunction addOrUpdateVars(\n  baseLayer: AtRule,\n  selector: string,\n  vars: Record<string, string>\n) {\n  let ruleNode = baseLayer.nodes?.find(\n    (node): node is Rule => node.type === \"rule\" && node.selector === selector\n  )\n\n  if (!ruleNode) {\n    if (Object.keys(vars).length > 0) {\n      ruleNode = postcss.rule({\n        selector,\n        raws: { between: \" \", before: \"\\n  \" },\n      })\n      baseLayer.append(ruleNode)\n    }\n  }\n\n  Object.entries(vars).forEach(([key, value]) => {\n    const prop = `--${key.replace(/^--/, \"\")}`\n    const newDecl = postcss.decl({\n      prop,\n      value,\n      raws: { semicolon: true },\n    })\n\n    const existingDecl = ruleNode?.nodes.find(\n      (node): node is postcss.Declaration =>\n        node.type === \"decl\" && node.prop === prop\n    )\n\n    existingDecl ? existingDecl.replaceWith(newDecl) : ruleNode?.append(newDecl)\n  })\n}\n\nfunction updateCssVarsPluginV4(\n  cssVars: z.infer<typeof registryItemCssVarsSchema>\n) {\n  return {\n    postcssPlugin: \"update-css-vars-v4\",\n    Once(root: Root) {\n      Object.entries(cssVars).forEach(([key, vars]) => {\n        const selector = key === \"light\" ? \":root\" : `.${key}`\n\n        let ruleNode = root.nodes?.find(\n          (node): node is Rule =>\n            node.type === \"rule\" && node.selector === selector\n        )\n\n        if (!ruleNode) {\n          ruleNode = postcss.rule({\n            selector,\n            nodes: [],\n            raws: { semicolon: true, between: \" \", before: \"\\n\" },\n          })\n          root.append(ruleNode)\n          root.insertBefore(ruleNode, postcss.comment({ text: \"---break---\" }))\n        }\n\n        Object.entries(vars).forEach(([key, value]) => {\n          const prop = `--${key.replace(/^--/, \"\")}`\n\n          if (isLocalHSLValue(value)) {\n            value = `hsl(${value})`\n          }\n\n          const newDecl = postcss.decl({\n            prop,\n            value,\n            raws: { semicolon: true },\n          })\n          const existingDecl = ruleNode?.nodes.find(\n            (node): node is postcss.Declaration =>\n              node.type === \"decl\" && node.prop === prop\n          )\n          existingDecl\n            ? existingDecl.replaceWith(newDecl)\n            : ruleNode?.append(newDecl)\n        })\n      })\n    },\n  }\n}\n\nfunction updateThemePlugin(cssVars: z.infer<typeof registryItemCssVarsSchema>) {\n  return {\n    postcssPlugin: \"update-theme\",\n    Once(root: Root) {\n      // Find unique color names from light and dark.\n      const variables = Array.from(\n        new Set(\n          Object.keys(cssVars).flatMap((key) =>\n            Object.keys(cssVars[key as keyof typeof cssVars] || {})\n          )\n        )\n      )\n\n      if (!variables.length) {\n        return\n      }\n\n      const themeNode = upsertThemeNode(root)\n\n      const themeVarNodes = themeNode.nodes?.filter(\n        (node): node is postcss.Declaration =>\n          node.type === \"decl\" && node.prop.startsWith(\"--\")\n      )\n\n      for (const variable of variables) {\n        const value = Object.values(cssVars).find((vars) => vars[variable])?.[\n          variable\n        ]\n\n        if (!value) {\n          continue\n        }\n\n        if (variable === \"radius\") {\n          const radiusVariables = {\n            sm: \"calc(var(--radius) - 4px)\",\n            md: \"calc(var(--radius) - 2px)\",\n            lg: \"var(--radius)\",\n            xl: \"calc(var(--radius) + 4px)\",\n          }\n          for (const [key, value] of Object.entries(radiusVariables)) {\n            const cssVarNode = postcss.decl({\n              prop: `--radius-${key}`,\n              value,\n              raws: { semicolon: true },\n            })\n            if (\n              themeNode?.nodes?.find(\n                (node): node is postcss.Declaration =>\n                  node.type === \"decl\" && node.prop === cssVarNode.prop\n              )\n            ) {\n              continue\n            }\n            themeNode?.append(cssVarNode)\n          }\n          break\n        }\n\n        const cssVarNode = postcss.decl({\n          prop:\n            isLocalHSLValue(value) || isColorValue(value)\n              ? `--color-${variable.replace(/^--/, \"\")}`\n              : `--${variable.replace(/^--/, \"\")}`,\n          value: `var(--${variable})`,\n          raws: { semicolon: true },\n        })\n        const existingDecl = themeNode?.nodes?.find(\n          (node): node is postcss.Declaration =>\n            node.type === \"decl\" && node.prop === cssVarNode.prop\n        )\n        if (!existingDecl) {\n          if (themeVarNodes?.length) {\n            themeNode?.insertAfter(\n              themeVarNodes[themeVarNodes.length - 1],\n              cssVarNode\n            )\n          } else {\n            themeNode?.append(cssVarNode)\n          }\n        }\n      }\n    },\n  }\n}\n\nfunction upsertThemeNode(root: Root): AtRule {\n  let themeNode = root.nodes.find(\n    (node): node is AtRule =>\n      node.type === \"atrule\" &&\n      node.name === \"theme\" &&\n      node.params === \"inline\"\n  )\n\n  if (!themeNode) {\n    themeNode = postcss.atRule({\n      name: \"theme\",\n      params: \"inline\",\n      nodes: [],\n      raws: { semicolon: true, between: \" \", before: \"\\n\" },\n    })\n    root.append(themeNode)\n    root.insertBefore(themeNode, postcss.comment({ text: \"---break---\" }))\n  }\n\n  return themeNode\n}\n\nfunction addCustomVariant({ params }: { params: string }) {\n  return {\n    postcssPlugin: \"add-custom-variant\",\n    Once(root: Root) {\n      const customVariant = root.nodes.find(\n        (node): node is AtRule =>\n          node.type === \"atrule\" && node.name === \"custom-variant\"\n      )\n      if (!customVariant) {\n        const variantNode = postcss.atRule({\n          name: \"custom-variant\",\n          params,\n          raws: { semicolon: true, before: \"\\n\" },\n        })\n        root.insertAfter(root.nodes[0], variantNode)\n        root.insertBefore(variantNode, postcss.comment({ text: \"---break---\" }))\n      }\n    },\n  }\n}\n\nfunction updateTailwindConfigPlugin(\n  tailwindConfig: z.infer<typeof registryItemTailwindSchema>[\"config\"]\n) {\n  return {\n    postcssPlugin: \"update-tailwind-config\",\n    Once(root: Root) {\n      if (!tailwindConfig?.plugins) {\n        return\n      }\n\n      const quoteType = getQuoteType(root)\n      const quote = quoteType === \"single\" ? \"'\" : '\"'\n\n      const pluginNodes = root.nodes.filter(\n        (node): node is AtRule =>\n          node.type === \"atrule\" && node.name === \"plugin\"\n      )\n\n      const lastPluginNode =\n        pluginNodes[pluginNodes.length - 1] || root.nodes[0]\n\n      for (const plugin of tailwindConfig.plugins) {\n        const pluginName = plugin.replace(/^require\\([\"']|[\"']\\)$/g, \"\")\n\n        // Check if the plugin is already present.\n        if (\n          pluginNodes.some((node) => {\n            return node.params.replace(/[\"']/g, \"\") === pluginName\n          })\n        ) {\n          continue\n        }\n\n        const pluginNode = postcss.atRule({\n          name: \"plugin\",\n          params: `${quote}${pluginName}${quote}`,\n          raws: { semicolon: true, before: \"\\n\" },\n        })\n        root.insertAfter(lastPluginNode, pluginNode)\n        root.insertBefore(pluginNode, postcss.comment({ text: \"---break---\" }))\n      }\n    },\n  }\n}\n\nfunction updateTailwindConfigKeyframesPlugin(\n  tailwindConfig: z.infer<typeof registryItemTailwindSchema>[\"config\"]\n) {\n  return {\n    postcssPlugin: \"update-tailwind-config-keyframes\",\n    Once(root: Root) {\n      if (!tailwindConfig?.theme?.extend?.keyframes) {\n        return\n      }\n\n      const themeNode = upsertThemeNode(root)\n      const existingKeyFrameNodes = themeNode.nodes?.filter(\n        (node): node is AtRule =>\n          node.type === \"atrule\" && node.name === \"keyframes\"\n      )\n\n      const keyframeValueSchema = z.record(\n        z.string(),\n        z.record(z.string(), z.string())\n      )\n\n      for (const [keyframeName, keyframeValue] of Object.entries(\n        tailwindConfig.theme.extend.keyframes\n      )) {\n        if (typeof keyframeName !== \"string\") {\n          continue\n        }\n\n        const parsedKeyframeValue = keyframeValueSchema.safeParse(keyframeValue)\n\n        if (!parsedKeyframeValue.success) {\n          continue\n        }\n\n        if (\n          existingKeyFrameNodes?.find(\n            (node): node is postcss.AtRule =>\n              node.type === \"atrule\" &&\n              node.name === \"keyframes\" &&\n              node.params === keyframeName\n          )\n        ) {\n          continue\n        }\n\n        const keyframeNode = postcss.atRule({\n          name: \"keyframes\",\n          params: keyframeName,\n          nodes: [],\n          raws: { semicolon: true, between: \" \", before: \"\\n  \" },\n        })\n\n        for (const [key, values] of Object.entries(parsedKeyframeValue.data)) {\n          const rule = postcss.rule({\n            selector: key,\n            nodes: Object.entries(values).map(([key, value]) =>\n              postcss.decl({\n                prop: key,\n                value,\n                raws: { semicolon: true, before: \"\\n      \", between: \": \" },\n              })\n            ),\n            raws: { semicolon: true, between: \" \", before: \"\\n    \" },\n          })\n          keyframeNode.append(rule)\n        }\n\n        themeNode.append(keyframeNode)\n        themeNode.insertBefore(\n          keyframeNode,\n          postcss.comment({ text: \"---break---\" })\n        )\n      }\n    },\n  }\n}\n\nfunction updateTailwindConfigAnimationPlugin(\n  tailwindConfig: z.infer<typeof registryItemTailwindSchema>[\"config\"]\n) {\n  return {\n    postcssPlugin: \"update-tailwind-config-animation\",\n    Once(root: Root) {\n      if (!tailwindConfig?.theme?.extend?.animation) {\n        return\n      }\n\n      const themeNode = upsertThemeNode(root)\n      const existingAnimationNodes = themeNode.nodes?.filter(\n        (node): node is postcss.Declaration =>\n          node.type === \"decl\" && node.prop.startsWith(\"--animate-\")\n      )\n\n      const parsedAnimationValue = z\n        .record(z.string(), z.string())\n        .safeParse(tailwindConfig.theme.extend.animation)\n      if (!parsedAnimationValue.success) {\n        return\n      }\n\n      for (const [key, value] of Object.entries(parsedAnimationValue.data)) {\n        const prop = `--animate-${key}`\n        if (\n          existingAnimationNodes?.find(\n            (node): node is postcss.Declaration => node.prop === prop\n          )\n        ) {\n          continue\n        }\n\n        const animationNode = postcss.decl({\n          prop,\n          value,\n          raws: { semicolon: true, between: \": \", before: \"\\n  \" },\n        })\n        themeNode.append(animationNode)\n      }\n    },\n  }\n}\n\nfunction getQuoteType(root: Root): \"single\" | \"double\" {\n  const firstNode = root.nodes[0]\n  const raw = firstNode.toString()\n\n  if (raw.includes(\"'\")) {\n    return \"single\"\n  }\n  return \"double\"\n}\n\nexport function isLocalHSLValue(value: string) {\n  if (\n    value.startsWith(\"hsl\") ||\n    value.startsWith(\"rgb\") ||\n    value.startsWith(\"#\") ||\n    value.startsWith(\"oklch\")\n  ) {\n    return false\n  }\n\n  const chunks = value.split(\" \")\n\n  return (\n    chunks.length === 3 &&\n    chunks.slice(1, 3).every((chunk) => chunk.includes(\"%\"))\n  )\n}\n\nexport function isColorValue(value: string) {\n  return (\n    value.startsWith(\"hsl\") ||\n    value.startsWith(\"rgb\") ||\n    value.startsWith(\"#\") ||\n    value.startsWith(\"oklch\")\n  )\n}\n","import { detect } from \"@antfu/ni\"\n\nexport async function getPackageManager(\n  targetDir: string,\n  { withFallback }: { withFallback?: boolean } = {\n    withFallback: false,\n  }\n): Promise<\"yarn\" | \"pnpm\" | \"bun\" | \"npm\"> {\n  const packageManager = await detect({ programmatic: true, cwd: targetDir })\n\n  if (packageManager === \"yarn@berry\") return \"yarn\"\n  if (packageManager === \"pnpm@6\") return \"pnpm\"\n  if (packageManager === \"bun\") return \"bun\"\n\n  if (!withFallback) {\n    return packageManager ?? \"npm\"\n  }\n\n  // Fallback to user agent if not detected.\n  const userAgent = process.env.npm_config_user_agent || \"\"\n\n  if (userAgent.startsWith(\"yarn\")) {\n    return \"yarn\"\n  }\n\n  if (userAgent.startsWith(\"pnpm\")) {\n    return \"pnpm\"\n  }\n\n  if (userAgent.startsWith(\"bun\")) {\n    return \"bun\"\n  }\n\n  return \"npm\"\n}\n\nexport async function getPackageRunner(cwd: string) {\n  const packageManager = await getPackageManager(cwd)\n\n  if (packageManager === \"pnpm\") return \"pnpm dlx\"\n\n  if (packageManager === \"bun\") return \"bunx\"\n\n  return \"npx\"\n}\n","import { RegistryItem } from \"@/src/registry/schema\"\nimport { Config } from \"@/src/utils/get-config\"\nimport { getPackageInfo } from \"@/src/utils/get-package-info\"\nimport { getPackageManager } from \"@/src/utils/get-package-manager\"\nimport { logger } from \"@/src/utils/logger\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport { execa } from \"execa\"\nimport prompts from \"prompts\"\n\nexport async function updateDependencies(\n  dependencies: RegistryItem[\"dependencies\"],\n  config: Config,\n  options: {\n    silent?: boolean\n  }\n) {\n  dependencies = Array.from(new Set(dependencies))\n  if (!dependencies?.length) {\n    return\n  }\n\n  options = {\n    silent: false,\n    ...options,\n  }\n\n  const dependenciesSpinner = spinner(`Installing dependencies.`, {\n    silent: options.silent,\n  })?.start()\n  const packageManager = await getPackageManager(config.resolvedPaths.cwd)\n\n  // Offer to use --force or --legacy-peer-deps if using React 19 with npm.\n  let flag = \"\"\n  if (isUsingReact19(config) && packageManager === \"npm\") {\n    dependenciesSpinner.stopAndPersist()\n    logger.warn(\n      \"\\nIt looks like you are using React 19. \\nSome packages may fail to install due to peer dependency issues in npm (see https://ui.shadcn.com/react-19).\\n\"\n    )\n    const confirmation = await prompts([\n      {\n        type: \"select\",\n        name: \"flag\",\n        message: \"How would you like to proceed?\",\n        choices: [\n          { title: \"Use --force\", value: \"force\" },\n          { title: \"Use --legacy-peer-deps\", value: \"legacy-peer-deps\" },\n        ],\n      },\n    ])\n\n    if (confirmation) {\n      flag = confirmation.flag\n    }\n  }\n\n  dependenciesSpinner?.start()\n\n  await execa(\n    packageManager,\n    [\n      packageManager === \"npm\" ? \"install\" : \"add\",\n      ...(packageManager === \"npm\" && flag ? [`--${flag}`] : []),\n      ...dependencies,\n    ],\n    {\n      cwd: config.resolvedPaths.cwd,\n    }\n  )\n\n  dependenciesSpinner?.succeed()\n}\n\nfunction isUsingReact19(config: Config) {\n  const packageInfo = getPackageInfo(config.resolvedPaths.cwd)\n\n  if (!packageInfo?.dependencies?.react) {\n    return false\n  }\n\n  return /^(?:\\^|~)?19(?:\\.\\d+)*(?:-.*)?$/.test(packageInfo.dependencies.react)\n}\n","import { existsSync, promises as fs } from \"fs\"\nimport path, { basename } from \"path\"\nimport { getRegistryBaseColor } from \"@/src/registry/api\"\nimport { RegistryItem, registryItemFileSchema } from \"@/src/registry/schema\"\nimport { Config } from \"@/src/utils/get-config\"\nimport { getProjectInfo } from \"@/src/utils/get-project-info\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport { transform } from \"@/src/utils/transformers\"\nimport { transformCssVars } from \"@/src/utils/transformers/transform-css-vars\"\nimport { transformIcons } from \"@/src/utils/transformers/transform-icons\"\nimport { transformImport } from \"@/src/utils/transformers/transform-import\"\nimport { transformRsc } from \"@/src/utils/transformers/transform-rsc\"\nimport { transformTwPrefixes } from \"@/src/utils/transformers/transform-tw-prefix\"\nimport prompts from \"prompts\"\nimport { z } from \"zod\"\n\nexport async function updateFiles(\n  files: RegistryItem[\"files\"],\n  config: Config,\n  options: {\n    overwrite?: boolean\n    force?: boolean\n    silent?: boolean\n    rootSpinner?: ReturnType<typeof spinner>\n    isRemote?: boolean\n  }\n) {\n  if (!files?.length) {\n    return {\n      filesCreated: [],\n      filesUpdated: [],\n      filesSkipped: [],\n    }\n  }\n  options = {\n    overwrite: false,\n    force: false,\n    silent: false,\n    isRemote: false,\n    ...options,\n  }\n  const filesCreatedSpinner = spinner(`Updating files.`, {\n    silent: options.silent,\n  })?.start()\n\n  const [projectInfo, baseColor] = await Promise.all([\n    getProjectInfo(config.resolvedPaths.cwd),\n    getRegistryBaseColor(config.tailwind.baseColor),\n  ])\n\n  const filesCreated = []\n  const filesUpdated = []\n  const filesSkipped = []\n\n  for (const file of files) {\n    if (!file.content) {\n      continue\n    }\n\n    let filePath = resolveFilePath(file, config, {\n      isSrcDir: projectInfo?.isSrcDir,\n      commonRoot: findCommonRoot(\n        files.map((f) => f.path),\n        file.path\n      ),\n    })\n    const fileName = basename(file.path)\n    const targetDir = path.dirname(filePath)\n\n    if (!config.tsx) {\n      filePath = filePath.replace(/\\.tsx?$/, (match) =>\n        match === \".tsx\" ? \".jsx\" : \".js\"\n      )\n    }\n\n    const existingFile = existsSync(filePath)\n\n    if (existingFile && !options.overwrite) {\n      filesCreatedSpinner.stop()\n      if (options.rootSpinner) {\n        options.rootSpinner.stop()\n      }\n      const { overwrite } = await prompts({\n        type: \"confirm\",\n        name: \"overwrite\",\n        message: `The file ${highlighter.info(\n          fileName\n        )} already exists. Would you like to overwrite?`,\n        initial: false,\n      })\n\n      if (!overwrite) {\n        filesSkipped.push(path.relative(config.resolvedPaths.cwd, filePath))\n        if (options.rootSpinner) {\n          options.rootSpinner.start()\n        }\n        continue\n      }\n      filesCreatedSpinner?.start()\n      if (options.rootSpinner) {\n        options.rootSpinner.start()\n      }\n    }\n\n    // Create the target directory if it doesn't exist.\n    if (!existsSync(targetDir)) {\n      await fs.mkdir(targetDir, { recursive: true })\n    }\n\n    // Run our transformers.\n    const content = await transform(\n      {\n        filename: file.path,\n        raw: file.content,\n        config,\n        baseColor,\n        transformJsx: !config.tsx,\n        isRemote: options.isRemote,\n      },\n      [\n        transformImport,\n        transformRsc,\n        transformCssVars,\n        transformTwPrefixes,\n        transformIcons,\n      ]\n    )\n\n    await fs.writeFile(filePath, content, \"utf-8\")\n    existingFile\n      ? filesUpdated.push(path.relative(config.resolvedPaths.cwd, filePath))\n      : filesCreated.push(path.relative(config.resolvedPaths.cwd, filePath))\n  }\n\n  const hasUpdatedFiles = filesCreated.length || filesUpdated.length\n  if (!hasUpdatedFiles && !filesSkipped.length) {\n    filesCreatedSpinner?.info(\"No files updated.\")\n  }\n\n  if (filesCreated.length) {\n    filesCreatedSpinner?.succeed(\n      `Created ${filesCreated.length} ${\n        filesCreated.length === 1 ? \"file\" : \"files\"\n      }:`\n    )\n    if (!options.silent) {\n      for (const file of filesCreated) {\n        logger.log(`  - ${file}`)\n      }\n    }\n  } else {\n    filesCreatedSpinner?.stop()\n  }\n\n  if (filesUpdated.length) {\n    spinner(\n      `Updated ${filesUpdated.length} ${\n        filesUpdated.length === 1 ? \"file\" : \"files\"\n      }:`,\n      {\n        silent: options.silent,\n      }\n    )?.info()\n    if (!options.silent) {\n      for (const file of filesUpdated) {\n        logger.log(`  - ${file}`)\n      }\n    }\n  }\n\n  if (filesSkipped.length) {\n    spinner(\n      `Skipped ${filesSkipped.length} ${\n        filesUpdated.length === 1 ? \"file\" : \"files\"\n      }: (use --overwrite to overwrite)`,\n      {\n        silent: options.silent,\n      }\n    )?.info()\n    if (!options.silent) {\n      for (const file of filesSkipped) {\n        logger.log(`  - ${file}`)\n      }\n    }\n  }\n\n  if (!options.silent) {\n    logger.break()\n  }\n\n  return {\n    filesCreated,\n    filesUpdated,\n    filesSkipped,\n  }\n}\n\nexport function resolveFilePath(\n  file: z.infer<typeof registryItemFileSchema>,\n  config: Config,\n  options: {\n    isSrcDir?: boolean\n    commonRoot?: string\n  }\n) {\n  if (file.target) {\n    if (file.target.startsWith(\"~/\")) {\n      return path.join(config.resolvedPaths.cwd, file.target.replace(\"~/\", \"\"))\n    }\n\n    return options.isSrcDir\n      ? path.join(\n          config.resolvedPaths.cwd,\n          \"src\",\n          file.target.replace(\"src/\", \"\")\n        )\n      : path.join(config.resolvedPaths.cwd, file.target.replace(\"src/\", \"\"))\n  }\n\n  const targetDir = resolveFileTargetDirectory(file, config)\n\n  const relativePath = resolveNestedFilePath(file.path, targetDir)\n  return path.join(targetDir, relativePath)\n}\n\nfunction resolveFileTargetDirectory(\n  file: z.infer<typeof registryItemFileSchema>,\n  config: Config\n) {\n  if (file.type === \"registry:ui\") {\n    return config.resolvedPaths.ui\n  }\n\n  if (file.type === \"registry:lib\") {\n    return config.resolvedPaths.lib\n  }\n\n  if (file.type === \"registry:block\" || file.type === \"registry:component\") {\n    return config.resolvedPaths.components\n  }\n\n  if (file.type === \"registry:hook\") {\n    return config.resolvedPaths.hooks\n  }\n\n  return config.resolvedPaths.components\n}\n\nexport function findCommonRoot(paths: string[], needle: string): string {\n  // Remove leading slashes for consistent handling\n  const normalizedPaths = paths.map((p) => p.replace(/^\\//, \"\"))\n  const normalizedNeedle = needle.replace(/^\\//, \"\")\n\n  // Get the directory path of the needle by removing the file name\n  const needleDir = normalizedNeedle.split(\"/\").slice(0, -1).join(\"/\")\n\n  // If needle is at root level, return empty string\n  if (!needleDir) {\n    return \"\"\n  }\n\n  // Split the needle directory into segments\n  const needleSegments = needleDir.split(\"/\")\n\n  // Start from the full path and work backwards\n  for (let i = needleSegments.length; i > 0; i--) {\n    const testPath = needleSegments.slice(0, i).join(\"/\")\n    // Check if this is a common root by verifying if any other paths start with it\n    const hasRelatedPaths = normalizedPaths.some(\n      (path) => path !== normalizedNeedle && path.startsWith(testPath + \"/\")\n    )\n    if (hasRelatedPaths) {\n      return \"/\" + testPath // Add leading slash back for the result\n    }\n  }\n\n  // If no common root found with other files, return the parent directory of the needle\n  return \"/\" + needleDir // Add leading slash back for the result\n}\n\nexport function resolveNestedFilePath(\n  filePath: string,\n  targetDir: string\n): string {\n  // Normalize paths by removing leading/trailing slashes\n  const normalizedFilePath = filePath.replace(/^\\/|\\/$/g, \"\")\n  const normalizedTargetDir = targetDir.replace(/^\\/|\\/$/g, \"\")\n\n  // Split paths into segments\n  const fileSegments = normalizedFilePath.split(\"/\")\n  const targetSegments = normalizedTargetDir.split(\"/\")\n\n  // Find the last matching segment from targetDir in filePath\n  const lastTargetSegment = targetSegments[targetSegments.length - 1]\n  const commonDirIndex = fileSegments.findIndex(\n    (segment) => segment === lastTargetSegment\n  )\n\n  if (commonDirIndex === -1) {\n    // Return just the filename if no common directory is found\n    return fileSegments[fileSegments.length - 1]\n  }\n\n  // Return everything after the common directory\n  return fileSegments.slice(commonDirIndex + 1).join(\"/\")\n}\n","import { promises as fs } from \"fs\"\nimport { tmpdir } from \"os\"\nimport path from \"path\"\nimport { registryBaseColorSchema } from \"@/src/registry/schema\"\nimport { Config } from \"@/src/utils/get-config\"\nimport { transformCssVars } from \"@/src/utils/transformers/transform-css-vars\"\nimport { transformIcons } from \"@/src/utils/transformers/transform-icons\"\nimport { transformImport } from \"@/src/utils/transformers/transform-import\"\nimport { transformJsx } from \"@/src/utils/transformers/transform-jsx\"\nimport { transformRsc } from \"@/src/utils/transformers/transform-rsc\"\nimport { Project, ScriptKind, type SourceFile } from \"ts-morph\"\nimport { z } from \"zod\"\n\nimport { transformTwPrefixes } from \"./transform-tw-prefix\"\n\nexport type TransformOpts = {\n  filename: string\n  raw: string\n  config: Config\n  baseColor?: z.infer<typeof registryBaseColorSchema>\n  transformJsx?: boolean\n  isRemote?: boolean\n}\n\nexport type Transformer<Output = SourceFile> = (\n  opts: TransformOpts & {\n    sourceFile: SourceFile\n  }\n) => Promise<Output>\n\nconst project = new Project({\n  compilerOptions: {},\n})\n\nasync function createTempSourceFile(filename: string) {\n  const dir = await fs.mkdtemp(path.join(tmpdir(), \"shadcn-\"))\n  return path.join(dir, filename)\n}\n\nexport async function transform(\n  opts: TransformOpts,\n  transformers: Transformer[] = [\n    transformImport,\n    transformRsc,\n    transformCssVars,\n    transformTwPrefixes,\n    transformIcons,\n  ]\n) {\n  const tempFile = await createTempSourceFile(opts.filename)\n  const sourceFile = project.createSourceFile(tempFile, opts.raw, {\n    scriptKind: ScriptKind.TSX,\n  })\n\n  for (const transformer of transformers) {\n    await transformer({ sourceFile, ...opts })\n  }\n\n  if (opts.transformJsx) {\n    return await transformJsx({\n      sourceFile,\n      ...opts,\n    })\n  }\n\n  return sourceFile.getText()\n}\n","import { registryBaseColorSchema } from \"@/src/registry/schema\"\nimport { Transformer } from \"@/src/utils/transformers\"\nimport { ScriptKind, SyntaxKind } from \"ts-morph\"\nimport { z } from \"zod\"\n\nexport const transformCssVars: Transformer = async ({\n  sourceFile,\n  config,\n  baseColor,\n}) => {\n  // No transform if using css variables.\n  if (config.tailwind?.cssVariables || !baseColor?.inlineColors) {\n    return sourceFile\n  }\n\n  // Find jsx attributes with the name className.\n  // const openingElements = sourceFile.getDescendantsOfKind(SyntaxKind.JsxElement)\n  // console.log(openingElements)\n  // const jsxAttributes = sourceFile\n  //   .getDescendantsOfKind(SyntaxKind.JsxAttribute)\n  //   .filter((node) => node.getName() === \"className\")\n\n  // for (const jsxAttribute of jsxAttributes) {\n  //   const value = jsxAttribute.getInitializer()?.getText()\n  //   if (value) {\n  //     const valueWithColorMapping = applyColorMapping(\n  //       value.replace(/\"/g, \"\"),\n  //       baseColor.inlineColors\n  //     )\n  //     jsxAttribute.setInitializer(`\"${valueWithColorMapping}\"`)\n  //   }\n  // }\n  sourceFile.getDescendantsOfKind(SyntaxKind.StringLiteral).forEach((node) => {\n    const value = node.getText()\n    if (value) {\n      const valueWithColorMapping = applyColorMapping(\n        value.replace(/\"/g, \"\"),\n        baseColor.inlineColors\n      )\n      node.replaceWithText(`\"${valueWithColorMapping.trim()}\"`)\n    }\n  })\n\n  return sourceFile\n}\n\n// export default function transformer(file: FileInfo, api: API) {\n//   const j = api.jscodeshift.withParser(\"tsx\")\n\n//   // Replace bg-background with \"bg-white dark:bg-slate-950\"\n//   const $j = j(file.source)\n//   return $j\n//     .find(j.JSXAttribute, {\n//       name: {\n//         name: \"className\",\n//       },\n//     })\n//     .forEach((path) => {\n//       const { node } = path\n//       if (node?.value?.type) {\n//         if (node.value.type === \"StringLiteral\") {\n//           node.value.value = applyColorMapping(node.value.value)\n//           console.log(node.value.value)\n//         }\n\n//         if (\n//           node.value.type === \"JSXExpressionContainer\" &&\n//           node.value.expression.type === \"CallExpression\"\n//         ) {\n//           const callee = node.value.expression.callee\n//           if (callee.type === \"Identifier\" && callee.name === \"cn\") {\n//             node.value.expression.arguments.forEach((arg) => {\n//               if (arg.type === \"StringLiteral\") {\n//                 arg.value = applyColorMapping(arg.value)\n//               }\n\n//               if (\n//                 arg.type === \"LogicalExpression\" &&\n//                 arg.right.type === \"StringLiteral\"\n//               ) {\n//                 arg.right.value = applyColorMapping(arg.right.value)\n//               }\n//             })\n//           }\n//         }\n//       }\n//     })\n//     .toSource()\n// }\n\n// // export function splitClassName(input: string): (string | null)[] {\n// //   const parts = input.split(\":\")\n// //   const classNames = parts.map((part) => {\n// //     const match = part.match(/^\\[?(.+)\\]$/)\n// //     if (match) {\n// //       return match[1]\n// //     } else {\n// //       return null\n// //     }\n// //   })\n\n// //   return classNames\n// // }\n\n// Splits a className into variant-name-alpha.\n// eg. hover:bg-primary-100 -> [hover, bg-primary, 100]\nexport function splitClassName(className: string): (string | null)[] {\n  if (!className.includes(\"/\") && !className.includes(\":\")) {\n    return [null, className, null]\n  }\n\n  const parts: (string | null)[] = []\n  // First we split to find the alpha.\n  let [rest, alpha] = className.split(\"/\")\n\n  // Check if rest has a colon.\n  if (!rest.includes(\":\")) {\n    return [null, rest, alpha]\n  }\n\n  // Next we split the rest by the colon.\n  const split = rest.split(\":\")\n\n  // We take the last item from the split as the name.\n  const name = split.pop()\n\n  // We glue back the rest of the split.\n  const variant = split.join(\":\")\n\n  // Finally we push the variant, name and alpha.\n  parts.push(variant ?? null, name ?? null, alpha ?? null)\n\n  return parts\n}\n\nconst PREFIXES = [\"bg-\", \"text-\", \"border-\", \"ring-offset-\", \"ring-\"]\n\nexport function applyColorMapping(\n  input: string,\n  mapping: z.infer<typeof registryBaseColorSchema>[\"inlineColors\"]\n) {\n  // Handle border classes.\n  if (input.includes(\" border \")) {\n    input = input.replace(\" border \", \" border border-border \")\n  }\n\n  // Build color mappings.\n  const classNames = input.split(\" \")\n  const lightMode = new Set<string>()\n  const darkMode = new Set<string>()\n  for (let className of classNames) {\n    const [variant, value, modifier] = splitClassName(className)\n    const prefix = PREFIXES.find((prefix) => value?.startsWith(prefix))\n    if (!prefix) {\n      if (!lightMode.has(className)) {\n        lightMode.add(className)\n      }\n      continue\n    }\n\n    const needle = value?.replace(prefix, \"\")\n    if (needle && needle in mapping.light) {\n      lightMode.add(\n        [variant, `${prefix}${mapping.light[needle]}`]\n          .filter(Boolean)\n          .join(\":\") + (modifier ? `/${modifier}` : \"\")\n      )\n\n      darkMode.add(\n        [\"dark\", variant, `${prefix}${mapping.dark[needle]}`]\n          .filter(Boolean)\n          .join(\":\") + (modifier ? `/${modifier}` : \"\")\n      )\n      continue\n    }\n\n    if (!lightMode.has(className)) {\n      lightMode.add(className)\n    }\n  }\n\n  return [...Array.from(lightMode), ...Array.from(darkMode)].join(\" \").trim()\n}\n","export const ICON_LIBRARIES = {\n  lucide: {\n    name: \"lucide-react\",\n    package: \"lucide-react\",\n    import: \"lucide-react\",\n  },\n  radix: {\n    name: \"@radix-ui/react-icons\",\n    package: \"@radix-ui/react-icons\",\n    import: \"@radix-ui/react-icons\",\n  },\n}\n","import { getRegistryIcons } from \"@/src/registry/api\"\nimport { ICON_LIBRARIES } from \"@/src/utils/icon-libraries\"\nimport { Transformer } from \"@/src/utils/transformers\"\nimport { SourceFile, SyntaxKind } from \"ts-morph\"\n\n// Lucide is the default icon library in the registry.\nconst SOURCE_LIBRARY = \"lucide\"\n\nexport const transformIcons: Transformer = async ({ sourceFile, config }) => {\n  // No transform if we cannot read the icon library.\n  if (!config.iconLibrary || !(config.iconLibrary in ICON_LIBRARIES)) {\n    return sourceFile\n  }\n\n  const registryIcons = await getRegistryIcons()\n  const sourceLibrary = SOURCE_LIBRARY\n  const targetLibrary = config.iconLibrary\n\n  if (sourceLibrary === targetLibrary) {\n    return sourceFile\n  }\n\n  let targetedIcons: string[] = []\n  for (const importDeclaration of sourceFile.getImportDeclarations() ?? []) {\n    if (\n      importDeclaration.getModuleSpecifier()?.getText() !==\n      `\"${ICON_LIBRARIES[SOURCE_LIBRARY].import}\"`\n    ) {\n      continue\n    }\n\n    for (const specifier of importDeclaration.getNamedImports() ?? []) {\n      const iconName = specifier.getName()\n\n      const targetedIcon = registryIcons[iconName]?.[targetLibrary]\n\n      if (!targetedIcon || targetedIcons.includes(targetedIcon)) {\n        continue\n      }\n\n      targetedIcons.push(targetedIcon)\n\n      // Remove the named import.\n      specifier.remove()\n\n      // Replace with the targeted icon.\n      sourceFile\n        .getDescendantsOfKind(SyntaxKind.JsxSelfClosingElement)\n        .filter((node) => node.getTagNameNode()?.getText() === iconName)\n        .forEach((node) => node.getTagNameNode()?.replaceWithText(targetedIcon))\n    }\n\n    // If the named import is empty, remove the import declaration.\n    if (importDeclaration.getNamedImports()?.length === 0) {\n      importDeclaration.remove()\n    }\n  }\n\n  if (targetedIcons.length > 0) {\n    const iconImportDeclaration = sourceFile.addImportDeclaration({\n      moduleSpecifier:\n        ICON_LIBRARIES[targetLibrary as keyof typeof ICON_LIBRARIES]?.import,\n      namedImports: targetedIcons.map((icon) => ({\n        name: icon,\n      })),\n    })\n\n    if (!_useSemicolon(sourceFile)) {\n      iconImportDeclaration.replaceWithText(\n        iconImportDeclaration.getText().replace(\";\", \"\")\n      )\n    }\n  }\n\n  return sourceFile\n}\n\nfunction _useSemicolon(sourceFile: SourceFile) {\n  return (\n    sourceFile.getImportDeclarations()?.[0]?.getText().endsWith(\";\") ?? false\n  )\n}\n","import { Config } from \"@/src/utils/get-config\"\nimport { Transformer } from \"@/src/utils/transformers\"\n\nconst COMMON_CN_IMPORTS = {\n  \"@/lib/utils\": /^@\\/lib\\/utils/,\n  \"@workspace/lib/utils\": /^@workspace\\/lib\\/utils/,\n}\n\nexport const transformImport: Transformer = async ({\n  sourceFile,\n  config,\n  isRemote,\n}) => {\n  const importDeclarations = sourceFile.getImportDeclarations()\n\n  for (const importDeclaration of importDeclarations) {\n    const moduleSpecifier = updateImportAliases(\n      importDeclaration.getModuleSpecifierValue(),\n      config,\n      isRemote\n    )\n\n    importDeclaration.setModuleSpecifier(moduleSpecifier)\n\n    // Replace `import { cn } from \"@/lib/utils\"`\n    if (COMMON_CN_IMPORTS[moduleSpecifier as keyof typeof COMMON_CN_IMPORTS]) {\n      const namedImports = importDeclaration.getNamedImports()\n      const cnImport = namedImports.find((i) => i.getName() === \"cn\")\n      if (cnImport) {\n        importDeclaration.setModuleSpecifier(\n          moduleSpecifier.replace(\n            COMMON_CN_IMPORTS[\n              moduleSpecifier as keyof typeof COMMON_CN_IMPORTS\n            ],\n            config.aliases.utils\n          )\n        )\n      }\n    }\n  }\n\n  return sourceFile\n}\n\nfunction updateImportAliases(\n  moduleSpecifier: string,\n  config: Config,\n  isRemote: boolean = false\n) {\n  // Not a local import.\n  if (!moduleSpecifier.startsWith(\"@/\") && !isRemote) {\n    return moduleSpecifier\n  }\n\n  // This treats the remote as coming from a faux registry.\n  if (isRemote && moduleSpecifier.startsWith(\"@/\")) {\n    moduleSpecifier = moduleSpecifier.replace(/^@\\//, `@/registry/new-york/`)\n  }\n\n  // Not a registry import.\n  if (!moduleSpecifier.startsWith(\"@/registry/\")) {\n    // We fix the alias and return.\n    const alias = config.aliases.components.split(\"/\")[0]\n    return moduleSpecifier.replace(/^@\\//, `${alias}/`)\n  }\n\n  if (moduleSpecifier.match(/^@\\/registry\\/(.+)\\/ui/)) {\n    return moduleSpecifier.replace(\n      /^@\\/registry\\/(.+)\\/ui/,\n      config.aliases.ui ?? `${config.aliases.components}/ui`\n    )\n  }\n\n  if (\n    config.aliases.components &&\n    moduleSpecifier.match(/^@\\/registry\\/(.+)\\/components/)\n  ) {\n    return moduleSpecifier.replace(\n      /^@\\/registry\\/(.+)\\/components/,\n      config.aliases.components\n    )\n  }\n\n  if (config.aliases.lib && moduleSpecifier.match(/^@\\/registry\\/(.+)\\/lib/)) {\n    return moduleSpecifier.replace(\n      /^@\\/registry\\/(.+)\\/lib/,\n      config.aliases.lib\n    )\n  }\n\n  if (\n    config.aliases.hooks &&\n    moduleSpecifier.match(/^@\\/registry\\/(.+)\\/hooks/)\n  ) {\n    return moduleSpecifier.replace(\n      /^@\\/registry\\/(.+)\\/hooks/,\n      config.aliases.hooks\n    )\n  }\n\n  return moduleSpecifier.replace(\n    /^@\\/registry\\/[^/]+/,\n    config.aliases.components\n  )\n}\n","import { type Transformer } from \"@/src/utils/transformers\"\nimport { transformFromAstSync } from \"@babel/core\"\nimport { ParserOptions, parse } from \"@babel/parser\"\n// @ts-ignore\nimport transformTypescript from \"@babel/plugin-transform-typescript\"\nimport * as recast from \"recast\"\n\n// TODO.\n// I'm using recast for the AST here.\n// Figure out if ts-morph AST is compatible with Babel.\n\n// This is a copy of the babel options from recast/parser.\n// The goal here is to tolerate as much syntax as possible.\n// We want to be able to parse any valid tsx code.\n// See https://github.com/benjamn/recast/blob/master/parsers/_babel_options.ts.\nconst PARSE_OPTIONS: ParserOptions = {\n  sourceType: \"module\",\n  allowImportExportEverywhere: true,\n  allowReturnOutsideFunction: true,\n  startLine: 1,\n  tokens: true,\n  plugins: [\n    \"asyncGenerators\",\n    \"bigInt\",\n    \"classPrivateMethods\",\n    \"classPrivateProperties\",\n    \"classProperties\",\n    \"classStaticBlock\",\n    \"decimal\",\n    \"decorators-legacy\",\n    \"doExpressions\",\n    \"dynamicImport\",\n    \"exportDefaultFrom\",\n    \"exportNamespaceFrom\",\n    \"functionBind\",\n    \"functionSent\",\n    \"importAssertions\",\n    \"importMeta\",\n    \"nullishCoalescingOperator\",\n    \"numericSeparator\",\n    \"objectRestSpread\",\n    \"optionalCatchBinding\",\n    \"optionalChaining\",\n    [\n      \"pipelineOperator\",\n      {\n        proposal: \"minimal\",\n      },\n    ],\n    [\n      \"recordAndTuple\",\n      {\n        syntaxType: \"hash\",\n      },\n    ],\n    \"throwExpressions\",\n    \"topLevelAwait\",\n    \"v8intrinsic\",\n    \"typescript\",\n    \"jsx\",\n  ],\n}\n\nexport const transformJsx: Transformer<string> = async ({\n  sourceFile,\n  config,\n}) => {\n  const output = sourceFile.getFullText()\n\n  if (config.tsx) {\n    return output\n  }\n\n  const ast = recast.parse(output, {\n    parser: {\n      parse: (code: string) => {\n        return parse(code, PARSE_OPTIONS)\n      },\n    },\n  })\n\n  const result = transformFromAstSync(ast, output, {\n    cloneInputAst: false,\n    code: false,\n    ast: true,\n    plugins: [transformTypescript],\n    configFile: false,\n  })\n\n  if (!result || !result.ast) {\n    throw new Error(\"Failed to transform JSX\")\n  }\n\n  return recast.print(result.ast).code\n}\n","import { Transformer } from \"@/src/utils/transformers\"\nimport { SyntaxKind } from \"ts-morph\"\n\nconst directiveRegex = /^[\"']use client[\"']$/g\n\nexport const transformRsc: Transformer = async ({ sourceFile, config }) => {\n  if (config.rsc) {\n    return sourceFile\n  }\n\n  // Remove \"use client\" from the top of the file.\n  const first = sourceFile.getFirstChildByKind(SyntaxKind.ExpressionStatement)\n  if (first && directiveRegex.test(first.getText())) {\n    first.remove()\n  }\n\n  return sourceFile\n}\n","import { Transformer } from \"@/src/utils/transformers\"\nimport { SyntaxKind } from \"ts-morph\"\n\nimport { splitClassName } from \"./transform-css-vars\"\n\nexport const transformTwPrefixes: Transformer = async ({\n  sourceFile,\n  config,\n}) => {\n  if (!config.tailwind?.prefix) {\n    return sourceFile\n  }\n\n  // Find the cva function calls.\n  sourceFile\n    .getDescendantsOfKind(SyntaxKind.CallExpression)\n    .filter((node) => node.getExpression().getText() === \"cva\")\n    .forEach((node) => {\n      // cva(base, ...)\n      if (node.getArguments()[0]?.isKind(SyntaxKind.StringLiteral)) {\n        const defaultClassNames = node.getArguments()[0]\n        if (defaultClassNames) {\n          defaultClassNames.replaceWithText(\n            `\"${applyPrefix(\n              defaultClassNames.getText()?.replace(/\"|'/g, \"\"),\n              config.tailwind.prefix\n            )}\"`\n          )\n        }\n      }\n\n      // cva(..., { variants: { ... } })\n      if (node.getArguments()[1]?.isKind(SyntaxKind.ObjectLiteralExpression)) {\n        node\n          .getArguments()[1]\n          ?.getDescendantsOfKind(SyntaxKind.PropertyAssignment)\n          .find((node) => node.getName() === \"variants\")\n          ?.getDescendantsOfKind(SyntaxKind.PropertyAssignment)\n          .forEach((node) => {\n            node\n              .getDescendantsOfKind(SyntaxKind.PropertyAssignment)\n              .forEach((node) => {\n                const classNames = node.getInitializerIfKind(\n                  SyntaxKind.StringLiteral\n                )\n                if (classNames) {\n                  classNames?.replaceWithText(\n                    `\"${applyPrefix(\n                      classNames.getText()?.replace(/\"|'/g, \"\"),\n                      config.tailwind.prefix\n                    )}\"`\n                  )\n                }\n              })\n          })\n      }\n    })\n\n  // Find all jsx attributes with the name className.\n  sourceFile.getDescendantsOfKind(SyntaxKind.JsxAttribute).forEach((node) => {\n    if (node.getName() === \"className\") {\n      // className=\"...\"\n      if (node.getInitializer()?.isKind(SyntaxKind.StringLiteral)) {\n        const value = node.getInitializer()\n        if (value) {\n          value.replaceWithText(\n            `\"${applyPrefix(\n              value.getText()?.replace(/\"|'/g, \"\"),\n              config.tailwind.prefix\n            )}\"`\n          )\n        }\n      }\n\n      // className={...}\n      if (node.getInitializer()?.isKind(SyntaxKind.JsxExpression)) {\n        // Check if it's a call to cn().\n        const callExpression = node\n          .getInitializer()\n          ?.getDescendantsOfKind(SyntaxKind.CallExpression)\n          .find((node) => node.getExpression().getText() === \"cn\")\n        if (callExpression) {\n          // Loop through the arguments.\n          callExpression.getArguments().forEach((node) => {\n            if (\n              node.isKind(SyntaxKind.ConditionalExpression) ||\n              node.isKind(SyntaxKind.BinaryExpression)\n            ) {\n              node\n                .getChildrenOfKind(SyntaxKind.StringLiteral)\n                .forEach((node) => {\n                  node.replaceWithText(\n                    `\"${applyPrefix(\n                      node.getText()?.replace(/\"|'/g, \"\"),\n                      config.tailwind.prefix\n                    )}\"`\n                  )\n                })\n            }\n\n            if (node.isKind(SyntaxKind.StringLiteral)) {\n              node.replaceWithText(\n                `\"${applyPrefix(\n                  node.getText()?.replace(/\"|'/g, \"\"),\n                  config.tailwind.prefix\n                )}\"`\n              )\n            }\n          })\n        }\n      }\n    }\n\n    // classNames={...}\n    if (node.getName() === \"classNames\") {\n      if (node.getInitializer()?.isKind(SyntaxKind.JsxExpression)) {\n        node\n          .getDescendantsOfKind(SyntaxKind.PropertyAssignment)\n          .forEach((node) => {\n            if (node.getInitializer()?.isKind(SyntaxKind.CallExpression)) {\n              const callExpression = node.getInitializerIfKind(\n                SyntaxKind.CallExpression\n              )\n              if (callExpression) {\n                // Loop through the arguments.\n                callExpression.getArguments().forEach((arg) => {\n                  if (arg.isKind(SyntaxKind.ConditionalExpression)) {\n                    arg\n                      .getChildrenOfKind(SyntaxKind.StringLiteral)\n                      .forEach((node) => {\n                        node.replaceWithText(\n                          `\"${applyPrefix(\n                            node.getText()?.replace(/\"|'/g, \"\"),\n                            config.tailwind.prefix\n                          )}\"`\n                        )\n                      })\n                  }\n\n                  if (arg.isKind(SyntaxKind.StringLiteral)) {\n                    arg.replaceWithText(\n                      `\"${applyPrefix(\n                        arg.getText()?.replace(/\"|'/g, \"\"),\n                        config.tailwind.prefix\n                      )}\"`\n                    )\n                  }\n                })\n              }\n            }\n\n            if (node.getInitializer()?.isKind(SyntaxKind.StringLiteral)) {\n              if (node.getName() !== \"variant\") {\n                const classNames = node.getInitializer()\n                if (classNames) {\n                  classNames.replaceWithText(\n                    `\"${applyPrefix(\n                      classNames.getText()?.replace(/\"|'/g, \"\"),\n                      config.tailwind.prefix\n                    )}\"`\n                  )\n                }\n              }\n            }\n          })\n      }\n    }\n  })\n\n  return sourceFile\n}\n\nexport function applyPrefix(input: string, prefix: string = \"\") {\n  const classNames = input.split(\" \")\n  const prefixed: string[] = []\n  for (let className of classNames) {\n    const [variant, value, modifier] = splitClassName(className)\n    if (variant) {\n      modifier\n        ? prefixed.push(`${variant}:${prefix}${value}/${modifier}`)\n        : prefixed.push(`${variant}:${prefix}${value}`)\n    } else {\n      modifier\n        ? prefixed.push(`${prefix}${value}/${modifier}`)\n        : prefixed.push(`${prefix}${value}`)\n    }\n  }\n  return prefixed.join(\" \")\n}\n\nexport function applyPrefixesCss(css: string, prefix: string) {\n  const lines = css.split(\"\\n\")\n  for (let line of lines) {\n    if (line.includes(\"@apply\")) {\n      const originalTWCls = line.replace(\"@apply\", \"\").trim()\n      const prefixedTwCls = applyPrefix(originalTWCls, prefix)\n      css = css.replace(originalTWCls, prefixedTwCls)\n    }\n  }\n  return css\n}\n","import os from \"os\"\nimport path from \"path\"\nimport { initOptionsSchema } from \"@/src/commands/init\"\nimport { fetchRegistry } from \"@/src/registry/api\"\nimport { getPackageManager } from \"@/src/utils/get-package-manager\"\nimport { handleError } from \"@/src/utils/handle-error\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport { execa } from \"execa\"\nimport fs from \"fs-extra\"\nimport prompts from \"prompts\"\nimport { z } from \"zod\"\n\nconst MONOREPO_TEMPLATE_URL =\n  \"https://codeload.github.com/shadcn-ui/ui/tar.gz/main\"\n\nexport async function createProject(\n  options: Pick<\n    z.infer<typeof initOptionsSchema>,\n    \"cwd\" | \"force\" | \"srcDir\" | \"components\"\n  >\n) {\n  options = {\n    srcDir: false,\n    ...options,\n  }\n\n  let projectType: \"next\" | \"monorepo\" = \"next\"\n  let projectName: string = \"my-app\"\n  let nextVersion = \"15.1.0\"\n\n  const isRemoteComponent =\n    options.components?.length === 1 &&\n    !!options.components[0].match(/\\/chat\\/b\\//)\n\n  if (options.components && isRemoteComponent) {\n    try {\n      const [result] = await fetchRegistry(options.components)\n      const { meta } = z\n        .object({\n          meta: z.object({\n            nextVersion: z.string(),\n          }),\n        })\n        .parse(result)\n      nextVersion = meta.nextVersion\n    } catch (error) {\n      logger.break()\n      handleError(error)\n    }\n  }\n\n  if (!options.force) {\n    const { type, name } = await prompts([\n      {\n        type: \"select\",\n        name: \"type\",\n        message: `The path ${highlighter.info(\n          options.cwd\n        )} does not contain a package.json file.\\n  Would you like to start a new project?`,\n        choices: [\n          { title: \"Next.js\", value: \"next\" },\n          { title: \"Next.js (Monorepo)\", value: \"monorepo\" },\n        ],\n        initial: 0,\n      },\n      {\n        type: \"text\",\n        name: \"name\",\n        message: \"What is your project named?\",\n        initial: projectName,\n        format: (value: string) => value.trim(),\n        validate: (value: string) =>\n          value.length > 128\n            ? `Name should be less than 128 characters.`\n            : true,\n      },\n    ])\n\n    projectType = type\n    projectName = name\n  }\n\n  const packageManager = await getPackageManager(options.cwd, {\n    withFallback: true,\n  })\n\n  const projectPath = `${options.cwd}/${projectName}`\n\n  // Check if path is writable.\n  try {\n    await fs.access(options.cwd, fs.constants.W_OK)\n  } catch (error) {\n    logger.break()\n    logger.error(`The path ${highlighter.info(options.cwd)} is not writable.`)\n    logger.error(\n      `It is likely you do not have write permissions for this folder or the path ${highlighter.info(\n        options.cwd\n      )} does not exist.`\n    )\n    logger.break()\n    process.exit(1)\n  }\n\n  if (fs.existsSync(path.resolve(options.cwd, projectName, \"package.json\"))) {\n    logger.break()\n    logger.error(\n      `A project with the name ${highlighter.info(projectName)} already exists.`\n    )\n    logger.error(`Please choose a different name and try again.`)\n    logger.break()\n    process.exit(1)\n  }\n\n  if (projectType === \"next\") {\n    await createNextProject(projectPath, {\n      version: nextVersion,\n      cwd: options.cwd,\n      packageManager,\n      srcDir: !!options.srcDir,\n    })\n  }\n\n  if (projectType === \"monorepo\") {\n    await createMonorepoProject(projectPath, {\n      packageManager,\n    })\n  }\n\n  return {\n    projectPath,\n    projectName,\n    projectType,\n  }\n}\n\nasync function createNextProject(\n  projectPath: string,\n  options: {\n    version: string\n    cwd: string\n    packageManager: string\n    srcDir: boolean\n  }\n) {\n  const createSpinner = spinner(\n    `Creating a new Next.js project. This may take a few minutes.`\n  ).start()\n\n  // Note: pnpm fails here. Fallback to npx with --use-PACKAGE-MANAGER.\n  const args = [\n    \"--tailwind\",\n    \"--eslint\",\n    \"--typescript\",\n    \"--app\",\n    options.srcDir ? \"--src-dir\" : \"--no-src-dir\",\n    \"--no-import-alias\",\n    `--use-${options.packageManager}`,\n  ]\n\n  if (options.version.startsWith(\"15\")) {\n    args.push(\"--turbopack\")\n  }\n\n  try {\n    await execa(\n      \"npx\",\n      [`create-next-app@${options.version}`, projectPath, \"--silent\", ...args],\n      {\n        cwd: options.cwd,\n      }\n    )\n  } catch (error) {\n    logger.break()\n    logger.error(\n      `Something went wrong creating a new Next.js project. Please try again.`\n    )\n    process.exit(1)\n  }\n\n  createSpinner?.succeed(\"Creating a new Next.js project.\")\n}\n\nasync function createMonorepoProject(\n  projectPath: string,\n  options: {\n    packageManager: string\n  }\n) {\n  const createSpinner = spinner(\n    `Creating a new Next.js monorepo. This may take a few minutes.`\n  ).start()\n\n  try {\n    // Get the template.\n    const templatePath = path.join(os.tmpdir(), `shadcn-template-${Date.now()}`)\n    await fs.ensureDir(templatePath)\n    const response = await fetch(MONOREPO_TEMPLATE_URL)\n    if (!response.ok) {\n      throw new Error(`Failed to download template: ${response.statusText}`)\n    }\n\n    // Write the tar file\n    const tarPath = path.resolve(templatePath, \"template.tar.gz\")\n    await fs.writeFile(tarPath, Buffer.from(await response.arrayBuffer()))\n    await execa(\"tar\", [\n      \"-xzf\",\n      tarPath,\n      \"-C\",\n      templatePath,\n      \"--strip-components=2\",\n      \"ui-main/templates/monorepo-next\",\n    ])\n    const extractedPath = path.resolve(templatePath, \"monorepo-next\")\n    await fs.move(extractedPath, projectPath)\n    await fs.remove(templatePath)\n\n    // Run install.\n    await execa(options.packageManager, [\"install\"], {\n      cwd: projectPath,\n    })\n\n    // Try git init.\n    const cwd = process.cwd()\n    await execa(\"git\", [\"--version\"], { cwd: projectPath })\n    await execa(\"git\", [\"init\"], { cwd: projectPath })\n    await execa(\"git\", [\"add\", \"-A\"], { cwd: projectPath })\n    await execa(\"git\", [\"commit\", \"-m\", \"Initial commit\"], {\n      cwd: projectPath,\n    })\n    await execa(\"cd\", [cwd])\n\n    createSpinner?.succeed(\"Creating a new Next.js monorepo.\")\n  } catch (error) {\n    createSpinner?.fail(\"Something went wrong creating a new Next.js monorepo.\")\n    handleError(error)\n  }\n}\n","import { promises as fs } from \"fs\"\nimport path from \"path\"\nimport { Config } from \"@/src/utils/get-config\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport {\n  _createSourceFile,\n  _getQuoteChar,\n} from \"@/src/utils/updaters/update-tailwind-config\"\nimport { ObjectLiteralExpression, SyntaxKind } from \"ts-morph\"\n\nexport async function updateTailwindContent(\n  content: string[],\n  config: Config,\n  options: {\n    silent?: boolean\n  }\n) {\n  if (!content) {\n    return\n  }\n\n  options = {\n    silent: false,\n    ...options,\n  }\n\n  const tailwindFileRelativePath = path.relative(\n    config.resolvedPaths.cwd,\n    config.resolvedPaths.tailwindConfig\n  )\n  const tailwindSpinner = spinner(\n    `Updating ${highlighter.info(tailwindFileRelativePath)}`,\n    {\n      silent: options.silent,\n    }\n  ).start()\n  const raw = await fs.readFile(config.resolvedPaths.tailwindConfig, \"utf8\")\n  const output = await transformTailwindContent(raw, content, config)\n  await fs.writeFile(config.resolvedPaths.tailwindConfig, output, \"utf8\")\n  tailwindSpinner?.succeed()\n}\n\nexport async function transformTailwindContent(\n  input: string,\n  content: string[],\n  config: Config\n) {\n  const sourceFile = await _createSourceFile(input, config)\n  // Find the object with content property.\n  // This is faster than traversing the default export.\n  // TODO: maybe we do need to traverse the default export?\n  const configObject = sourceFile\n    .getDescendantsOfKind(SyntaxKind.ObjectLiteralExpression)\n    .find((node) =>\n      node\n        .getProperties()\n        .some(\n          (property) =>\n            property.isKind(SyntaxKind.PropertyAssignment) &&\n            property.getName() === \"content\"\n        )\n    )\n\n  // We couldn't find the config object, so we return the input as is.\n  if (!configObject) {\n    return input\n  }\n\n  addTailwindConfigContent(configObject, content)\n\n  return sourceFile.getFullText()\n}\n\nasync function addTailwindConfigContent(\n  configObject: ObjectLiteralExpression,\n  content: string[]\n) {\n  const quoteChar = _getQuoteChar(configObject)\n\n  const existingProperty = configObject.getProperty(\"content\")\n\n  if (!existingProperty) {\n    const newProperty = {\n      name: \"content\",\n      initializer: `[${quoteChar}${content.join(\n        `${quoteChar}, ${quoteChar}`\n      )}${quoteChar}]`,\n    }\n    configObject.addPropertyAssignment(newProperty)\n\n    return configObject\n  }\n\n  if (existingProperty.isKind(SyntaxKind.PropertyAssignment)) {\n    const initializer = existingProperty.getInitializer()\n\n    // If property is an array, append.\n    if (initializer?.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      for (const contentItem of content) {\n        const newValue = `${quoteChar}${contentItem}${quoteChar}`\n\n        // Check if the array already contains the value.\n        if (\n          initializer\n            .getElements()\n            .map((element) => element.getText())\n            .includes(newValue)\n        ) {\n          continue\n        }\n\n        initializer.addElement(newValue)\n      }\n    }\n\n    return configObject\n  }\n\n  return configObject\n}\n","import path from \"path\"\nimport { addOptionsSchema } from \"@/src/commands/add\"\nimport * as ERRORS from \"@/src/utils/errors\"\nimport { getConfig } from \"@/src/utils/get-config\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport fs from \"fs-extra\"\nimport { z } from \"zod\"\n\nexport async function preFlightAdd(options: z.infer<typeof addOptionsSchema>) {\n  const errors: Record<string, boolean> = {}\n\n  // Ensure target directory exists.\n  // Check for empty project. We assume if no package.json exists, the project is empty.\n  if (\n    !fs.existsSync(options.cwd) ||\n    !fs.existsSync(path.resolve(options.cwd, \"package.json\"))\n  ) {\n    errors[ERRORS.MISSING_DIR_OR_EMPTY_PROJECT] = true\n    return {\n      errors,\n      config: null,\n    }\n  }\n\n  // Check for existing components.json file.\n  if (!fs.existsSync(path.resolve(options.cwd, \"components.json\"))) {\n    errors[ERRORS.MISSING_CONFIG] = true\n    return {\n      errors,\n      config: null,\n    }\n  }\n\n  try {\n    const config = await getConfig(options.cwd)\n\n    return {\n      errors,\n      config: config!,\n    }\n  } catch (error) {\n    logger.break()\n    logger.error(\n      `An invalid ${highlighter.info(\n        \"components.json\"\n      )} file was found at ${highlighter.info(\n        options.cwd\n      )}.\\nBefore you can add components, you must create a valid ${highlighter.info(\n        \"components.json\"\n      )} file by running the ${highlighter.info(\"init\")} command.`\n    )\n    logger.error(\n      `Learn more at ${highlighter.info(\n        \"https://ui.shadcn.com/docs/components-json\"\n      )}.`\n    )\n    logger.break()\n    process.exit(1)\n  }\n}\n","import fs from \"fs/promises\"\nimport path from \"path\"\nimport { getRegistryItem } from \"@/src/registry/api\"\nimport { Config } from \"@/src/utils/get-config\"\n\nexport async function updateAppIndex(component: string, config: Config) {\n  const indexPath = path.join(config.resolvedPaths.cwd, \"app/page.tsx\")\n\n  if (!(await fs.stat(indexPath)).isFile()) {\n    return\n  }\n\n  const registryItem = await getRegistryItem(component, config.style)\n  if (\n    !registryItem?.meta?.importSpecifier ||\n    !registryItem?.meta?.moduleSpecifier\n  ) {\n    return\n  }\n\n  // Overwrite the index file with the new import.\n  const content = `import { ${registryItem?.meta?.importSpecifier} } from \"${registryItem.meta.moduleSpecifier}\"\\n\\nexport default function Page() {\\n  return <${registryItem?.meta?.importSpecifier} />\\n}`\n  await fs.writeFile(indexPath, content, \"utf8\")\n}\n","import * as fs from \"fs/promises\"\nimport * as path from \"path\"\nimport { preFlightBuild } from \"@/src/preflights/preflight-build\"\nimport { registryItemSchema, registrySchema } from \"@/src/registry\"\nimport { handleError } from \"@/src/utils/handle-error\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport { Command } from \"commander\"\nimport { z } from \"zod\"\n\nexport const buildOptionsSchema = z.object({\n  cwd: z.string(),\n  registryFile: z.string(),\n  outputDir: z.string(),\n})\n\nexport const build = new Command()\n  .name(\"build\")\n  .description(\"build components for a shadcn registry\")\n  .argument(\"[registry]\", \"path to registry.json file\", \"./registry.json\")\n  .option(\n    \"-o, --output <path>\",\n    \"destination directory for json files\",\n    \"./public/r\"\n  )\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd()\n  )\n  .action(async (registry: string, opts) => {\n    try {\n      const options = buildOptionsSchema.parse({\n        cwd: path.resolve(opts.cwd),\n        registryFile: registry,\n        outputDir: opts.output,\n      })\n\n      const { resolvePaths } = await preFlightBuild(options)\n      const content = await fs.readFile(resolvePaths.registryFile, \"utf-8\")\n\n      const result = registrySchema.safeParse(JSON.parse(content))\n\n      if (!result.success) {\n        logger.error(\n          `Invalid registry file found at ${highlighter.info(\n            resolvePaths.registryFile\n          )}.`\n        )\n        process.exit(1)\n      }\n\n      const buildSpinner = spinner(\"Building registry...\")\n      for (const registryItem of result.data.items) {\n        if (!registryItem.files) {\n          continue\n        }\n\n        buildSpinner.start(`Building ${registryItem.name}...`)\n\n        // Add the schema to the registry item.\n        registryItem[\"$schema\"] =\n          \"https://ui.shadcn.com/schema/registry-item.json\"\n\n        // Loop through each file in the files array.\n        for (const file of registryItem.files) {\n          file[\"content\"] = await fs.readFile(\n            path.resolve(resolvePaths.cwd, file.path),\n            \"utf-8\"\n          )\n        }\n\n        // Validate the registry item.\n        const result = registryItemSchema.safeParse(registryItem)\n        if (!result.success) {\n          logger.error(\n            `Invalid registry item found for ${highlighter.info(\n              registryItem.name\n            )}.`\n          )\n          continue\n        }\n\n        // Write the registry item to the output directory.\n        await fs.writeFile(\n          path.resolve(resolvePaths.outputDir, `${result.data.name}.json`),\n          JSON.stringify(result.data, null, 2)\n        )\n      }\n\n      buildSpinner.succeed(\"Building registry.\")\n    } catch (error) {\n      logger.break()\n      handleError(error)\n    }\n  })\n","import path from \"path\"\nimport { buildOptionsSchema } from \"@/src/commands/build\"\nimport * as ERRORS from \"@/src/utils/errors\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport fs from \"fs-extra\"\nimport { z } from \"zod\"\n\nexport async function preFlightBuild(\n  options: z.infer<typeof buildOptionsSchema>\n) {\n  const errors: Record<string, boolean> = {}\n\n  const resolvePaths = {\n    cwd: options.cwd,\n    registryFile: path.resolve(options.cwd, options.registryFile),\n    outputDir: path.resolve(options.cwd, options.outputDir),\n  }\n\n  // Ensure registry file exists.\n  if (!fs.existsSync(resolvePaths.registryFile)) {\n    errors[ERRORS.BUILD_MISSING_REGISTRY_FILE] = true\n  }\n\n  // Create output directory if it doesn't exist.\n  await fs.mkdir(resolvePaths.outputDir, { recursive: true })\n\n  if (Object.keys(errors).length > 0) {\n    if (errors[ERRORS.BUILD_MISSING_REGISTRY_FILE]) {\n      logger.break()\n      logger.error(\n        `The path ${highlighter.info(\n          resolvePaths.registryFile\n        )} does not exist.`\n      )\n    }\n\n    logger.break()\n    process.exit(1)\n  }\n\n  return {\n    errors,\n    resolvePaths,\n  }\n}\n","import { existsSync, promises as fs } from \"fs\"\nimport path from \"path\"\nimport {\n  fetchTree,\n  getItemTargetPath,\n  getRegistryBaseColor,\n  getRegistryIndex,\n} from \"@/src/registry/api\"\nimport { registryIndexSchema } from \"@/src/registry/schema\"\nimport { Config, getConfig } from \"@/src/utils/get-config\"\nimport { handleError } from \"@/src/utils/handle-error\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport { transform } from \"@/src/utils/transformers\"\nimport { Command } from \"commander\"\nimport { diffLines, type Change } from \"diff\"\nimport { z } from \"zod\"\n\nconst updateOptionsSchema = z.object({\n  component: z.string().optional(),\n  yes: z.boolean(),\n  cwd: z.string(),\n  path: z.string().optional(),\n})\n\nexport const diff = new Command()\n  .name(\"diff\")\n  .description(\"check for updates against the registry\")\n  .argument(\"[component]\", \"the component name\")\n  .option(\"-y, --yes\", \"skip confirmation prompt.\", false)\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd()\n  )\n  .action(async (name, opts) => {\n    try {\n      const options = updateOptionsSchema.parse({\n        component: name,\n        ...opts,\n      })\n\n      const cwd = path.resolve(options.cwd)\n\n      if (!existsSync(cwd)) {\n        logger.error(`The path ${cwd} does not exist. Please try again.`)\n        process.exit(1)\n      }\n\n      const config = await getConfig(cwd)\n      if (!config) {\n        logger.warn(\n          `Configuration is missing. Please run ${highlighter.success(\n            `init`\n          )} to create a components.json file.`\n        )\n        process.exit(1)\n      }\n\n      const registryIndex = await getRegistryIndex()\n\n      if (!registryIndex) {\n        handleError(new Error(\"Failed to fetch registry index.\"))\n        process.exit(1)\n      }\n\n      if (!options.component) {\n        const targetDir = config.resolvedPaths.components\n\n        // Find all components that exist in the project.\n        const projectComponents = registryIndex.filter((item) => {\n          for (const file of item.files ?? []) {\n            const filePath = path.resolve(\n              targetDir,\n              typeof file === \"string\" ? file : file.path\n            )\n            if (existsSync(filePath)) {\n              return true\n            }\n          }\n\n          return false\n        })\n\n        // Check for updates.\n        const componentsWithUpdates = []\n        for (const component of projectComponents) {\n          const changes = await diffComponent(component, config)\n          if (changes.length) {\n            componentsWithUpdates.push({\n              name: component.name,\n              changes,\n            })\n          }\n        }\n\n        if (!componentsWithUpdates.length) {\n          logger.info(\"No updates found.\")\n          process.exit(0)\n        }\n\n        logger.info(\"The following components have updates available:\")\n        for (const component of componentsWithUpdates) {\n          logger.info(`- ${component.name}`)\n          for (const change of component.changes) {\n            logger.info(`  - ${change.filePath}`)\n          }\n        }\n        logger.break()\n        logger.info(\n          `Run ${highlighter.success(`diff <component>`)} to see the changes.`\n        )\n        process.exit(0)\n      }\n\n      // Show diff for a single component.\n      const component = registryIndex.find(\n        (item) => item.name === options.component\n      )\n\n      if (!component) {\n        logger.error(\n          `The component ${highlighter.success(\n            options.component\n          )} does not exist.`\n        )\n        process.exit(1)\n      }\n\n      const changes = await diffComponent(component, config)\n\n      if (!changes.length) {\n        logger.info(`No updates found for ${options.component}.`)\n        process.exit(0)\n      }\n\n      for (const change of changes) {\n        logger.info(`- ${change.filePath}`)\n        await printDiff(change.patch)\n        logger.info(\"\")\n      }\n    } catch (error) {\n      handleError(error)\n    }\n  })\n\nasync function diffComponent(\n  component: z.infer<typeof registryIndexSchema>[number],\n  config: Config\n) {\n  const payload = await fetchTree(config.style, [component])\n  const baseColor = await getRegistryBaseColor(config.tailwind.baseColor)\n\n  if (!payload) {\n    return []\n  }\n\n  const changes = []\n\n  for (const item of payload) {\n    const targetDir = await getItemTargetPath(config, item)\n\n    if (!targetDir) {\n      continue\n    }\n\n    for (const file of item.files ?? []) {\n      const filePath = path.resolve(\n        targetDir,\n        typeof file === \"string\" ? file : file.path\n      )\n\n      if (!existsSync(filePath)) {\n        continue\n      }\n\n      const fileContent = await fs.readFile(filePath, \"utf8\")\n\n      if (typeof file === \"string\" || !file.content) {\n        continue\n      }\n\n      const registryContent = await transform({\n        filename: file.path,\n        raw: file.content,\n        config,\n        baseColor,\n      })\n\n      const patch = diffLines(registryContent as string, fileContent)\n      if (patch.length > 1) {\n        changes.push({\n          filePath,\n          patch,\n        })\n      }\n    }\n  }\n\n  return changes\n}\n\nasync function printDiff(diff: Change[]) {\n  diff.forEach((part) => {\n    if (part) {\n      if (part.added) {\n        return process.stdout.write(highlighter.success(part.value))\n      }\n      if (part.removed) {\n        return process.stdout.write(highlighter.error(part.value))\n      }\n\n      return process.stdout.write(part.value)\n    }\n  })\n}\n","import { getConfig } from \"@/src/utils/get-config\"\nimport { getProjectInfo } from \"@/src/utils/get-project-info\"\nimport { logger } from \"@/src/utils/logger\"\nimport { Command } from \"commander\"\n\nexport const info = new Command()\n  .name(\"info\")\n  .description(\"get information about your project\")\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd()\n  )\n  .action(async (opts) => {\n    logger.info(\"> project info\")\n    console.log(await getProjectInfo(opts.cwd))\n    logger.break()\n    logger.info(\"> components.json\")\n    console.log(await getConfig(opts.cwd))\n  })\n","import path from \"path\"\nimport { migrateIcons } from \"@/src/migrations/migrate-icons\"\nimport { preFlightMigrate } from \"@/src/preflights/preflight-migrate\"\nimport * as ERRORS from \"@/src/utils/errors\"\nimport { handleError } from \"@/src/utils/handle-error\"\nimport { logger } from \"@/src/utils/logger\"\nimport { Command } from \"commander\"\nimport { z } from \"zod\"\n\nexport const migrations = [\n  {\n    name: \"icons\",\n    description: \"migrate your ui components to a different icon library.\",\n  },\n] as const\n\nexport const migrateOptionsSchema = z.object({\n  cwd: z.string(),\n  list: z.boolean(),\n  migration: z\n    .string()\n    .refine(\n      (value) =>\n        value && migrations.some((migration) => migration.name === value),\n      {\n        message:\n          \"You must specify a valid migration. Run `shadcn migrate --list` to see available migrations.\",\n      }\n    )\n    .optional(),\n})\n\nexport const migrate = new Command()\n  .name(\"migrate\")\n  .description(\"run a migration.\")\n  .argument(\"[migration]\", \"the migration to run.\")\n  .option(\n    \"-c, --cwd <cwd>\",\n    \"the working directory. defaults to the current directory.\",\n    process.cwd()\n  )\n  .option(\"-l, --list\", \"list all migrations.\", false)\n  .action(async (migration, opts) => {\n    try {\n      const options = migrateOptionsSchema.parse({\n        cwd: path.resolve(opts.cwd),\n        migration,\n        list: opts.list,\n      })\n\n      if (options.list || !options.migration) {\n        logger.info(\"Available migrations:\")\n        for (const migration of migrations) {\n          logger.info(`- ${migration.name}: ${migration.description}`)\n        }\n        return\n      }\n\n      if (!options.migration) {\n        throw new Error(\n          \"You must specify a migration. Run `shadcn migrate --list` to see available migrations.\"\n        )\n      }\n\n      let { errors, config } = await preFlightMigrate(options)\n\n      if (\n        errors[ERRORS.MISSING_DIR_OR_EMPTY_PROJECT] ||\n        errors[ERRORS.MISSING_CONFIG]\n      ) {\n        throw new Error(\n          \"No `components.json` file found. Ensure you are at the root of your project.\"\n        )\n      }\n\n      if (!config) {\n        throw new Error(\n          \"Something went wrong reading your `components.json` file. Please ensure you have a valid `components.json` file.\"\n        )\n      }\n\n      if (options.migration === \"icons\") {\n        await migrateIcons(config)\n      }\n    } catch (error) {\n      logger.break()\n      handleError(error)\n    }\n  })\n","import { randomBytes } from \"crypto\"\nimport { promises as fs } from \"fs\"\nimport { tmpdir } from \"os\"\nimport path from \"path\"\nimport { getRegistryIcons } from \"@/src/registry/api\"\nimport { iconsSchema } from \"@/src/registry/schema\"\nimport { Config } from \"@/src/utils/get-config\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { ICON_LIBRARIES } from \"@/src/utils/icon-libraries\"\nimport { logger } from \"@/src/utils/logger\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport { updateDependencies } from \"@/src/utils/updaters/update-dependencies\"\nimport fg from \"fast-glob\"\nimport prompts from \"prompts\"\nimport { Project, ScriptKind, SyntaxKind } from \"ts-morph\"\nimport { z } from \"zod\"\n\nexport async function migrateIcons(config: Config) {\n  if (!config.resolvedPaths.ui) {\n    throw new Error(\n      \"We could not find a valid `ui` path in your `components.json` file. Please ensure you have a valid `ui` path in your `components.json` file.\"\n    )\n  }\n\n  const uiPath = config.resolvedPaths.ui\n  const [files, registryIcons] = await Promise.all([\n    fg(\"**/*.{js,ts,jsx,tsx}\", {\n      cwd: uiPath,\n    }),\n    getRegistryIcons(),\n  ])\n\n  if (Object.keys(registryIcons).length === 0) {\n    throw new Error(\"Something went wrong fetching the registry icons.\")\n  }\n\n  const libraryChoices = Object.entries(ICON_LIBRARIES).map(\n    ([name, iconLibrary]) => ({\n      title: iconLibrary.name,\n      value: name,\n    })\n  )\n\n  const migrateOptions = await prompts([\n    {\n      type: \"select\",\n      name: \"sourceLibrary\",\n      message: `Which icon library would you like to ${highlighter.info(\n        \"migrate from\"\n      )}?`,\n      choices: libraryChoices,\n    },\n    {\n      type: \"select\",\n      name: \"targetLibrary\",\n      message: `Which icon library would you like to ${highlighter.info(\n        \"migrate to\"\n      )}?`,\n      choices: libraryChoices,\n    },\n  ])\n\n  if (migrateOptions.sourceLibrary === migrateOptions.targetLibrary) {\n    throw new Error(\n      \"You cannot migrate to the same icon library. Please choose a different icon library.\"\n    )\n  }\n\n  if (\n    !(\n      migrateOptions.sourceLibrary in ICON_LIBRARIES &&\n      migrateOptions.targetLibrary in ICON_LIBRARIES\n    )\n  ) {\n    throw new Error(\"Invalid icon library. Please choose a valid icon library.\")\n  }\n\n  const sourceLibrary =\n    ICON_LIBRARIES[migrateOptions.sourceLibrary as keyof typeof ICON_LIBRARIES]\n  const targetLibrary =\n    ICON_LIBRARIES[migrateOptions.targetLibrary as keyof typeof ICON_LIBRARIES]\n  const { confirm } = await prompts({\n    type: \"confirm\",\n    name: \"confirm\",\n    initial: true,\n    message: `We will migrate ${highlighter.info(\n      files.length\n    )} files in ${highlighter.info(\n      `./${path.relative(config.resolvedPaths.cwd, uiPath)}`\n    )} from ${highlighter.info(sourceLibrary.name)} to ${highlighter.info(\n      targetLibrary.name\n    )}. Continue?`,\n  })\n\n  if (!confirm) {\n    logger.info(\"Migration cancelled.\")\n    process.exit(0)\n  }\n\n  if (targetLibrary.package) {\n    await updateDependencies([targetLibrary.package], config, {\n      silent: false,\n    })\n  }\n\n  const migrationSpinner = spinner(`Migrating icons...`)?.start()\n\n  await Promise.all(\n    files.map(async (file) => {\n      migrationSpinner.text = `Migrating ${file}...`\n\n      const filePath = path.join(uiPath, file)\n      const fileContent = await fs.readFile(filePath, \"utf-8\")\n\n      const content = await migrateIconsFile(\n        fileContent,\n        migrateOptions.sourceLibrary,\n        migrateOptions.targetLibrary,\n        registryIcons\n      )\n\n      await fs.writeFile(filePath, content)\n    })\n  )\n\n  migrationSpinner.succeed(\"Migration complete.\")\n}\n\nexport async function migrateIconsFile(\n  content: string,\n  sourceLibrary: keyof typeof ICON_LIBRARIES,\n  targetLibrary: keyof typeof ICON_LIBRARIES,\n  iconsMapping: z.infer<typeof iconsSchema>\n) {\n  const sourceLibraryImport = ICON_LIBRARIES[sourceLibrary]?.import\n  const targetLibraryImport = ICON_LIBRARIES[targetLibrary]?.import\n\n  const dir = await fs.mkdtemp(path.join(tmpdir(), \"shadcn-\"))\n  const project = new Project({\n    compilerOptions: {},\n  })\n\n  const tempFile = path.join(\n    dir,\n    `shadcn-icons-${randomBytes(4).toString(\"hex\")}.tsx`\n  )\n  const sourceFile = project.createSourceFile(tempFile, content, {\n    scriptKind: ScriptKind.TSX,\n  })\n\n  // Find all sourceLibrary imports.\n  let targetedIcons: string[] = []\n  for (const importDeclaration of sourceFile.getImportDeclarations() ?? []) {\n    if (\n      importDeclaration.getModuleSpecifier()?.getText() !==\n      `\"${sourceLibraryImport}\"`\n    ) {\n      continue\n    }\n\n    for (const specifier of importDeclaration.getNamedImports() ?? []) {\n      const iconName = specifier.getName()\n\n      // TODO: this is O(n^2) but okay for now.\n      const targetedIcon = Object.values(iconsMapping).find(\n        (icon) => icon[sourceLibrary] === iconName\n      )?.[targetLibrary]\n\n      if (!targetedIcon || targetedIcons.includes(targetedIcon)) {\n        continue\n      }\n\n      targetedIcons.push(targetedIcon)\n\n      // Remove the named import.\n      specifier.remove()\n\n      // Replace with the targeted icon.\n      sourceFile\n        .getDescendantsOfKind(SyntaxKind.JsxSelfClosingElement)\n        .filter((node) => node.getTagNameNode()?.getText() === iconName)\n        .forEach((node) => node.getTagNameNode()?.replaceWithText(targetedIcon))\n    }\n\n    // If the named import is empty, remove the import declaration.\n    if (importDeclaration.getNamedImports()?.length === 0) {\n      importDeclaration.remove()\n    }\n  }\n\n  if (targetedIcons.length > 0) {\n    sourceFile.addImportDeclaration({\n      moduleSpecifier: targetLibraryImport,\n      namedImports: targetedIcons.map((icon) => ({\n        name: icon,\n      })),\n    })\n  }\n\n  return await sourceFile.getText()\n}\n","import path from \"path\"\nimport { addOptionsSchema } from \"@/src/commands/add\"\nimport { migrateOptionsSchema } from \"@/src/commands/migrate\"\nimport * as ERRORS from \"@/src/utils/errors\"\nimport { getConfig } from \"@/src/utils/get-config\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport fs from \"fs-extra\"\nimport { z } from \"zod\"\n\nexport async function preFlightMigrate(\n  options: z.infer<typeof migrateOptionsSchema>\n) {\n  const errors: Record<string, boolean> = {}\n\n  // Ensure target directory exists.\n  // Check for empty project. We assume if no package.json exists, the project is empty.\n  if (\n    !fs.existsSync(options.cwd) ||\n    !fs.existsSync(path.resolve(options.cwd, \"package.json\"))\n  ) {\n    errors[ERRORS.MISSING_DIR_OR_EMPTY_PROJECT] = true\n    return {\n      errors,\n      config: null,\n    }\n  }\n\n  // Check for existing components.json file.\n  if (!fs.existsSync(path.resolve(options.cwd, \"components.json\"))) {\n    errors[ERRORS.MISSING_CONFIG] = true\n    return {\n      errors,\n      config: null,\n    }\n  }\n\n  try {\n    const config = await getConfig(options.cwd)\n\n    return {\n      errors,\n      config: config!,\n    }\n  } catch (error) {\n    logger.break()\n    logger.error(\n      `An invalid ${highlighter.info(\n        \"components.json\"\n      )} file was found at ${highlighter.info(\n        options.cwd\n      )}.\\nBefore you can run a migration, you must create a valid ${highlighter.info(\n        \"components.json\"\n      )} file by running the ${highlighter.info(\"init\")} command.`\n    )\n    logger.error(\n      `Learn more at ${highlighter.info(\n        \"https://ui.shadcn.com/docs/components-json\"\n      )}.`\n    )\n    logger.break()\n    process.exit(1)\n  }\n}\n","#!/usr/bin/env node\nimport { add } from \"@/src/commands/add\"\nimport { build } from \"@/src/commands/build\"\nimport { diff } from \"@/src/commands/diff\"\nimport { info } from \"@/src/commands/info\"\nimport { init } from \"@/src/commands/init\"\nimport { migrate } from \"@/src/commands/migrate\"\nimport { Command } from \"commander\"\n\nimport packageJson from \"../package.json\"\n\nprocess.on(\"SIGINT\", () => process.exit(0))\nprocess.on(\"SIGTERM\", () => process.exit(0))\n\nasync function main() {\n  const program = new Command()\n    .name(\"shadcn\")\n    .description(\"add components and dependencies to your project\")\n    .version(\n      packageJson.version || \"1.0.0\",\n      \"-v, --version\",\n      \"display the version number\"\n    )\n\n  program\n    .addCommand(init)\n    .addCommand(add)\n    .addCommand(diff)\n    .addCommand(migrate)\n    .addCommand(info)\n    .addCommand(build)\n\n  program.parse()\n}\n\nmain()\n\nexport * from \"./registry/api\"\n","{\n  \"name\": \"shadcn\",\n  \"version\": \"2.3.0\",\n  \"description\": \"Add components to your apps.\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"license\": \"MIT\",\n  \"author\": {\n    \"name\": \"shadcn\",\n    \"url\": \"https://twitter.com/shadcn\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/shadcn/ui.git\",\n    \"directory\": \"packages/shadcn\"\n  },\n  \"files\": [\n    \"dist\"\n  ],\n  \"keywords\": [\n    \"components\",\n    \"ui\",\n    \"tailwind\",\n    \"radix-ui\",\n    \"shadcn\"\n  ],\n  \"type\": \"module\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./dist/index.d.ts\",\n      \"default\": \"./dist/index.js\"\n    },\n    \"./registry\": {\n      \"types\": \"./dist/registry/index.d.ts\",\n      \"default\": \"./dist/registry/index.js\"\n    }\n  },\n  \"bin\": \"./dist/index.js\",\n  \"scripts\": {\n    \"dev\": \"tsup --watch\",\n    \"build\": \"tsup\",\n    \"typecheck\": \"tsc --noEmit\",\n    \"clean\": \"rimraf dist && rimraf components\",\n    \"start:dev\": \"cross-env REGISTRY_URL=http://localhost:3333/r node dist/index.js\",\n    \"start:prod\": \"cross-env REGISTRY_URL=https://ui.shadcn.com/r node dist/index.js\",\n    \"start\": \"node dist/index.js\",\n    \"format:write\": \"prettier --write \\\"**/*.{ts,tsx,mdx}\\\" --cache\",\n    \"format:check\": \"prettier --check \\\"**/*.{ts,tsx,mdx}\\\" --cache\",\n    \"release\": \"changeset version\",\n    \"pub:beta\": \"pnpm build && pnpm publish --no-git-checks --access public --tag beta\",\n    \"pub:next\": \"pnpm build && pnpm publish --no-git-checks --access public --tag next\",\n    \"prepublishOnly\": \"pnpm build\",\n    \"pub:release\": \"pnpm build && pnpm publish --access public\",\n    \"test\": \"vitest run\",\n    \"test:dev\": \"REGISTRY_URL=http://localhost:3333/r vitest run\"\n  },\n  \"dependencies\": {\n    \"@antfu/ni\": \"^0.21.4\",\n    \"@babel/core\": \"^7.22.1\",\n    \"@babel/parser\": \"^7.22.6\",\n    \"@babel/plugin-transform-typescript\": \"^7.22.5\",\n    \"commander\": \"^10.0.0\",\n    \"cosmiconfig\": \"^8.1.3\",\n    \"deepmerge\": \"^4.3.1\",\n    \"diff\": \"^5.1.0\",\n    \"execa\": \"^7.0.0\",\n    \"fast-glob\": \"^3.3.2\",\n    \"fs-extra\": \"^11.1.0\",\n    \"https-proxy-agent\": \"^6.2.0\",\n    \"kleur\": \"^4.1.5\",\n    \"node-fetch\": \"^3.3.0\",\n    \"ora\": \"^6.1.2\",\n    \"postcss\": \"^8.4.24\",\n    \"prompts\": \"^2.4.2\",\n    \"recast\": \"^0.23.2\",\n    \"stringify-object\": \"^5.0.0\",\n    \"ts-morph\": \"^18.0.0\",\n    \"tsconfig-paths\": \"^4.2.0\",\n    \"zod\": \"^3.20.2\"\n  },\n  \"devDependencies\": {\n    \"@types/babel__core\": \"^7.20.1\",\n    \"@types/diff\": \"^5.0.3\",\n    \"@types/fs-extra\": \"^11.0.1\",\n    \"@types/prompts\": \"^2.4.2\",\n    \"@types/stringify-object\": \"^4.0.5\",\n    \"gitpkg\": \"github:airhorns/gitpkg#gitpkg-v1.0.0-beta.4-gitpkg-82083c3\",\n    \"rimraf\": \"^6.0.1\",\n    \"tsup\": \"^6.6.3\",\n    \"type-fest\": \"^3.8.0\",\n    \"typescript\": \"^4.9.3\"\n  }\n}\n"]}