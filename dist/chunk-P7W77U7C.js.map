{"version":3,"sources":["../src/registry/schema.ts","../src/registry/api.ts","../src/utils/highlighter.ts","../src/utils/logger.ts","../src/utils/handle-error.ts","../src/utils/updaters/update-tailwind-config.ts","../src/utils/spinner.ts"],"names":["z","registryItemTypeSchema","registryItemFileSchema","registryItemTailwindSchema","registryItemCssVarsSchema","registryItemSchema","registrySchema","registryIndexSchema","stylesSchema","iconsSchema","registryBaseColorSchema","registryResolvedItemsTreeSchema","path","cyan","green","red","yellow","highlighter","logger","args","handleError","error","key","value","fs","tmpdir","ora","spinner","text","options","deepmerge","objectToString","Project","QuoteKind","ScriptKind","SyntaxKind","updateTailwindConfig","tailwindConfig","config","tailwindFileRelativePath","tailwindSpinner","raw","output","transformTailwindConfig","input","sourceFile","_createSourceFile","configObject","node","property","quoteChar","_getQuoteChar","addTailwindConfigProperty","plugin","addTailwindConfigPlugin","addTailwindConfigTheme","existingProperty","newProperty","initializer","newValue","initializerText","element","theme","nestSpreadProperties","themeInitializer","themeObjectString","themeObject","parseObjectLiteral","result","dst","src","resultString","unnestSpreadProperties","existingPlugins","dir","resolvedPath","tempFile","obj","properties","i","prop","spreadAssignment","spreadText","nestSpreadElements","arr","elements","j","propAssignment","unnsetSpreadElements","spreadTest","objectLiteralString","statement","parseObjectLiteralExpression","name","parseArrayLiteralExpression","parseValue","buildTailwindThemeColorsFromCssVars","cssVars","parts","colorName","subType","HttpsProxyAgent","fetch","REGISTRY_URL","agent","getRegistryIndex","fetchRegistry","getRegistryStyles","getRegistryIcons","getRegistryItem","style","isUrl","getRegistryBaseColors","getRegistryBaseColor","baseColor","resolveTree","index","names","tree","entry","dependencies","component","self","c","fetchTree","paths","item","getItemTargetPath","override","parent","type","url","getRegistryUrl","response","errorMessages","message","registryResolveItemsTree","registryItems","resolveRegistryItems","payload","registryGetTheme","tailwind","docs","resolveRegistryDependencies","visited","resolveDependencies","itemUrl","dependency","registryDependencies","itemRegistryDependencies","getRegistryTypeAliasMap","getRegistryParentMap","map"],"mappings":"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","sourcesContent":["import { z } from \"zod\"\n\n// Note: if you edit the schema here, you must also edit the schema in the\n// apps/www/public/schema/registry-item.json file.\n\nexport const registryItemTypeSchema = z.enum([\n  \"registry:lib\",\n  \"registry:block\",\n  \"registry:component\",\n  \"registry:ui\",\n  \"registry:hook\",\n  \"registry:page\",\n  \"registry:file\",\n\n  // Internal use only\n  \"registry:theme\",\n  \"registry:example\",\n  \"registry:style\",\n  \"registry:internal\",\n])\n\nexport const registryItemFileSchema = z.discriminatedUnion(\"type\", [\n  // Target is required for registry:file and registry:page\n  z.object({\n    path: z.string(),\n    content: z.string().optional(),\n    type: z.enum([\"registry:file\", \"registry:page\"]),\n    target: z.string(),\n  }),\n  z.object({\n    path: z.string(),\n    content: z.string().optional(),\n    type: registryItemTypeSchema.exclude([\"registry:file\", \"registry:page\"]),\n    target: z.string().optional(),\n  }),\n])\n\nexport const registryItemTailwindSchema = z.object({\n  config: z\n    .object({\n      content: z.array(z.string()).optional(),\n      theme: z.record(z.string(), z.any()).optional(),\n      plugins: z.array(z.string()).optional(),\n    })\n    .optional(),\n})\n\nexport const registryItemCssVarsSchema = z.object({\n  light: z.record(z.string(), z.string()).optional(),\n  dark: z.record(z.string(), z.string()).optional(),\n})\n\nexport const registryItemSchema = z.object({\n  $schema: z.string().optional(),\n  name: z.string(),\n  type: registryItemTypeSchema,\n  title: z.string().optional(),\n  author: z.string().min(2).optional(),\n  description: z.string().optional(),\n  dependencies: z.array(z.string()).optional(),\n  devDependencies: z.array(z.string()).optional(),\n  registryDependencies: z.array(z.string()).optional(),\n  files: z.array(registryItemFileSchema).optional(),\n  tailwind: registryItemTailwindSchema.optional(),\n  cssVars: registryItemCssVarsSchema.optional(),\n  meta: z.record(z.string(), z.any()).optional(),\n  docs: z.string().optional(),\n  categories: z.array(z.string()).optional(),\n})\n\nexport type RegistryItem = z.infer<typeof registryItemSchema>\n\nexport const registrySchema = z.object({\n  name: z.string(),\n  homepage: z.string(),\n  items: z.array(registryItemSchema),\n})\n\nexport type Registry = z.infer<typeof registrySchema>\n\nexport const registryIndexSchema = z.array(registryItemSchema)\n\nexport const stylesSchema = z.array(\n  z.object({\n    name: z.string(),\n    label: z.string(),\n  })\n)\n\nexport const iconsSchema = z.record(\n  z.string(),\n  z.record(z.string(), z.string())\n)\n\nexport const registryBaseColorSchema = z.object({\n  inlineColors: z.object({\n    light: z.record(z.string(), z.string()),\n    dark: z.record(z.string(), z.string()),\n  }),\n  cssVars: z.object({\n    light: z.record(z.string(), z.string()),\n    dark: z.record(z.string(), z.string()),\n  }),\n  inlineColorsTemplate: z.string(),\n  cssVarsTemplate: z.string(),\n})\n\nexport const registryResolvedItemsTreeSchema = registryItemSchema.pick({\n  dependencies: true,\n  devDependencies: true,\n  files: true,\n  tailwind: true,\n  cssVars: true,\n  docs: true,\n})\n","import path from \"path\"\nimport { Config } from \"@/src/utils/get-config\"\nimport { handleError } from \"@/src/utils/handle-error\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport { buildTailwindThemeColorsFromCssVars } from \"@/src/utils/updaters/update-tailwind-config\"\nimport deepmerge from \"deepmerge\"\nimport { HttpsProxyAgent } from \"https-proxy-agent\"\nimport fetch from \"node-fetch\"\nimport { z } from \"zod\"\n\nimport {\n  iconsSchema,\n  registryBaseColorSchema,\n  registryIndexSchema,\n  registryItemFileSchema,\n  registryItemSchema,\n  registryResolvedItemsTreeSchema,\n  stylesSchema,\n} from \"./schema\"\n\nconst REGISTRY_URL = process.env.REGISTRY_URL ?? \"https://ui.shadcn.com/r\"\n\nconst agent = process.env.https_proxy\n  ? new HttpsProxyAgent(process.env.https_proxy)\n  : undefined\n\nexport async function getRegistryIndex() {\n  try {\n    const [result] = await fetchRegistry([\"index.json\"])\n\n    return registryIndexSchema.parse(result)\n  } catch (error) {\n    logger.error(\"\\n\")\n    handleError(error)\n  }\n}\n\nexport async function getRegistryStyles() {\n  try {\n    const [result] = await fetchRegistry([\"styles/index.json\"])\n\n    return stylesSchema.parse(result)\n  } catch (error) {\n    logger.error(\"\\n\")\n    handleError(error)\n    return []\n  }\n}\n\nexport async function getRegistryIcons() {\n  try {\n    const [result] = await fetchRegistry([\"icons/index.json\"])\n    return iconsSchema.parse(result)\n  } catch (error) {\n    handleError(error)\n    return {}\n  }\n}\n\nexport async function getRegistryItem(name: string, style: string) {\n  try {\n    const [result] = await fetchRegistry([\n      isUrl(name) ? name : `styles/${style}/${name}.json`,\n    ])\n\n    return registryItemSchema.parse(result)\n  } catch (error) {\n    logger.break()\n    handleError(error)\n    return null\n  }\n}\n\nexport async function getRegistryBaseColors() {\n  return [\n    {\n      name: \"neutral\",\n      label: \"Neutral\",\n    },\n    {\n      name: \"gray\",\n      label: \"Gray\",\n    },\n    {\n      name: \"zinc\",\n      label: \"Zinc\",\n    },\n    {\n      name: \"stone\",\n      label: \"Stone\",\n    },\n    {\n      name: \"slate\",\n      label: \"Slate\",\n    },\n  ]\n}\n\nexport async function getRegistryBaseColor(baseColor: string) {\n  try {\n    const [result] = await fetchRegistry([`colors/${baseColor}.json`])\n\n    return registryBaseColorSchema.parse(result)\n  } catch (error) {\n    handleError(error)\n  }\n}\n\nexport async function resolveTree(\n  index: z.infer<typeof registryIndexSchema>,\n  names: string[]\n) {\n  const tree: z.infer<typeof registryIndexSchema> = []\n\n  for (const name of names) {\n    const entry = index.find((entry) => entry.name === name)\n\n    if (!entry) {\n      continue\n    }\n\n    tree.push(entry)\n\n    if (entry.registryDependencies) {\n      const dependencies = await resolveTree(index, entry.registryDependencies)\n      tree.push(...dependencies)\n    }\n  }\n\n  return tree.filter(\n    (component, index, self) =>\n      self.findIndex((c) => c.name === component.name) === index\n  )\n}\n\nexport async function fetchTree(\n  style: string,\n  tree: z.infer<typeof registryIndexSchema>\n) {\n  try {\n    const paths = tree.map((item) => `styles/${style}/${item.name}.json`)\n    const result = await fetchRegistry(paths)\n    return registryIndexSchema.parse(result)\n  } catch (error) {\n    handleError(error)\n  }\n}\n\nexport async function getItemTargetPath(\n  config: Config,\n  item: Pick<z.infer<typeof registryItemSchema>, \"type\">,\n  override?: string\n) {\n  if (override) {\n    return override\n  }\n\n  if (item.type === \"registry:ui\") {\n    return config.resolvedPaths.ui ?? config.resolvedPaths.components\n  }\n\n  const [parent, type] = item.type?.split(\":\") ?? []\n  if (!(parent in config.resolvedPaths)) {\n    return null\n  }\n\n  return path.join(\n    config.resolvedPaths[parent as keyof typeof config.resolvedPaths],\n    type\n  )\n}\n\nexport async function fetchRegistry(paths: string[]) {\n  try {\n    const results = await Promise.all(\n      paths.map(async (path) => {\n        const url = getRegistryUrl(path)\n        const response = await fetch(url, { agent })\n\n        if (!response.ok) {\n          const errorMessages: { [key: number]: string } = {\n            400: \"Bad request\",\n            401: \"Unauthorized\",\n            403: \"Forbidden\",\n            404: \"Not found\",\n            500: \"Internal server error\",\n          }\n\n          if (response.status === 401) {\n            throw new Error(\n              `You are not authorized to access the component at ${highlighter.info(\n                url\n              )}.\\nIf this is a remote registry, you may need to authenticate.`\n            )\n          }\n\n          if (response.status === 404) {\n            throw new Error(\n              `The component at ${highlighter.info(\n                url\n              )} was not found.\\nIt may not exist at the registry. Please make sure it is a valid component.`\n            )\n          }\n\n          if (response.status === 403) {\n            throw new Error(\n              `You do not have access to the component at ${highlighter.info(\n                url\n              )}.\\nIf this is a remote registry, you may need to authenticate or a token.`\n            )\n          }\n\n          const result = await response.json()\n          const message =\n            result && typeof result === \"object\" && \"error\" in result\n              ? result.error\n              : response.statusText || errorMessages[response.status]\n          throw new Error(\n            `Failed to fetch from ${highlighter.info(url)}.\\n${message}`\n          )\n        }\n\n        return response.json()\n      })\n    )\n\n    return results\n  } catch (error) {\n    logger.error(\"\\n\")\n    handleError(error)\n    return []\n  }\n}\n\nexport async function registryResolveItemsTree(\n  names: z.infer<typeof registryItemSchema>[\"name\"][],\n  config: Config\n) {\n  try {\n    const index = await getRegistryIndex()\n    if (!index) {\n      return null\n    }\n\n    // If we're resolving the index, we want it to go first.\n    if (names.includes(\"index\")) {\n      names.unshift(\"index\")\n    }\n\n    let registryItems = await resolveRegistryItems(names, config)\n    let result = await fetchRegistry(registryItems)\n    const payload = z.array(registryItemSchema).parse(result)\n\n    if (!payload) {\n      return null\n    }\n\n    // If we're resolving the index, we want to fetch\n    // the theme item if a base color is provided.\n    // We do this for index only.\n    // Other components will ship with their theme tokens.\n    if (names.includes(\"index\")) {\n      if (config.tailwind.baseColor) {\n        const theme = await registryGetTheme(config.tailwind.baseColor, config)\n        if (theme) {\n          payload.unshift(theme)\n        }\n      }\n    }\n\n    let tailwind = {}\n    payload.forEach((item) => {\n      tailwind = deepmerge(tailwind, item.tailwind ?? {})\n    })\n\n    let cssVars = {}\n    payload.forEach((item) => {\n      cssVars = deepmerge(cssVars, item.cssVars ?? {})\n    })\n\n    let docs = \"\"\n    payload.forEach((item) => {\n      if (item.docs) {\n        docs += `${item.docs}\\n`\n      }\n    })\n\n    return registryResolvedItemsTreeSchema.parse({\n      dependencies: deepmerge.all(\n        payload.map((item) => item.dependencies ?? [])\n      ),\n      devDependencies: deepmerge.all(\n        payload.map((item) => item.devDependencies ?? [])\n      ),\n      files: deepmerge.all(payload.map((item) => item.files ?? [])),\n      tailwind,\n      cssVars,\n      docs,\n    })\n  } catch (error) {\n    handleError(error)\n    return null\n  }\n}\n\nasync function resolveRegistryDependencies(\n  url: string,\n  config: Config\n): Promise<string[]> {\n  const visited = new Set<string>()\n  const payload: string[] = []\n\n  async function resolveDependencies(itemUrl: string) {\n    const url = getRegistryUrl(\n      isUrl(itemUrl) ? itemUrl : `styles/${config.style}/${itemUrl}.json`\n    )\n\n    if (visited.has(url)) {\n      return\n    }\n\n    visited.add(url)\n\n    try {\n      const [result] = await fetchRegistry([url])\n      const item = registryItemSchema.parse(result)\n      payload.push(url)\n\n      if (item.registryDependencies) {\n        for (const dependency of item.registryDependencies) {\n          await resolveDependencies(dependency)\n        }\n      }\n    } catch (error) {\n      console.error(\n        `Error fetching or parsing registry item at ${itemUrl}:`,\n        error\n      )\n    }\n  }\n\n  await resolveDependencies(url)\n  return Array.from(new Set(payload))\n}\n\nexport async function registryGetTheme(name: string, config: Config) {\n  const baseColor = await getRegistryBaseColor(name)\n  if (!baseColor) {\n    return null\n  }\n\n  // TODO: Move this to the registry i.e registry:theme.\n  const theme = {\n    name,\n    type: \"registry:theme\",\n    tailwind: {\n      config: {\n        theme: {\n          extend: {\n            borderRadius: {\n              lg: \"var(--radius)\",\n              md: \"calc(var(--radius) - 2px)\",\n              sm: \"calc(var(--radius) - 4px)\",\n            },\n            colors: {},\n          },\n        },\n      },\n    },\n    cssVars: {\n      light: {\n        radius: \"0.5rem\",\n      },\n      dark: {},\n    },\n  } satisfies z.infer<typeof registryItemSchema>\n\n  if (config.tailwind.cssVariables) {\n    theme.tailwind.config.theme.extend.colors = {\n      ...theme.tailwind.config.theme.extend.colors,\n      ...buildTailwindThemeColorsFromCssVars(baseColor.cssVars.dark),\n    }\n    theme.cssVars = {\n      light: {\n        ...baseColor.cssVars.light,\n        ...theme.cssVars.light,\n      },\n      dark: {\n        ...baseColor.cssVars.dark,\n        ...theme.cssVars.dark,\n      },\n    }\n  }\n\n  return theme\n}\n\nfunction getRegistryUrl(path: string) {\n  if (isUrl(path)) {\n    // If the url contains /chat/b/, we assume it's the v0 registry.\n    // We need to add the /json suffix if it's missing.\n    const url = new URL(path)\n    if (url.pathname.match(/\\/chat\\/b\\//) && !url.pathname.endsWith(\"/json\")) {\n      url.pathname = `${url.pathname}/json`\n    }\n\n    return url.toString()\n  }\n\n  return `${REGISTRY_URL}/${path}`\n}\n\nfunction isUrl(path: string) {\n  try {\n    new URL(path)\n    return true\n  } catch (error) {\n    return false\n  }\n}\n\n// TODO: We're double-fetching here. Use a cache.\nexport async function resolveRegistryItems(names: string[], config: Config) {\n  let registryDependencies: string[] = []\n  for (const name of names) {\n    const itemRegistryDependencies = await resolveRegistryDependencies(\n      name,\n      config\n    )\n    registryDependencies.push(...itemRegistryDependencies)\n  }\n\n  return Array.from(new Set(registryDependencies))\n}\n\nexport function getRegistryTypeAliasMap() {\n  return new Map<string, string>([\n    [\"registry:ui\", \"ui\"],\n    [\"registry:lib\", \"lib\"],\n    [\"registry:hook\", \"hooks\"],\n    [\"registry:block\", \"components\"],\n    [\"registry:component\", \"components\"],\n  ])\n}\n\n// Track a dependency and its parent.\nexport function getRegistryParentMap(\n  registryItems: z.infer<typeof registryItemSchema>[]\n) {\n  const map = new Map<string, z.infer<typeof registryItemSchema>>()\n  registryItems.forEach((item) => {\n    if (!item.registryDependencies) {\n      return\n    }\n\n    item.registryDependencies.forEach((dependency) => {\n      map.set(dependency, item)\n    })\n  })\n  return map\n}\n","import { cyan, green, red, yellow } from \"kleur/colors\"\n\nexport const highlighter = {\n  error: red,\n  warn: yellow,\n  info: cyan,\n  success: green,\n}\n","import { highlighter } from \"@/src/utils/highlighter\"\n\nexport const logger = {\n  error(...args: unknown[]) {\n    console.log(highlighter.error(args.join(\" \")))\n  },\n  warn(...args: unknown[]) {\n    console.log(highlighter.warn(args.join(\" \")))\n  },\n  info(...args: unknown[]) {\n    console.log(highlighter.info(args.join(\" \")))\n  },\n  success(...args: unknown[]) {\n    console.log(highlighter.success(args.join(\" \")))\n  },\n  log(...args: unknown[]) {\n    console.log(args.join(\" \"))\n  },\n  break() {\n    console.log(\"\")\n  },\n}\n","import { highlighter } from \"@/src/utils/highlighter\"\nimport { logger } from \"@/src/utils/logger\"\nimport { z } from \"zod\"\n\nexport function handleError(error: unknown) {\n  logger.error(\n    `Something went wrong. Please check the error below for more details.`\n  )\n  logger.error(`If the problem persists, please open an issue on GitHub.`)\n  logger.error(\"\")\n  if (typeof error === \"string\") {\n    logger.error(error)\n    logger.break()\n    process.exit(1)\n  }\n\n  if (error instanceof z.ZodError) {\n    logger.error(\"Validation failed:\")\n    for (const [key, value] of Object.entries(error.flatten().fieldErrors)) {\n      logger.error(`- ${highlighter.info(key)}: ${value}`)\n    }\n    logger.break()\n    process.exit(1)\n  }\n\n  if (error instanceof Error) {\n    logger.error(error.message)\n    logger.break()\n    process.exit(1)\n  }\n\n  logger.break()\n  process.exit(1)\n}\n","import { promises as fs } from \"fs\"\nimport { tmpdir } from \"os\"\nimport path from \"path\"\nimport { registryItemTailwindSchema } from \"@/src/registry/schema\"\nimport { Config } from \"@/src/utils/get-config\"\nimport { TailwindVersion } from \"@/src/utils/get-project-info\"\nimport { highlighter } from \"@/src/utils/highlighter\"\nimport { spinner } from \"@/src/utils/spinner\"\nimport deepmerge from \"deepmerge\"\nimport objectToString from \"stringify-object\"\nimport { type Config as TailwindConfig } from \"tailwindcss\"\nimport {\n  ArrayLiteralExpression,\n  ObjectLiteralExpression,\n  Project,\n  PropertyAssignment,\n  QuoteKind,\n  ScriptKind,\n  SyntaxKind,\n  VariableStatement,\n} from \"ts-morph\"\nimport { z } from \"zod\"\n\nexport type UpdaterTailwindConfig = Omit<TailwindConfig, \"plugins\"> & {\n  // We only want string plugins for now.\n  plugins?: string[]\n}\n\nexport async function updateTailwindConfig(\n  tailwindConfig:\n    | z.infer<typeof registryItemTailwindSchema>[\"config\"]\n    | undefined,\n  config: Config,\n  options: {\n    silent?: boolean\n    tailwindVersion?: TailwindVersion\n  }\n) {\n  if (!tailwindConfig) {\n    return\n  }\n\n  options = {\n    silent: false,\n    tailwindVersion: \"v3\",\n    ...options,\n  }\n\n  // No tailwind config in v4.\n  if (options.tailwindVersion === \"v4\") {\n    return\n  }\n\n  const tailwindFileRelativePath = path.relative(\n    config.resolvedPaths.cwd,\n    config.resolvedPaths.tailwindConfig\n  )\n  const tailwindSpinner = spinner(\n    `Updating ${highlighter.info(tailwindFileRelativePath)}`,\n    {\n      silent: options.silent,\n    }\n  ).start()\n  const raw = await fs.readFile(config.resolvedPaths.tailwindConfig, \"utf8\")\n  const output = await transformTailwindConfig(raw, tailwindConfig, config)\n  await fs.writeFile(config.resolvedPaths.tailwindConfig, output, \"utf8\")\n  tailwindSpinner?.succeed()\n}\n\nexport async function transformTailwindConfig(\n  input: string,\n  tailwindConfig: UpdaterTailwindConfig,\n  config: Config\n) {\n  const sourceFile = await _createSourceFile(input, config)\n  // Find the object with content property.\n  // This is faster than traversing the default export.\n  // TODO: maybe we do need to traverse the default export?\n  const configObject = sourceFile\n    .getDescendantsOfKind(SyntaxKind.ObjectLiteralExpression)\n    .find((node) =>\n      node\n        .getProperties()\n        .some(\n          (property) =>\n            property.isKind(SyntaxKind.PropertyAssignment) &&\n            property.getName() === \"content\"\n        )\n    )\n\n  // We couldn't find the config object, so we return the input as is.\n  if (!configObject) {\n    return input\n  }\n\n  const quoteChar = _getQuoteChar(configObject)\n\n  // Add darkMode.\n  addTailwindConfigProperty(\n    configObject,\n    {\n      name: \"darkMode\",\n      value: \"class\",\n    },\n    { quoteChar }\n  )\n\n  // Add Tailwind config plugins.\n  tailwindConfig.plugins?.forEach((plugin) => {\n    addTailwindConfigPlugin(configObject, plugin)\n  })\n\n  // Add Tailwind config theme.\n  if (tailwindConfig.theme) {\n    await addTailwindConfigTheme(configObject, tailwindConfig.theme)\n  }\n\n  return sourceFile.getFullText()\n}\n\nfunction addTailwindConfigProperty(\n  configObject: ObjectLiteralExpression,\n  property: {\n    name: string\n    value: string\n  },\n  {\n    quoteChar,\n  }: {\n    quoteChar: string\n  }\n) {\n  const existingProperty = configObject.getProperty(\"darkMode\")\n\n  if (!existingProperty) {\n    const newProperty = {\n      name: property.name,\n      initializer: `[${quoteChar}${property.value}${quoteChar}]`,\n    }\n\n    // We need to add darkMode as the first property.\n    if (property.name === \"darkMode\") {\n      configObject.insertPropertyAssignment(0, newProperty)\n      return configObject\n    }\n\n    configObject.addPropertyAssignment(newProperty)\n\n    return configObject\n  }\n\n  if (existingProperty.isKind(SyntaxKind.PropertyAssignment)) {\n    const initializer = existingProperty.getInitializer()\n    const newValue = `${quoteChar}${property.value}${quoteChar}`\n\n    // If property is a string, change it to an array and append.\n    if (initializer?.isKind(SyntaxKind.StringLiteral)) {\n      const initializerText = initializer.getText()\n      initializer.replaceWithText(`[${initializerText}, ${newValue}]`)\n      return configObject\n    }\n\n    // If property is an array, append.\n    if (initializer?.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      // Check if the array already contains the value.\n      if (\n        initializer\n          .getElements()\n          .map((element) => element.getText())\n          .includes(newValue)\n      ) {\n        return configObject\n      }\n      initializer.addElement(newValue)\n    }\n\n    return configObject\n  }\n\n  return configObject\n}\n\nasync function addTailwindConfigTheme(\n  configObject: ObjectLiteralExpression,\n  theme: UpdaterTailwindConfig[\"theme\"]\n) {\n  // Ensure there is a theme property.\n  if (!configObject.getProperty(\"theme\")) {\n    configObject.addPropertyAssignment({\n      name: \"theme\",\n      initializer: \"{}\",\n    })\n  }\n\n  // Nest all spread properties.\n  nestSpreadProperties(configObject)\n\n  const themeProperty = configObject\n    .getPropertyOrThrow(\"theme\")\n    ?.asKindOrThrow(SyntaxKind.PropertyAssignment)\n\n  const themeInitializer = themeProperty.getInitializer()\n  if (themeInitializer?.isKind(SyntaxKind.ObjectLiteralExpression)) {\n    const themeObjectString = themeInitializer.getText()\n    const themeObject = await parseObjectLiteral(themeObjectString)\n    const result = deepmerge(themeObject, theme, {\n      arrayMerge: (dst, src) => src,\n    })\n    const resultString = objectToString(result)\n      .replace(/\\'\\.\\.\\.(.*)\\'/g, \"...$1\") // Remove quote around spread element\n      .replace(/\\'\\\"/g, \"'\") // Replace `\\\" with \"\n      .replace(/\\\"\\'/g, \"'\") // Replace `\\\" with \"\n      .replace(/\\'\\[/g, \"[\") // Replace `[ with [\n      .replace(/\\]\\'/g, \"]\") // Replace `] with ]\n      .replace(/\\'\\\\\\'/g, \"'\") // Replace `\\' with '\n      .replace(/\\\\\\'/g, \"'\") // Replace \\' with '\n      .replace(/\\\\\\'\\'/g, \"'\")\n      .replace(/\\'\\'/g, \"'\")\n    themeInitializer.replaceWithText(resultString)\n  }\n\n  // Unnest all spread properties.\n  unnestSpreadProperties(configObject)\n}\n\nfunction addTailwindConfigPlugin(\n  configObject: ObjectLiteralExpression,\n  plugin: string\n) {\n  const existingPlugins = configObject.getProperty(\"plugins\")\n\n  if (!existingPlugins) {\n    configObject.addPropertyAssignment({\n      name: \"plugins\",\n      initializer: `[${plugin}]`,\n    })\n\n    return configObject\n  }\n\n  if (existingPlugins.isKind(SyntaxKind.PropertyAssignment)) {\n    const initializer = existingPlugins.getInitializer()\n\n    if (initializer?.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      if (\n        initializer\n          .getElements()\n          .map((element) => {\n            return element.getText().replace(/[\"']/g, \"\")\n          })\n          .includes(plugin.replace(/[\"']/g, \"\"))\n      ) {\n        return configObject\n      }\n      initializer.addElement(plugin)\n    }\n\n    return configObject\n  }\n\n  return configObject\n}\n\nexport async function _createSourceFile(input: string, config: Config | null) {\n  const dir = await fs.mkdtemp(path.join(tmpdir(), \"shadcn-\"))\n  const resolvedPath =\n    config?.resolvedPaths?.tailwindConfig || \"tailwind.config.ts\"\n  const tempFile = path.join(dir, `shadcn-${path.basename(resolvedPath)}`)\n\n  const project = new Project({\n    compilerOptions: {},\n  })\n  const sourceFile = project.createSourceFile(tempFile, input, {\n    // Note: .js and .mjs can still be valid for TS projects.\n    // We can't infer TypeScript from config.tsx.\n    scriptKind:\n      path.extname(resolvedPath) === \".ts\" ? ScriptKind.TS : ScriptKind.JS,\n  })\n\n  return sourceFile\n}\n\nexport function _getQuoteChar(configObject: ObjectLiteralExpression) {\n  return configObject\n    .getFirstDescendantByKind(SyntaxKind.StringLiteral)\n    ?.getQuoteKind() === QuoteKind.Single\n    ? \"'\"\n    : '\"'\n}\n\nexport function nestSpreadProperties(obj: ObjectLiteralExpression) {\n  const properties = obj.getProperties()\n\n  for (let i = 0; i < properties.length; i++) {\n    const prop = properties[i]\n    if (prop.isKind(SyntaxKind.SpreadAssignment)) {\n      const spreadAssignment = prop.asKindOrThrow(SyntaxKind.SpreadAssignment)\n      const spreadText = spreadAssignment.getExpression().getText()\n\n      // Replace spread with a property assignment\n      obj.insertPropertyAssignment(i, {\n        // Need to escape the name with \" so that deepmerge doesn't mishandle the key\n        name: `\"___${spreadText.replace(/^\\.\\.\\./, \"\")}\"`,\n        initializer: `\"...${spreadText.replace(/^\\.\\.\\./, \"\")}\"`,\n      })\n\n      // Remove the original spread assignment\n      spreadAssignment.remove()\n    } else if (prop.isKind(SyntaxKind.PropertyAssignment)) {\n      const propAssignment = prop.asKindOrThrow(SyntaxKind.PropertyAssignment)\n      const initializer = propAssignment.getInitializer()\n\n      if (\n        initializer &&\n        initializer.isKind(SyntaxKind.ObjectLiteralExpression)\n      ) {\n        // Recursively process nested object literals\n        nestSpreadProperties(\n          initializer.asKindOrThrow(SyntaxKind.ObjectLiteralExpression)\n        )\n      } else if (\n        initializer &&\n        initializer.isKind(SyntaxKind.ArrayLiteralExpression)\n      ) {\n        nestSpreadElements(\n          initializer.asKindOrThrow(SyntaxKind.ArrayLiteralExpression)\n        )\n      }\n    }\n  }\n}\n\nexport function nestSpreadElements(arr: ArrayLiteralExpression) {\n  const elements = arr.getElements()\n  for (let j = 0; j < elements.length; j++) {\n    const element = elements[j]\n    if (element.isKind(SyntaxKind.ObjectLiteralExpression)) {\n      // Recursive check on objects within arrays\n      nestSpreadProperties(\n        element.asKindOrThrow(SyntaxKind.ObjectLiteralExpression)\n      )\n    } else if (element.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      // Recursive check on nested arrays\n      nestSpreadElements(\n        element.asKindOrThrow(SyntaxKind.ArrayLiteralExpression)\n      )\n    } else if (element.isKind(SyntaxKind.SpreadElement)) {\n      const spreadText = element.getText()\n      // Spread element within an array\n      arr.removeElement(j)\n      arr.insertElement(j, `\"${spreadText}\"`)\n    }\n  }\n}\n\nexport function unnestSpreadProperties(obj: ObjectLiteralExpression) {\n  const properties = obj.getProperties()\n\n  for (let i = 0; i < properties.length; i++) {\n    const prop = properties[i]\n    if (prop.isKind(SyntaxKind.PropertyAssignment)) {\n      const propAssignment = prop as PropertyAssignment\n      const initializer = propAssignment.getInitializer()\n\n      if (initializer && initializer.isKind(SyntaxKind.StringLiteral)) {\n        const value = initializer\n          .asKindOrThrow(SyntaxKind.StringLiteral)\n          .getLiteralValue()\n        if (value.startsWith(\"...\")) {\n          obj.insertSpreadAssignment(i, { expression: value.slice(3) })\n          propAssignment.remove()\n        }\n      } else if (initializer?.isKind(SyntaxKind.ObjectLiteralExpression)) {\n        unnestSpreadProperties(initializer as ObjectLiteralExpression)\n      } else if (\n        initializer &&\n        initializer.isKind(SyntaxKind.ArrayLiteralExpression)\n      ) {\n        unnsetSpreadElements(\n          initializer.asKindOrThrow(SyntaxKind.ArrayLiteralExpression)\n        )\n      }\n    }\n  }\n}\n\nexport function unnsetSpreadElements(arr: ArrayLiteralExpression) {\n  const elements = arr.getElements()\n  for (let j = 0; j < elements.length; j++) {\n    const element = elements[j]\n    if (element.isKind(SyntaxKind.ObjectLiteralExpression)) {\n      // Recursive check on objects within arrays\n      unnestSpreadProperties(\n        element.asKindOrThrow(SyntaxKind.ObjectLiteralExpression)\n      )\n    } else if (element.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      // Recursive check on nested arrays\n      unnsetSpreadElements(\n        element.asKindOrThrow(SyntaxKind.ArrayLiteralExpression)\n      )\n    } else if (element.isKind(SyntaxKind.StringLiteral)) {\n      const spreadText = element.getText()\n      // check if spread element\n      const spreadTest = /(?:^['\"])(\\.\\.\\..*)(?:['\"]$)/g\n      if (spreadTest.test(spreadText)) {\n        arr.removeElement(j)\n        arr.insertElement(j, spreadText.replace(spreadTest, \"$1\"))\n      }\n    }\n  }\n}\n\nasync function parseObjectLiteral(objectLiteralString: string): Promise<any> {\n  const sourceFile = await _createSourceFile(\n    `const theme = ${objectLiteralString}`,\n    null\n  )\n\n  const statement = sourceFile.getStatements()[0]\n  if (statement?.getKind() === SyntaxKind.VariableStatement) {\n    const declaration = (statement as VariableStatement)\n      .getDeclarationList()\n      ?.getDeclarations()[0]\n    const initializer = declaration.getInitializer()\n    if (initializer?.isKind(SyntaxKind.ObjectLiteralExpression)) {\n      return await parseObjectLiteralExpression(initializer)\n    }\n  }\n\n  throw new Error(\"Invalid input: not an object literal\")\n}\n\nfunction parseObjectLiteralExpression(node: ObjectLiteralExpression): any {\n  const result: any = {}\n  for (const property of node.getProperties()) {\n    if (property.isKind(SyntaxKind.PropertyAssignment)) {\n      const name = property.getName().replace(/\\'/g, \"\")\n      if (\n        property.getInitializer()?.isKind(SyntaxKind.ObjectLiteralExpression)\n      ) {\n        result[name] = parseObjectLiteralExpression(\n          property.getInitializer() as ObjectLiteralExpression\n        )\n      } else if (\n        property.getInitializer()?.isKind(SyntaxKind.ArrayLiteralExpression)\n      ) {\n        result[name] = parseArrayLiteralExpression(\n          property.getInitializer() as ArrayLiteralExpression\n        )\n      } else {\n        result[name] = parseValue(property.getInitializer())\n      }\n    }\n  }\n  return result\n}\n\nfunction parseArrayLiteralExpression(node: ArrayLiteralExpression): any[] {\n  const result: any[] = []\n  for (const element of node.getElements()) {\n    if (element.isKind(SyntaxKind.ObjectLiteralExpression)) {\n      result.push(\n        parseObjectLiteralExpression(\n          element.asKindOrThrow(SyntaxKind.ObjectLiteralExpression)\n        )\n      )\n    } else if (element.isKind(SyntaxKind.ArrayLiteralExpression)) {\n      result.push(\n        parseArrayLiteralExpression(\n          element.asKindOrThrow(SyntaxKind.ArrayLiteralExpression)\n        )\n      )\n    } else {\n      result.push(parseValue(element))\n    }\n  }\n  return result\n}\n\nfunction parseValue(node: any): any {\n  switch (node.getKind()) {\n    case SyntaxKind.StringLiteral:\n      return node.getText()\n    case SyntaxKind.NumericLiteral:\n      return Number(node.getText())\n    case SyntaxKind.TrueKeyword:\n      return true\n    case SyntaxKind.FalseKeyword:\n      return false\n    case SyntaxKind.NullKeyword:\n      return null\n    case SyntaxKind.ArrayLiteralExpression:\n      return node.getElements().map(parseValue)\n    case SyntaxKind.ObjectLiteralExpression:\n      return parseObjectLiteralExpression(node)\n    default:\n      return node.getText()\n  }\n}\n\nexport function buildTailwindThemeColorsFromCssVars(\n  cssVars: Record<string, string>\n) {\n  const result: Record<string, any> = {}\n\n  for (const key of Object.keys(cssVars)) {\n    const parts = key.split(\"-\")\n    const colorName = parts[0]\n    const subType = parts.slice(1).join(\"-\")\n\n    if (subType === \"\") {\n      if (typeof result[colorName] === \"object\") {\n        result[colorName].DEFAULT = `hsl(var(--${key}))`\n      } else {\n        result[colorName] = `hsl(var(--${key}))`\n      }\n    } else {\n      if (typeof result[colorName] !== \"object\") {\n        result[colorName] = { DEFAULT: `hsl(var(--${colorName}))` }\n      }\n      result[colorName][subType] = `hsl(var(--${key}))`\n    }\n  }\n\n  // Remove DEFAULT if it's not in the original cssVars\n  for (const [colorName, value] of Object.entries(result)) {\n    if (\n      typeof value === \"object\" &&\n      value.DEFAULT === `hsl(var(--${colorName}))` &&\n      !(colorName in cssVars)\n    ) {\n      delete value.DEFAULT\n    }\n  }\n\n  return result\n}\n","import ora, { type Options } from \"ora\"\n\nexport function spinner(\n  text: Options[\"text\"],\n  options?: {\n    silent?: boolean\n  }\n) {\n  return ora({\n    text,\n    isSilent: options?.silent,\n  })\n}\n"]}