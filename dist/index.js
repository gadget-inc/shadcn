#!/usr/bin/env node
import { b, a, d, c, t, w, s, m, l, z as z$1, x, A, C as C$1, e, E, B, G as G$1, F as F$1, f, g, v as v$1, u } from './chunk-P7W77U7C.js';
export { B as fetchRegistry, z as fetchTree, A as getItemTargetPath, x as getRegistryBaseColor, w as getRegistryBaseColors, u as getRegistryIcons, s as getRegistryIndex, v as getRegistryItem, G as getRegistryParentMap, t as getRegistryStyles, F as getRegistryTypeAliasMap, D as registryGetTheme, C as registryResolveItemsTree, E as resolveRegistryItems, y as resolveTree } from './chunk-P7W77U7C.js';
import * as k from 'path';
import k__default, { basename } from 'path';
import { promises, existsSync } from 'fs';
import { loadConfig, createMatchPath } from 'tsconfig-paths';
import { cosmiconfig } from 'cosmiconfig';
import ie from 'fast-glob';
import { z } from 'zod';
import W from 'fs-extra';
import w$1 from 'postcss';
import fr from 'postcss/lib/at-rule';
import { detect } from '@antfu/ni';
import { execa } from 'execa';
import We from 'prompts';
import ri, { tmpdir } from 'os';
import { Project, ScriptKind, SyntaxKind } from 'ts-morph';
import { transformFromAstSync } from '@babel/core';
import { parse } from '@babel/parser';
import Ar from '@babel/plugin-transform-typescript';
import * as le from 'recast';
import { Command } from 'commander';
import * as H from 'fs/promises';
import H__default from 'fs/promises';
import { diffLines } from 'diff';
import { randomBytes } from 'crypto';

var C="1";var $="3";var K="5",Pe="6",nt="7";var Te="13";var O={"next-app":{name:"next-app",label:"Next.js",links:{installation:"https://ui.shadcn.com/docs/installation/next",tailwind:"https://tailwindcss.com/docs/guides/nextjs"}},"next-pages":{name:"next-pages",label:"Next.js",links:{installation:"https://ui.shadcn.com/docs/installation/next",tailwind:"https://tailwindcss.com/docs/guides/nextjs"}},remix:{name:"remix",label:"Remix",links:{installation:"https://ui.shadcn.com/docs/installation/remix",tailwind:"https://tailwindcss.com/docs/guides/remix"}},vite:{name:"vite",label:"Vite",links:{installation:"https://ui.shadcn.com/docs/installation/vite",tailwind:"https://tailwindcss.com/docs/guides/vite"}},astro:{name:"astro",label:"Astro",links:{installation:"https://ui.shadcn.com/docs/installation/astro",tailwind:"https://tailwindcss.com/docs/guides/astro"}},laravel:{name:"laravel",label:"Laravel",links:{installation:"https://ui.shadcn.com/docs/installation/laravel",tailwind:"https://tailwindcss.com/docs/guides/laravel"}},gatsby:{name:"gatsby",label:"Gatsby",links:{installation:"https://ui.shadcn.com/docs/installation/gatsby",tailwind:"https://tailwindcss.com/docs/guides/gatsby"}},manual:{name:"manual",label:"Manual",links:{installation:"https://ui.shadcn.com/docs/installation/manual",tailwind:"https://tailwindcss.com/docs/installation"}}};async function N(e,t){return createMatchPath(t.absoluteBaseUrl,t.paths)(e,void 0,()=>!0,[".ts",".tsx"])}var st="@/components",at="@/lib/utils",ct="app/globals.css",lt="tailwind.config.js";var Zt=cosmiconfig("components",{searchPlaces:["components.json"]}),G=z.object({$schema:z.string().optional(),style:z.string(),rsc:z.coerce.boolean().default(!1),tsx:z.coerce.boolean().default(!0),tailwind:z.object({config:z.string().optional(),css:z.string(),baseColor:z.string(),cssVariables:z.boolean().default(!0),prefix:z.string().default("").optional()}),aliases:z.object({components:z.string(),utils:z.string(),ui:z.string().optional(),lib:z.string().optional(),hooks:z.string().optional()}),iconLibrary:z.string().optional()}).strict(),pt=G.extend({resolvedPaths:z.object({cwd:z.string(),tailwindConfig:z.string(),tailwindCss:z.string(),utils:z.string(),components:z.string(),lib:z.string(),hooks:z.string(),ui:z.string()})}),er=z.record(pt);async function R(e){let t=await tr(e);return t?(t.iconLibrary||(t.iconLibrary=t.style==="new-york"?"radix":"lucide"),await J(e,t)):null}async function J(e,t){let r=await loadConfig(e);if(r.resultType==="failed")throw new Error(`Failed to load ${t.tsx?"tsconfig":"jsconfig"}.json. ${r.message??""}`.trim());return pt.parse({...t,resolvedPaths:{cwd:e,tailwindConfig:t.tailwind.config?k__default.resolve(e,t.tailwind.config):"",tailwindCss:k__default.resolve(e,t.tailwind.css),utils:await N(t.aliases.utils,r),components:await N(t.aliases.components,r),ui:t.aliases.ui?await N(t.aliases.ui,r):k__default.resolve(await N(t.aliases.components,r)??e,"ui"),lib:t.aliases.lib?await N(t.aliases.lib,r):k__default.resolve(await N(t.aliases.utils,r)??e,".."),hooks:t.aliases.hooks?await N(t.aliases.hooks,r):k__default.resolve(await N(t.aliases.components,r)??e,"..","hooks")}})}async function tr(e){try{let t=await Zt.search(e);return t?G.parse(t.config):null}catch{let r=`${e}/components.json`;throw new Error(`Invalid configuration found in ${a.info(r)}.`)}}async function ft(e){let t={};for(let i of Object.keys(e.aliases)){if(!rr(i,e))continue;let o=e.resolvedPaths[i],n=await je(e.resolvedPaths.cwd,o);if(!n){t[i]=e;continue}t[i]=await R(n);}let r=er.safeParse(t);return r.success?r.data:null}async function je(e,t){let r=Oe(e,t),i=k__default.relative(r,t),n=(await ie.glob("**/package.json",{cwd:r,deep:3,ignore:["**/node_modules/**","**/dist/**","**/build/**","**/public/**"]})).map(s=>k__default.dirname(s)).find(s=>i.startsWith(s));return n?k__default.join(r,n):null}function rr(e,t){return Object.keys(t.resolvedPaths).filter(r=>r!=="utils").includes(e)}function Oe(e,t){let r=e.split(k__default.sep),i=t.split(k__default.sep),o=[];for(let n=0;n<Math.min(r.length,i.length)&&r[n]===i[n];n++)o.push(r[n]);return o.join(k__default.sep)}function Y(e="",t=!0){let r=k__default.join(e,"package.json");return W.readJSONSync(r,{throws:t})}var oe=["**/node_modules/**",".next","public","dist","build"];z.object({compilerOptions:z.object({paths:z.record(z.string().or(z.array(z.string())))})});async function T(e){let[t,r,i,o,n,s,a,p]=await Promise.all([ie.glob("**/{next,vite,astro}.config.*|gatsby-config.*|composer.json",{cwd:e,deep:3,ignore:oe}),W.pathExists(k__default.resolve(e,"src")),lr(e),ar(e),sr(e),mt(e),cr(e),Y(e,!1)]),m=await W.pathExists(k__default.resolve(e,`${r?"src/":""}app`)),f={framework:O.manual,isSrcDir:r,isRSC:!1,isTsx:i,tailwindConfigFile:o,tailwindCssFile:n,tailwindVersion:s,aliasPrefix:a};return t.find(d=>d.startsWith("next.config."))?.length?(f.framework=m?O["next-app"]:O["next-pages"],f.isRSC=m,f):t.find(d=>d.startsWith("astro.config."))?.length?(f.framework=O.astro,f):t.find(d=>d.startsWith("gatsby-config."))?.length?(f.framework=O.gatsby,f):t.find(d=>d.startsWith("composer.json"))?.length?(f.framework=O.laravel,f):Object.keys(p?.dependencies??{}).find(d=>d.startsWith("@remix-run/"))?(f.framework=O.remix,f):(t.find(d=>d.startsWith("vite.config."))?.length&&(f.framework=O.vite),f)}async function mt(e){let t=Y(e);return !t?.dependencies?.tailwindcss&&!t?.devDependencies?.tailwindcss?null:/^(?:\^|~)?3(?:\.\d+)*(?:-.*)?$/.test(t?.dependencies?.tailwindcss||t?.devDependencies?.tailwindcss||"")?"v3":"v4"}async function sr(e){let[t,r]=await Promise.all([ie.glob(["**/*.css","**/*.scss"],{cwd:e,deep:5,ignore:oe}),mt(e)]);if(!t.length)return null;for(let o of t){let n=await W.readFile(k__default.resolve(e,o),"utf8");if(n.includes('@import "tailwindcss"')||n.includes("@import 'tailwindcss'")||n.includes("@tailwind base"))return o}return null}async function ar(e){let t=await ie.glob("tailwind.config.*",{cwd:e,deep:3,ignore:oe});return t.length?t[0]:null}async function cr(e){let t=await loadConfig(e);if(t?.resultType==="failed"||!Object.entries(t?.paths).length)return null;for(let[r,i]of Object.entries(t.paths))if(i.includes("./*")||i.includes("./src/*")||i.includes("./app/*")||i.includes("./resources/js/*"))return r.replace(/\/\*$/,"")??null;return Object.keys(t?.paths)?.[0].replace(/\/\*$/,"")??null}async function lr(e){return (await ie.glob("tsconfig.*",{cwd:e,deep:1,ignore:oe})).length>0}async function dt(e,t=null){let[r,i]=await Promise.all([R(e),t?Promise.resolve(t):T(e)]);if(r)return r;if(!i||!i.tailwindCssFile||i.tailwindVersion==="v3"&&!i.tailwindConfigFile)return null;let o={$schema:"https://ui.shadcn.com/schema.json",rsc:i.isRSC,tsx:i.isTsx,style:"new-york",tailwind:{config:i.tailwindConfigFile??"",baseColor:"zinc",css:i.tailwindCssFile,cssVariables:!0,prefix:""},iconLibrary:"lucide",aliases:{components:`${i.aliasPrefix}/components`,ui:`${i.aliasPrefix}/components/ui`,hooks:`${i.aliasPrefix}/hooks`,lib:`${i.aliasPrefix}/lib`,utils:`${i.aliasPrefix}/lib/utils`}};return await J(e,o)}async function $e(e){if(!e.resolvedPaths.cwd)return "v3";let t=await T(e.resolvedPaths.cwd);return t?.tailwindVersion?t.tailwindVersion:null}async function gt(e){let t={};if(!W.existsSync(e.cwd)||!W.existsSync(k__default.resolve(e.cwd,"package.json")))return t[C]=!0,{errors:t,projectInfo:null};let r=c("Preflight checks.",{silent:e.silent}).start();W.existsSync(k__default.resolve(e.cwd,"components.json"))&&!e.force&&(r?.fail(),b.break(),b.error(`A ${a.info("components.json")} file already exists at ${a.info(e.cwd)}.
To start over, remove the ${a.info("components.json")} file and run ${a.info("init")} again.`),b.break(),process.exit(1)),r?.succeed();let i=c("Verifying framework.",{silent:e.silent}).start(),o=await T(e.cwd);(!o||o?.framework.name==="manual")&&(t[nt]=!0,i?.fail(),b.break(),o?.framework.links.installation&&b.error(`We could not detect a supported framework at ${a.info(e.cwd)}.
Visit ${a.info(o?.framework.links.installation)} to manually configure your project.
Once configured, you can use the cli to add components.`),b.break(),process.exit(1)),i?.succeed(`Verifying framework. Found ${a.info(o.framework.label)}.`);let n="Validating Tailwind CSS.";o.tailwindVersion==="v4"&&(n=`Validating Tailwind CSS config. Found ${a.info("v4")}.`);let s=c(n,{silent:e.silent}).start();o.tailwindVersion==="v3"&&(!o?.tailwindConfigFile||!o?.tailwindCssFile)?(t[K]=!0,s?.fail()):o.tailwindVersion==="v4"&&!o?.tailwindCssFile?(t[K]=!0,s?.fail()):o.tailwindVersion?s?.succeed():(t[K]=!0,s?.fail());let a$1=c("Validating import alias.",{silent:e.silent}).start();return o?.aliasPrefix?a$1?.succeed():(t[Pe]=!0,a$1?.fail()),Object.keys(t).length>0&&(t[K]&&(b.break(),b.error(`No Tailwind CSS configuration found at ${a.info(e.cwd)}.`),b.error("It is likely you do not have Tailwind CSS installed or have an invalid configuration."),b.error("Install Tailwind CSS then try again."),o?.framework.links.tailwind&&b.error(`Visit ${a.info(o?.framework.links.tailwind)} to get started.`)),t[Pe]&&(b.break(),b.error("No import alias found in your tsconfig.json file."),o?.framework.links.installation&&b.error(`Visit ${a.info(o?.framework.links.installation)} to learn how to set an import alias.`)),b.break(),process.exit(1)),{errors:t,projectInfo:o}}async function Fe(e,t,r){if(!t.resolvedPaths.tailwindCss)return;r={cleanupDefaultNextStyles:!1,silent:!1,tailwindVersion:"v3",...r};let i=t.resolvedPaths.tailwindCss,o=k__default.relative(t.resolvedPaths.cwd,i),n=c(`Updating ${a.info(o)}`,{silent:r.silent}).start(),s=await promises.readFile(i,"utf8"),a$1=await mr(s,e??{},t,{cleanupDefaultNextStyles:r.cleanupDefaultNextStyles,tailwindVersion:r.tailwindVersion,tailwindConfig:r.tailwindConfig});await promises.writeFile(i,a$1,"utf8"),n.succeed();}async function mr(e,t,r,i={cleanupDefaultNextStyles:!1,tailwindVersion:"v3",tailwindConfig:void 0}){i={cleanupDefaultNextStyles:!1,tailwindVersion:"v3",tailwindConfig:void 0,...i};let o=[ur(t)];i.tailwindVersion==="v4"&&(o=[xr({params:"dark (&:is(.dark *))"}),wr(t),yr(t)],i.tailwindConfig&&(o.push(br(i.tailwindConfig)),o.push(Rr(i.tailwindConfig)),o.push(Sr(i.tailwindConfig)))),i.cleanupDefaultNextStyles&&o.push(gr()),r.tailwind.cssVariables&&o.push(dr());let s=(await w$1(o).process(e,{from:void 0})).css.replace(/\/\* ---break--- \*\//g,"");return i.tailwindVersion==="v4"&&(s=s.replace(/(\n\s*\n)+/g,`

`)),s}function dr(){return {postcssPlugin:"update-base-layer",Once(e){let t=[{selector:"*",apply:"border-border"},{selector:"body",apply:"bg-background text-foreground"}],r=e.nodes.find(i=>i.type==="atrule"&&i.name==="layer"&&i.params==="base"&&t.every(({selector:o,apply:n})=>i.nodes?.some(s=>s.type==="rule"&&s.selector===o&&s.nodes.some(a=>a.type==="atrule"&&a.name==="apply"&&a.params===n))));r||(r=w$1.atRule({name:"layer",params:"base",raws:{semicolon:!0,between:" ",before:`
`}}),e.append(r),e.insertBefore(r,w$1.comment({text:"---break---"}))),t.forEach(({selector:i,apply:o})=>{r?.nodes?.find(s=>s.type==="rule"&&s.selector===i)||r?.append(w$1.rule({selector:i,nodes:[w$1.atRule({name:"apply",params:o,raws:{semicolon:!0,before:`
    `}})],raws:{semicolon:!0,between:" ",before:`
  `}}));});}}}function ur(e){return {postcssPlugin:"update-css-vars",Once(t){let r=t.nodes.find(i=>i.type==="atrule"&&i.name==="layer"&&i.params==="base");r instanceof fr||(r=w$1.atRule({name:"layer",params:"base",nodes:[],raws:{semicolon:!0,before:`
`,between:" "}}),t.append(r),t.insertBefore(r,w$1.comment({text:"---break---"}))),r!==void 0&&Object.entries(e).forEach(([i,o])=>{let n=i==="light"?":root":`.${i}`;hr(r,n,o);});}}}function wt(e){let t=e.nodes.find(r=>r.type==="rule"&&r.selector===":root");if(t){let r=["--background","--foreground"];t.nodes.filter(i=>i.type==="decl"&&r.includes(i.prop)).forEach(i=>i.remove()),t.nodes.length===0&&t.remove();}}function gr(){return {postcssPlugin:"cleanup-default-next-styles",Once(e){let t=e.nodes.find(i=>i.type==="rule"&&i.selector==="body");t&&(t.nodes.find(i=>i.type==="decl"&&i.prop==="color"&&["rgb(var(--foreground-rgb))","var(--foreground)"].includes(i.value))?.remove(),t.nodes.find(i=>i.type==="decl"&&i.prop==="background"&&(i.value.startsWith("linear-gradient")||i.value==="var(--background)"))?.remove(),t.nodes.find(i=>i.type==="decl"&&i.prop==="font-family"&&i.value==="Arial, Helvetica, sans-serif")?.remove(),t.nodes.length===0&&t.remove()),wt(e);let r=e.nodes.find(i=>i.type==="atrule"&&i.params==="(prefers-color-scheme: dark)");r&&(wt(r),r.nodes.length===0&&r.remove());}}}function hr(e,t,r){let i=e.nodes?.find(o=>o.type==="rule"&&o.selector===t);i||Object.keys(r).length>0&&(i=w$1.rule({selector:t,raws:{between:" ",before:`
  `}}),e.append(i)),Object.entries(r).forEach(([o,n])=>{let s=`--${o.replace(/^--/,"")}`,a=w$1.decl({prop:s,value:n,raws:{semicolon:!0}}),p=i?.nodes.find(m=>m.type==="decl"&&m.prop===s);p?p.replaceWith(a):i?.append(a);});}function wr(e){return {postcssPlugin:"update-css-vars-v4",Once(t){Object.entries(e).forEach(([r,i])=>{let o=r==="light"?":root":`.${r}`,n=t.nodes?.find(s=>s.type==="rule"&&s.selector===o);n||(n=w$1.rule({selector:o,nodes:[],raws:{semicolon:!0,between:" ",before:`
`}}),t.append(n),t.insertBefore(n,w$1.comment({text:"---break---"}))),Object.entries(i).forEach(([s,a])=>{let p=`--${s.replace(/^--/,"")}`;yt(a)&&(a=`hsl(${a})`);let m=w$1.decl({prop:p,value:a,raws:{semicolon:!0}}),f=n?.nodes.find(d=>d.type==="decl"&&d.prop===p);f?f.replaceWith(m):n?.append(m);});});}}}function yr(e){return {postcssPlugin:"update-theme",Once(t){let r=Array.from(new Set(Object.keys(e).flatMap(n=>Object.keys(e[n]||{}))));if(!r.length)return;let i=_e(t),o=i.nodes?.filter(n=>n.type==="decl"&&n.prop.startsWith("--"));for(let n of r){let s=Object.values(e).find(m=>m[n])?.[n];if(!s)continue;if(n==="radius"){let m={sm:"calc(var(--radius) - 4px)",md:"calc(var(--radius) - 2px)",lg:"var(--radius)",xl:"calc(var(--radius) + 4px)"};for(let[f,d]of Object.entries(m)){let h=w$1.decl({prop:`--radius-${f}`,value:d,raws:{semicolon:!0}});i?.nodes?.find(S=>S.type==="decl"&&S.prop===h.prop)||i?.append(h);}break}let a=w$1.decl({prop:yt(s)||vr(s)?`--color-${n.replace(/^--/,"")}`:`--${n.replace(/^--/,"")}`,value:`var(--${n})`,raws:{semicolon:!0}});i?.nodes?.find(m=>m.type==="decl"&&m.prop===a.prop)||(o?.length?i?.insertAfter(o[o.length-1],a):i?.append(a));}}}}function _e(e){let t=e.nodes.find(r=>r.type==="atrule"&&r.name==="theme"&&r.params==="inline");return t||(t=w$1.atRule({name:"theme",params:"inline",nodes:[],raws:{semicolon:!0,between:" ",before:`
`}}),e.append(t),e.insertBefore(t,w$1.comment({text:"---break---"}))),t}function xr({params:e}){return {postcssPlugin:"add-custom-variant",Once(t){if(!t.nodes.find(i=>i.type==="atrule"&&i.name==="custom-variant")){let i=w$1.atRule({name:"custom-variant",params:e,raws:{semicolon:!0,before:`
`}});t.insertAfter(t.nodes[0],i),t.insertBefore(i,w$1.comment({text:"---break---"}));}}}}function br(e){return {postcssPlugin:"update-tailwind-config",Once(t){if(!e?.plugins)return;let i=Cr(t)==="single"?"'":'"',o=t.nodes.filter(s=>s.type==="atrule"&&s.name==="plugin"),n=o[o.length-1]||t.nodes[0];for(let s of e.plugins){let a=s.replace(/^require\(["']|["']\)$/g,"");if(o.some(m=>m.params.replace(/["']/g,"")===a))continue;let p=w$1.atRule({name:"plugin",params:`${i}${a}${i}`,raws:{semicolon:!0,before:`
`}});t.insertAfter(n,p),t.insertBefore(p,w$1.comment({text:"---break---"}));}}}}function Sr(e){return {postcssPlugin:"update-tailwind-config-keyframes",Once(t){if(!e?.theme?.extend?.keyframes)return;let r=_e(t),i=r.nodes?.filter(n=>n.type==="atrule"&&n.name==="keyframes"),o=z.record(z.string(),z.record(z.string(),z.string()));for(let[n,s]of Object.entries(e.theme.extend.keyframes)){if(typeof n!="string")continue;let a=o.safeParse(s);if(!a.success||i?.find(m=>m.type==="atrule"&&m.name==="keyframes"&&m.params===n))continue;let p=w$1.atRule({name:"keyframes",params:n,nodes:[],raws:{semicolon:!0,between:" ",before:`
  `}});for(let[m,f]of Object.entries(a.data)){let d=w$1.rule({selector:m,nodes:Object.entries(f).map(([h,S])=>w$1.decl({prop:h,value:S,raws:{semicolon:!0,before:`
      `,between:": "}})),raws:{semicolon:!0,between:" ",before:`
    `}});p.append(d);}r.append(p),r.insertBefore(p,w$1.comment({text:"---break---"}));}}}}function Rr(e){return {postcssPlugin:"update-tailwind-config-animation",Once(t){if(!e?.theme?.extend?.animation)return;let r=_e(t),i=r.nodes?.filter(n=>n.type==="decl"&&n.prop.startsWith("--animate-")),o=z.record(z.string(),z.string()).safeParse(e.theme.extend.animation);if(o.success)for(let[n,s]of Object.entries(o.data)){let a=`--animate-${n}`;if(i?.find(m=>m.prop===a))continue;let p=w$1.decl({prop:a,value:s,raws:{semicolon:!0,between:": ",before:`
  `}});r.append(p);}}}}function Cr(e){return e.nodes[0].toString().includes("'")?"single":"double"}function yt(e){if(e.startsWith("hsl")||e.startsWith("rgb")||e.startsWith("#")||e.startsWith("oklch"))return !1;let t=e.split(" ");return t.length===3&&t.slice(1,3).every(r=>r.includes("%"))}function vr(e){return e.startsWith("hsl")||e.startsWith("rgb")||e.startsWith("#")||e.startsWith("oklch")}async function ne(e,{withFallback:t}={withFallback:!1}){let r=await detect({programmatic:!0,cwd:e});if(r==="yarn@berry")return "yarn";if(r==="pnpm@6")return "pnpm";if(r==="bun")return "bun";if(!t)return r??"npm";let i=process.env.npm_config_user_agent||"";return i.startsWith("yarn")?"yarn":i.startsWith("pnpm")?"pnpm":i.startsWith("bun")?"bun":"npm"}async function q(e,t,r){if(e=Array.from(new Set(e)),!e?.length)return;r={silent:!1,...r};let i=c("Installing dependencies.",{silent:r.silent})?.start(),o=await ne(t.resolvedPaths.cwd),n="";if(Tr(t)&&o==="npm"){i.stopAndPersist(),b.warn(`
It looks like you are using React 19. 
Some packages may fail to install due to peer dependency issues in npm (see https://ui.shadcn.com/react-19).
`);let s=await We([{type:"select",name:"flag",message:"How would you like to proceed?",choices:[{title:"Use --force",value:"force"},{title:"Use --legacy-peer-deps",value:"legacy-peer-deps"}]}]);s&&(n=s.flag);}i?.start(),await execa(o,[o==="npm"?"install":"add",...o==="npm"&&n?[`--${n}`]:[],...e],{cwd:t.resolvedPaths.cwd}),i?.succeed();}function Tr(e){let t=Y(e.resolvedPaths.cwd);return t?.dependencies?.react?/^(?:\^|~)?19(?:\.\d+)*(?:-.*)?$/.test(t.dependencies.react):!1}var se=async({sourceFile:e,config:t,baseColor:r})=>(t.tailwind?.cssVariables||!r?.inlineColors||e.getDescendantsOfKind(SyntaxKind.StringLiteral).forEach(i=>{let o=i.getText();if(o){let n=Nr(o.replace(/"/g,""),r.inlineColors);i.replaceWithText(`"${n.trim()}"`);}}),e);function Ae(e){if(!e.includes("/")&&!e.includes(":"))return [null,e,null];let t=[],[r,i]=e.split("/");if(!r.includes(":"))return [null,r,i];let o=r.split(":"),n=o.pop(),s=o.join(":");return t.push(s??null,n??null,i??null),t}var Or=["bg-","text-","border-","ring-offset-","ring-"];function Nr(e,t){e.includes(" border ")&&(e=e.replace(" border "," border border-border "));let r=e.split(" "),i=new Set,o=new Set;for(let n of r){let[s,a,p]=Ae(n),m=Or.find(d=>a?.startsWith(d));if(!m){i.has(n)||i.add(n);continue}let f=a?.replace(m,"");if(f&&f in t.light){i.add([s,`${m}${t.light[f]}`].filter(Boolean).join(":")+(p?`/${p}`:"")),o.add(["dark",s,`${m}${t.dark[f]}`].filter(Boolean).join(":")+(p?`/${p}`:""));continue}i.has(n)||i.add(n);}return [...Array.from(i),...Array.from(o)].join(" ").trim()}var v={lucide:{name:"lucide-react",package:"lucide-react",import:"lucide-react"},radix:{name:"@radix-ui/react-icons",package:"@radix-ui/react-icons",import:"@radix-ui/react-icons"}};var xt="lucide",ae=async({sourceFile:e,config:t})=>{if(!t.iconLibrary||!(t.iconLibrary in v))return e;let r=await u(),i=xt,o=t.iconLibrary;if(i===o)return e;let n=[];for(let s of e.getImportDeclarations()??[])if(s.getModuleSpecifier()?.getText()===`"${v[xt].import}"`){for(let a of s.getNamedImports()??[]){let p=a.getName(),m=r[p]?.[o];!m||n.includes(m)||(n.push(m),a.remove(),e.getDescendantsOfKind(SyntaxKind.JsxSelfClosingElement).filter(f=>f.getTagNameNode()?.getText()===p).forEach(f=>f.getTagNameNode()?.replaceWithText(m)));}s.getNamedImports()?.length===0&&s.remove();}if(n.length>0){let s=e.addImportDeclaration({moduleSpecifier:v[o]?.import,namedImports:n.map(a=>({name:a}))});$r(e)||s.replaceWithText(s.getText().replace(";",""));}return e};function $r(e){return e.getImportDeclarations()?.[0]?.getText().endsWith(";")??!1}var bt={"@/lib/utils":/^@\/lib\/utils/,"@workspace/lib/utils":/^@workspace\/lib\/utils/},ce=async({sourceFile:e,config:t,isRemote:r})=>{let i=e.getImportDeclarations();for(let o of i){let n=Dr(o.getModuleSpecifierValue(),t,r);o.setModuleSpecifier(n),bt[n]&&o.getNamedImports().find(p=>p.getName()==="cn")&&o.setModuleSpecifier(n.replace(bt[n],t.aliases.utils));}return e};function Dr(e,t,r=!1){if(!e.startsWith("@/")&&!r)return e;if(r&&e.startsWith("@/")&&(e=e.replace(/^@\//,"@/registry/new-york/")),!e.startsWith("@/registry/")){let i=t.aliases.components.split("/")[0];return e.replace(/^@\//,`${i}/`)}return e.match(/^@\/registry\/(.+)\/ui/)?e.replace(/^@\/registry\/(.+)\/ui/,t.aliases.ui??`${t.aliases.components}/ui`):t.aliases.components&&e.match(/^@\/registry\/(.+)\/components/)?e.replace(/^@\/registry\/(.+)\/components/,t.aliases.components):t.aliases.lib&&e.match(/^@\/registry\/(.+)\/lib/)?e.replace(/^@\/registry\/(.+)\/lib/,t.aliases.lib):t.aliases.hooks&&e.match(/^@\/registry\/(.+)\/hooks/)?e.replace(/^@\/registry\/(.+)\/hooks/,t.aliases.hooks):e.replace(/^@\/registry\/[^/]+/,t.aliases.components)}var Lr={sourceType:"module",allowImportExportEverywhere:!0,allowReturnOutsideFunction:!0,startLine:1,tokens:!0,plugins:["asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","classStaticBlock","decimal","decorators-legacy","doExpressions","dynamicImport","exportDefaultFrom","exportNamespaceFrom","functionBind","functionSent","importAssertions","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{proposal:"minimal"}],["recordAndTuple",{syntaxType:"hash"}],"throwExpressions","topLevelAwait","v8intrinsic","typescript","jsx"]},St=async({sourceFile:e,config:t})=>{let r=e.getFullText();if(t.tsx)return r;let i=le.parse(r,{parser:{parse:n=>parse(n,Lr)}}),o=transformFromAstSync(i,r,{cloneInputAst:!1,code:!1,ast:!0,plugins:[Ar],configFile:!1});if(!o||!o.ast)throw new Error("Failed to transform JSX");return le.print(o.ast).code};var Vr=/^["']use client["']$/g,pe=async({sourceFile:e,config:t})=>{if(t.rsc)return e;let r=e.getFirstChildByKind(SyntaxKind.ExpressionStatement);return r&&Vr.test(r.getText())&&r.remove(),e};var fe=async({sourceFile:e,config:t})=>(t.tailwind?.prefix&&(e.getDescendantsOfKind(SyntaxKind.CallExpression).filter(r=>r.getExpression().getText()==="cva").forEach(r=>{if(r.getArguments()[0]?.isKind(SyntaxKind.StringLiteral)){let i=r.getArguments()[0];i&&i.replaceWithText(`"${F(i.getText()?.replace(/"|'/g,""),t.tailwind.prefix)}"`);}r.getArguments()[1]?.isKind(SyntaxKind.ObjectLiteralExpression)&&r.getArguments()[1]?.getDescendantsOfKind(SyntaxKind.PropertyAssignment).find(i=>i.getName()==="variants")?.getDescendantsOfKind(SyntaxKind.PropertyAssignment).forEach(i=>{i.getDescendantsOfKind(SyntaxKind.PropertyAssignment).forEach(o=>{let n=o.getInitializerIfKind(SyntaxKind.StringLiteral);n&&n?.replaceWithText(`"${F(n.getText()?.replace(/"|'/g,""),t.tailwind.prefix)}"`);});});}),e.getDescendantsOfKind(SyntaxKind.JsxAttribute).forEach(r=>{if(r.getName()==="className"){if(r.getInitializer()?.isKind(SyntaxKind.StringLiteral)){let i=r.getInitializer();i&&i.replaceWithText(`"${F(i.getText()?.replace(/"|'/g,""),t.tailwind.prefix)}"`);}if(r.getInitializer()?.isKind(SyntaxKind.JsxExpression)){let i=r.getInitializer()?.getDescendantsOfKind(SyntaxKind.CallExpression).find(o=>o.getExpression().getText()==="cn");i&&i.getArguments().forEach(o=>{(o.isKind(SyntaxKind.ConditionalExpression)||o.isKind(SyntaxKind.BinaryExpression))&&o.getChildrenOfKind(SyntaxKind.StringLiteral).forEach(n=>{n.replaceWithText(`"${F(n.getText()?.replace(/"|'/g,""),t.tailwind.prefix)}"`);}),o.isKind(SyntaxKind.StringLiteral)&&o.replaceWithText(`"${F(o.getText()?.replace(/"|'/g,""),t.tailwind.prefix)}"`);});}}r.getName()==="classNames"&&r.getInitializer()?.isKind(SyntaxKind.JsxExpression)&&r.getDescendantsOfKind(SyntaxKind.PropertyAssignment).forEach(i=>{if(i.getInitializer()?.isKind(SyntaxKind.CallExpression)){let o=i.getInitializerIfKind(SyntaxKind.CallExpression);o&&o.getArguments().forEach(n=>{n.isKind(SyntaxKind.ConditionalExpression)&&n.getChildrenOfKind(SyntaxKind.StringLiteral).forEach(s=>{s.replaceWithText(`"${F(s.getText()?.replace(/"|'/g,""),t.tailwind.prefix)}"`);}),n.isKind(SyntaxKind.StringLiteral)&&n.replaceWithText(`"${F(n.getText()?.replace(/"|'/g,""),t.tailwind.prefix)}"`);});}if(i.getInitializer()?.isKind(SyntaxKind.StringLiteral)&&i.getName()!=="variant"){let o=i.getInitializer();o&&o.replaceWithText(`"${F(o.getText()?.replace(/"|'/g,""),t.tailwind.prefix)}"`);}});})),e);function F(e,t=""){let r=e.split(" "),i=[];for(let o of r){let[n,s,a]=Ae(o);n?a?i.push(`${n}:${t}${s}/${a}`):i.push(`${n}:${t}${s}`):a?i.push(`${t}${s}/${a}`):i.push(`${t}${s}`);}return i.join(" ")}var Kr=new Project({compilerOptions:{}});async function Gr(e){let t=await promises.mkdtemp(k__default.join(tmpdir(),"shadcn-"));return k__default.join(t,e)}async function me(e,t=[ce,pe,se,fe,ae]){let r=await Gr(e.filename),i=Kr.createSourceFile(r,e.raw,{scriptKind:ScriptKind.TSX});for(let o of t)await o({sourceFile:i,...e});return e.transformJsx?await St({sourceFile:i,...e}):i.getText()}async function Le(e,t,r){if(!e?.length)return {filesCreated:[],filesUpdated:[],filesSkipped:[]};r={overwrite:!1,force:!1,silent:!1,isRemote:!1,...r};let i=c("Updating files.",{silent:r.silent})?.start(),[o,n]=await Promise.all([T(t.resolvedPaths.cwd),x(t.tailwind.baseColor)]),s=[],a$1=[],p=[];for(let f of e){if(!f.content)continue;let d=qr(f,t,{isSrcDir:o?.isSrcDir,commonRoot:Xr(e.map(M=>M.path),f.path)}),h=basename(f.path),S=k__default.dirname(d);t.tsx||(d=d.replace(/\.tsx?$/,M=>M===".tsx"?".jsx":".js"));let E=existsSync(d);if(E&&!r.overwrite){i.stop(),r.rootSpinner&&r.rootSpinner.stop();let{overwrite:M}=await We({type:"confirm",name:"overwrite",message:`The file ${a.info(h)} already exists. Would you like to overwrite?`,initial:!1});if(!M){p.push(k__default.relative(t.resolvedPaths.cwd,d)),r.rootSpinner&&r.rootSpinner.start();continue}i?.start(),r.rootSpinner&&r.rootSpinner.start();}existsSync(S)||await promises.mkdir(S,{recursive:!0});let y=await me({filename:f.path,raw:f.content,config:t,baseColor:n,transformJsx:!t.tsx,isRemote:r.isRemote},[ce,pe,se,fe,ae]);await promises.writeFile(d,y,"utf-8"),E?a$1.push(k__default.relative(t.resolvedPaths.cwd,d)):s.push(k__default.relative(t.resolvedPaths.cwd,d));}if(!(s.length||a$1.length)&&!p.length&&i?.info("No files updated."),s.length){if(i?.succeed(`Created ${s.length} ${s.length===1?"file":"files"}:`),!r.silent)for(let f of s)b.log(`  - ${f}`);}else i?.stop();if(a$1.length&&(c(`Updated ${a$1.length} ${a$1.length===1?"file":"files"}:`,{silent:r.silent})?.info(),!r.silent))for(let f of a$1)b.log(`  - ${f}`);if(p.length&&(c(`Skipped ${p.length} ${a$1.length===1?"file":"files"}: (use --overwrite to overwrite)`,{silent:r.silent})?.info(),!r.silent))for(let f of p)b.log(`  - ${f}`);return r.silent||b.break(),{filesCreated:s,filesUpdated:a$1,filesSkipped:p}}function qr(e,t,r){if(e.target)return e.target.startsWith("~/")?k__default.join(t.resolvedPaths.cwd,e.target.replace("~/","")):r.isSrcDir?k__default.join(t.resolvedPaths.cwd,"src",e.target.replace("src/","")):k__default.join(t.resolvedPaths.cwd,e.target.replace("src/",""));let i=Hr(e,t),o=Qr(e.path,i);return k__default.join(i,o)}function Hr(e,t){return e.type==="registry:ui"?t.resolvedPaths.ui:e.type==="registry:lib"?t.resolvedPaths.lib:e.type==="registry:block"||e.type==="registry:component"?t.resolvedPaths.components:e.type==="registry:hook"?t.resolvedPaths.hooks:t.resolvedPaths.components}function Xr(e,t){let r=e.map(s=>s.replace(/^\//,"")),i=t.replace(/^\//,""),o=i.split("/").slice(0,-1).join("/");if(!o)return "";let n=o.split("/");for(let s=n.length;s>0;s--){let a=n.slice(0,s).join("/");if(r.some(m=>m!==i&&m.startsWith(a+"/")))return "/"+a}return "/"+o}function Qr(e,t){let r=e.replace(/^\/|\/$/g,""),i=t.replace(/^\/|\/$/g,""),o=r.split("/"),n=i.split("/"),s=n[n.length-1],a=o.findIndex(p=>p===s);return a===-1?o[o.length-1]:o.slice(a+1).join("/")}async function de(e,t,r){r={overwrite:!1,silent:!1,isNewProject:!1,...r};let i=await ft(t);return i&&i?.ui.resolvedPaths.cwd!==t.resolvedPaths.cwd?await ti(e,t,i,{...r,isRemote:e?.length===1&&!!e[0].match(/\/chat\/b\//)}):await ei(e,t,r)}async function ei(e$1,t,r){let i=c("Checking registry.",{silent:r.silent})?.start(),o=await C$1(e$1,t);if(!o)return i?.fail(),d(new Error("Failed to fetch components from registry."));i?.succeed();let n=await $e(t);await e(o.tailwind?.config,t,{silent:r.silent,tailwindVersion:n}),await Fe(o.cssVars,t,{cleanupDefaultNextStyles:r.isNewProject,silent:r.silent,tailwindVersion:n,tailwindConfig:o.tailwind?.config}),await q(o.dependencies,t,{silent:r.silent}),await Le(o.files,t,{overwrite:r.overwrite,silent:r.silent}),o.docs&&b.info(o.docs);}async function ti(e$1,t,r,i){let o=c("Checking registry.",{silent:i.silent})?.start(),n=await E(e$1,t),s=await B(n),a=z.array(l).parse(s);if(!a)return o?.fail(),d(new Error("Failed to fetch components from registry."));o?.succeed();let p=G$1(a),m=F$1(),f=[],d$1=[],h=[],S=c("Installing components.")?.start();for(let y of a){let M=m.get(y.type),Yt=p.get(y.name);if(!M)continue;let P=y.type==="registry:ui"||Yt?.type==="registry:ui"?r.ui:t,Ye=await $e(P),z=Oe(t.resolvedPaths.cwd,P.resolvedPaths.ui),Re=await je(z,P.resolvedPaths.cwd)??P.resolvedPaths.cwd;y.tailwind?.config&&(await e(y.tailwind?.config,P,{silent:!0,tailwindVersion:Ye}),d$1.push(k__default.relative(z,P.resolvedPaths.tailwindConfig))),y.cssVars&&(await Fe(y.cssVars,P,{silent:!0,tailwindVersion:Ye,tailwindConfig:y.tailwind?.config}),d$1.push(k__default.relative(z,P.resolvedPaths.tailwindCss))),await q(y.dependencies,P,{silent:!0});let Ce=await Le(y.files,P,{overwrite:i.overwrite,silent:!0,rootSpinner:S,isRemote:i.isRemote});f.push(...Ce.filesCreated.map(B=>k__default.relative(z,k__default.join(Re,B)))),d$1.push(...Ce.filesUpdated.map(B=>k__default.relative(z,k__default.join(Re,B)))),h.push(...Ce.filesSkipped.map(B=>k__default.relative(z,k__default.join(Re,B))));}if(S?.succeed(),f.sort(),d$1.sort(),h.sort(),!(f.length||d$1.length)&&!h.length&&c("No files updated.",{silent:i.silent})?.info(),f.length){c(`Created ${f.length} ${f.length===1?"file":"files"}:`,{silent:i.silent})?.succeed();for(let y of f)b.log(`  - ${y}`);}if(d$1.length){c(`Updated ${d$1.length} ${d$1.length===1?"file":"files"}:`,{silent:i.silent})?.info();for(let y of d$1)b.log(`  - ${y}`);}if(h.length){c(`Skipped ${h.length} ${d$1.length===1?"file":"files"}: (use --overwrite to overwrite)`,{silent:i.silent})?.info();for(let y of h)b.log(`  - ${y}`);}}var oi="https://codeload.github.com/shadcn-ui/ui/tar.gz/main";async function ge(e){e={srcDir:!1,...e};let t="next",r="my-app",i="15.1.0",o=e.components?.length===1&&!!e.components[0].match(/\/chat\/b\//);if(e.components&&o)try{let[a]=await B(e.components),{meta:p}=z.object({meta:z.object({nextVersion:z.string()})}).parse(a);i=p.nextVersion;}catch(a){b.break(),d(a);}if(!e.force){let{type:a$1,name:p}=await We([{type:"select",name:"type",message:`The path ${a.info(e.cwd)} does not contain a package.json file.
  Would you like to start a new project?`,choices:[{title:"Next.js",value:"next"},{title:"Next.js (Monorepo)",value:"monorepo"}],initial:0},{type:"text",name:"name",message:"What is your project named?",initial:r,format:m=>m.trim(),validate:m=>m.length>128?"Name should be less than 128 characters.":!0}]);t=a$1,r=p;}let n=await ne(e.cwd,{withFallback:!0}),s=`${e.cwd}/${r}`;try{await W.access(e.cwd,W.constants.W_OK);}catch{b.break(),b.error(`The path ${a.info(e.cwd)} is not writable.`),b.error(`It is likely you do not have write permissions for this folder or the path ${a.info(e.cwd)} does not exist.`),b.break(),process.exit(1);}return W.existsSync(k__default.resolve(e.cwd,r,"package.json"))&&(b.break(),b.error(`A project with the name ${a.info(r)} already exists.`),b.error("Please choose a different name and try again."),b.break(),process.exit(1)),t==="next"&&await ni(s,{version:i,cwd:e.cwd,packageManager:n,srcDir:!!e.srcDir}),t==="monorepo"&&await si(s,{packageManager:n}),{projectPath:s,projectName:r,projectType:t}}async function ni(e,t){let r=c("Creating a new Next.js project. This may take a few minutes.").start(),i=["--tailwind","--eslint","--typescript","--app",t.srcDir?"--src-dir":"--no-src-dir","--no-import-alias",`--use-${t.packageManager}`];t.version.startsWith("15")&&i.push("--turbopack");try{await execa("npx",[`create-next-app@${t.version}`,e,"--silent",...i],{cwd:t.cwd});}catch{b.break(),b.error("Something went wrong creating a new Next.js project. Please try again."),process.exit(1);}r?.succeed("Creating a new Next.js project.");}async function si(e,t){let r=c("Creating a new Next.js monorepo. This may take a few minutes.").start();try{let i=k__default.join(ri.tmpdir(),`shadcn-template-${Date.now()}`);await W.ensureDir(i);let o=await fetch(oi);if(!o.ok)throw new Error(`Failed to download template: ${o.statusText}`);let n=k__default.resolve(i,"template.tar.gz");await W.writeFile(n,Buffer.from(await o.arrayBuffer())),await execa("tar",["-xzf",n,"-C",i,"--strip-components=2","ui-main/templates/monorepo-next"]);let s=k__default.resolve(i,"monorepo-next");await W.move(s,e),await W.remove(i),await execa(t.packageManager,["install"],{cwd:e});let a=process.cwd();await execa("git",["--version"],{cwd:e}),await execa("git",["init"],{cwd:e}),await execa("git",["add","-A"],{cwd:e}),await execa("git",["commit","-m","Initial commit"],{cwd:e}),await execa("cd",[a]),r?.succeed("Creating a new Next.js monorepo.");}catch(i){r?.fail("Something went wrong creating a new Next.js monorepo."),d(i);}}async function kt(e,t,r){if(!e)return;r={silent:!1,...r};let i=k__default.relative(t.resolvedPaths.cwd,t.resolvedPaths.tailwindConfig),o=c(`Updating ${a.info(i)}`,{silent:r.silent}).start(),n=await promises.readFile(t.resolvedPaths.tailwindConfig,"utf8"),s=await ci(n,e,t);await promises.writeFile(t.resolvedPaths.tailwindConfig,s,"utf8"),o?.succeed();}async function ci(e,t,r){let i=await f(e,r),o=i.getDescendantsOfKind(SyntaxKind.ObjectLiteralExpression).find(n=>n.getProperties().some(s=>s.isKind(SyntaxKind.PropertyAssignment)&&s.getName()==="content"));return o?(li(o,t),i.getFullText()):e}async function li(e,t){let r=g(e),i=e.getProperty("content");if(!i){let o={name:"content",initializer:`[${r}${t.join(`${r}, ${r}`)}${r}]`};return e.addPropertyAssignment(o),e}if(i.isKind(SyntaxKind.PropertyAssignment)){let o=i.getInitializer();if(o?.isKind(SyntaxKind.ArrayLiteralExpression))for(let n of t){let s=`${r}${n}${r}`;o.getElements().map(a=>a.getText()).includes(s)||o.addElement(s);}return e}return e}var mi=z.object({cwd:z.string(),components:z.array(z.string()).optional(),yes:z.boolean(),defaults:z.boolean(),force:z.boolean(),silent:z.boolean(),isNewProject:z.boolean(),srcDir:z.boolean().optional()}),Pt=new Command().name("init").description("initialize your project and install dependencies").argument("[components...]","the components to add or a url to the component.").option("-y, --yes","skip confirmation prompt.",!0).option("-d, --defaults,","use default configuration.",!1).option("-f, --force","force overwrite of existing configuration.",!1).option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("-s, --silent","mute output.",!1).option("--src-dir","use the src directory when creating a new project.",!1).action(async(e,t)=>{try{let r=mi.parse({cwd:k__default.resolve(t.cwd),isNewProject:!1,components:e,...t});await we(r),b.log(`${a.success("Success!")} Project initialization completed.
You may now add components.`),b.break();}catch(r){b.break(),d(r);}});async function we(e){let t,r;if(e.skipPreflight)t=await T(e.cwd);else {let m=await gt(e);if(m.errors[C]){let{projectPath:f,projectType:d}=await ge(e);f||process.exit(1),e.cwd=f,e.isNewProject=!0,r=d;}t=m.projectInfo;}if(r==="monorepo")return e.cwd=k__default.resolve(e.cwd,"apps/web"),await R(e.cwd);let i=await dt(e.cwd,t),o=i?await ui(i,e):await di(await R(e.cwd));if(!e.yes){let{proceed:m}=await We({type:"confirm",name:"proceed",message:`Write configuration to ${a.info("components.json")}. Proceed?`,initial:!0});m||process.exit(0);}let n=c("Writing components.json.").start(),s=k__default.resolve(e.cwd,"components.json");await promises.writeFile(s,JSON.stringify(o,null,2),"utf8"),n.succeed();let a$1=await J(e.cwd,o),p=["index",...e.components||[]];return await de(p,a$1,{overwrite:!0,silent:e.silent,isNewProject:e.isNewProject||t?.framework.name==="next-app"}),e.isNewProject&&e.srcDir&&await kt(["./src/**/*.{js,ts,jsx,tsx,mdx}"],a$1,{silent:e.silent}),a$1}async function di(e=null){let[t$1,r]=await Promise.all([t(),w()]);b.info("");let i=await We([{type:"toggle",name:"typescript",message:`Would you like to use ${a.info("TypeScript")} (recommended)?`,initial:e?.tsx??!0,active:"yes",inactive:"no"},{type:"select",name:"style",message:`Which ${a.info("style")} would you like to use?`,choices:t$1.map(o=>({title:o.label,value:o.name}))},{type:"select",name:"tailwindBaseColor",message:`Which color would you like to use as the ${a.info("base color")}?`,choices:r.map(o=>({title:o.label,value:o.name}))},{type:"text",name:"tailwindCss",message:`Where is your ${a.info("global CSS")} file?`,initial:e?.tailwind.css??ct},{type:"toggle",name:"tailwindCssVariables",message:`Would you like to use ${a.info("CSS variables")} for theming?`,initial:e?.tailwind.cssVariables??!0,active:"yes",inactive:"no"},{type:"text",name:"tailwindPrefix",message:`Are you using a custom ${a.info("tailwind prefix eg. tw-")}? (Leave blank if not)`,initial:""},{type:"text",name:"tailwindConfig",message:`Where is your ${a.info("tailwind.config.js")} located?`,initial:e?.tailwind.config??lt},{type:"text",name:"components",message:`Configure the import alias for ${a.info("components")}:`,initial:e?.aliases.components??st},{type:"text",name:"utils",message:`Configure the import alias for ${a.info("utils")}:`,initial:e?.aliases.utils??at},{type:"toggle",name:"rsc",message:`Are you using ${a.info("React Server Components")}?`,initial:e?.rsc??!0,active:"yes",inactive:"no"}]);return G.parse({$schema:"https://ui.shadcn.com/schema.json",style:i.style,tailwind:{config:i.tailwindConfig,css:i.tailwindCss,baseColor:i.tailwindBaseColor,cssVariables:i.tailwindCssVariables,prefix:i.tailwindPrefix},rsc:i.rsc,tsx:i.typescript,aliases:{utils:i.utils,components:i.components,lib:i.components.replace(/\/components$/,"lib"),hooks:i.components.replace(/\/components$/,"hooks")}})}async function ui(e,t$1){let r=e.style,i=e.tailwind.baseColor,o=e.tailwind.cssVariables;if(!t$1.defaults){let[n,s]=await Promise.all([t(),w()]),a$1=await We([{type:"select",name:"style",message:`Which ${a.info("style")} would you like to use?`,choices:n.map(p=>({title:p.label,value:p.name})),initial:n.findIndex(p=>p.name===r)},{type:"select",name:"tailwindBaseColor",message:`Which color would you like to use as the ${a.info("base color")}?`,choices:s.map(p=>({title:p.label,value:p.name}))},{type:"toggle",name:"tailwindCssVariables",message:`Would you like to use ${a.info("CSS variables")} for theming?`,initial:e?.tailwind.cssVariables,active:"yes",inactive:"no"}]);r=a$1.style,i=a$1.tailwindBaseColor,o=a$1.tailwindCssVariables;}return G.parse({$schema:e?.$schema,style:r,tailwind:{...e?.tailwind,baseColor:i,cssVariables:o},rsc:e?.rsc,tsx:e?.tsx,aliases:e?.aliases,iconLibrary:e?.iconLibrary})}async function jt(e){let t={};if(!W.existsSync(e.cwd)||!W.existsSync(k__default.resolve(e.cwd,"package.json")))return t[C]=!0,{errors:t,config:null};if(!W.existsSync(k__default.resolve(e.cwd,"components.json")))return t[$]=!0,{errors:t,config:null};try{let r=await R(e.cwd);return {errors:t,config:r}}catch{b.break(),b.error(`An invalid ${a.info("components.json")} file was found at ${a.info(e.cwd)}.
Before you can add components, you must create a valid ${a.info("components.json")} file by running the ${a.info("init")} command.`),b.error(`Learn more at ${a.info("https://ui.shadcn.com/docs/components-json")}.`),b.break(),process.exit(1);}}async function Nt(e,t){let r=k__default.join(t.resolvedPaths.cwd,"app/page.tsx");if(!(await H__default.stat(r)).isFile())return;let i=await v$1(e,t.style);if(!i?.meta?.importSpecifier||!i?.meta?.moduleSpecifier)return;let o=`import { ${i?.meta?.importSpecifier} } from "${i.meta.moduleSpecifier}"

export default function Page() {
  return <${i?.meta?.importSpecifier} />
}`;await H__default.writeFile(r,o,"utf8");}var wi=z.object({components:z.array(z.string()).optional(),yes:z.boolean(),overwrite:z.boolean(),cwd:z.string(),all:z.boolean(),path:z.string().optional(),silent:z.boolean(),srcDir:z.boolean().optional()}),$t=new Command().name("add").description("add a component to your project").argument("[components...]","the components to add or a url to the component.").option("-y, --yes","skip confirmation prompt.",!1).option("-o, --overwrite","overwrite existing files.",!1).option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("-a, --all","add all available components",!1).option("-p, --path <path>","the path to add the component to.").option("-s, --silent","mute output.",!1).option("--src-dir","use the src directory when creating a new project.",!1).action(async(e,t)=>{try{let r=wi.parse({components:e,cwd:k__default.resolve(t.cwd),...t}),i=r.components?.some(a=>a.includes("theme-"));if(!r.yes&&i){b.break();let{confirm:a$1}=await We({type:"confirm",name:"confirm",message:a.warn(`You are about to install a new theme. 
Existing CSS variables will be overwritten. Continue?`)});a$1||(b.break(),b.log("Theme installation cancelled."),b.break(),process.exit(1));}r.components?.length||(r.components=await yi(r));let{errors:o,config:n}=await jt(r);if(o[$]){let{proceed:a$1}=await We({type:"confirm",name:"proceed",message:`You need to create a ${a.info("components.json")} file to add components. Proceed?`,initial:!0});a$1||(b.break(),process.exit(1)),n=await we({cwd:r.cwd,yes:!0,force:!0,defaults:!1,skipPreflight:!1,silent:!0,isNewProject:!1,srcDir:r.srcDir});}let s=!1;if(o[C]){let{projectPath:a,projectType:p}=await ge({cwd:r.cwd,force:r.overwrite,srcDir:r.srcDir,components:r.components});a||(b.break(),process.exit(1)),r.cwd=a,p==="monorepo"?(r.cwd=k__default.resolve(r.cwd,"apps/web"),n=await R(r.cwd)):(n=await we({cwd:r.cwd,yes:!0,force:!0,defaults:!1,skipPreflight:!0,silent:!0,isNewProject:!0,srcDir:r.srcDir}),s=r.components?.length===1&&!!r.components[0].match(/\/chat\/b\//));}if(!n)throw new Error(`Failed to read config at ${a.info(r.cwd)}.`);await de(r.components,n,r),s&&await Nt(r.components[0],n);}catch(r){b.break(),d(r);}});async function yi(e){let t=await s();if(!t)return b.break(),d(new Error("Failed to fetch registry index.")),[];if(e.all)return t.map(o=>o.name);if(e.components?.length)return e.components;let{components:r}=await We({type:"multiselect",name:"components",message:"Which components would you like to add?",hint:"Space to select. A to toggle all. Enter to submit.",instructions:!1,choices:t.filter(o=>o.type==="registry:ui").map(o=>({title:o.name,value:o.name,selected:e.all?!0:e.components?.includes(o.name)}))});r?.length||(b.warn("No components selected. Exiting."),b.info(""),process.exit(1));let i=z.array(z.string()).safeParse(r);return i.success?i.data:(b.error(""),d(new Error("Something went wrong. Please try again.")),[])}async function _t(e){let t={},r={cwd:e.cwd,registryFile:k__default.resolve(e.cwd,e.registryFile),outputDir:k__default.resolve(e.cwd,e.outputDir)};return W.existsSync(r.registryFile)||(t[Te]=!0),await W.mkdir(r.outputDir,{recursive:!0}),Object.keys(t).length>0&&(t[Te]&&(b.break(),b.error(`The path ${a.info(r.registryFile)} does not exist.`)),b.break(),process.exit(1)),{errors:t,resolvePaths:r}}var bi=z.object({cwd:z.string(),registryFile:z.string(),outputDir:z.string()}),At=new Command().name("build").description("build components for a shadcn registry").argument("[registry]","path to registry.json file","./registry.json").option("-o, --output <path>","destination directory for json files","./public/r").option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).action(async(e,t)=>{try{let r=bi.parse({cwd:k.resolve(t.cwd),registryFile:e,outputDir:t.output}),{resolvePaths:i}=await _t(r),o=await H.readFile(i.registryFile,"utf-8"),n=m.safeParse(JSON.parse(o));n.success||(b.error(`Invalid registry file found at ${a.info(i.registryFile)}.`),process.exit(1));let s=c("Building registry...");for(let a$1 of n.data.items){if(!a$1.files)continue;s.start(`Building ${a$1.name}...`),a$1.$schema="https://ui.shadcn.com/schema/registry-item.json";for(let m of a$1.files)m.content=await H.readFile(k.resolve(i.cwd,m.path),"utf-8");let p=l.safeParse(a$1);if(!p.success){b.error(`Invalid registry item found for ${a.info(a$1.name)}.`);continue}await H.writeFile(k.resolve(i.outputDir,`${p.data.name}.json`),JSON.stringify(p.data,null,2));}s.succeed("Building registry.");}catch(r){b.break(),d(r);}});var vi=z.object({component:z.string().optional(),yes:z.boolean(),cwd:z.string(),path:z.string().optional()}),Mt=new Command().name("diff").description("check for updates against the registry").argument("[component]","the component name").option("-y, --yes","skip confirmation prompt.",!1).option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).action(async(e,t)=>{try{let r=vi.parse({component:e,...t}),i=k__default.resolve(r.cwd);existsSync(i)||(b.error(`The path ${i} does not exist. Please try again.`),process.exit(1));let o=await R(i);o||(b.warn(`Configuration is missing. Please run ${a.success("init")} to create a components.json file.`),process.exit(1));let n=await s();if(n||(d(new Error("Failed to fetch registry index.")),process.exit(1)),!r.component){let p=o.resolvedPaths.components,m=n.filter(d=>{for(let h of d.files??[]){let S=k__default.resolve(p,typeof h=="string"?h:h.path);if(existsSync(S))return !0}return !1}),f=[];for(let d of m){let h=await Lt(d,o);h.length&&f.push({name:d.name,changes:h});}f.length||(b.info("No updates found."),process.exit(0)),b.info("The following components have updates available:");for(let d of f){b.info(`- ${d.name}`);for(let h of d.changes)b.info(`  - ${h.filePath}`);}b.break(),b.info(`Run ${a.success("diff <component>")} to see the changes.`),process.exit(0);}let s$1=n.find(p=>p.name===r.component);s$1||(b.error(`The component ${a.success(r.component)} does not exist.`),process.exit(1));let a$1=await Lt(s$1,o);a$1.length||(b.info(`No updates found for ${r.component}.`),process.exit(0));for(let p of a$1)b.info(`- ${p.filePath}`),await Ii(p.patch),b.info("");}catch(r){d(r);}});async function Lt(e,t){let r=await z$1(t.style,[e]),i=await x(t.tailwind.baseColor);if(!r)return [];let o=[];for(let n of r){let s=await A(t,n);if(s)for(let a of n.files??[]){let p=k__default.resolve(s,typeof a=="string"?a:a.path);if(!existsSync(p))continue;let m=await promises.readFile(p,"utf8");if(typeof a=="string"||!a.content)continue;let f=await me({filename:a.path,raw:a.content,config:t,baseColor:i}),d=diffLines(f,m);d.length>1&&o.push({filePath:p,patch:d});}}return o}async function Ii(e){e.forEach(t=>{if(t)return t.added?process.stdout.write(a.success(t.value)):t.removed?process.stdout.write(a.error(t.value)):process.stdout.write(t.value)});}var Vt=new Command().name("info").description("get information about your project").option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).action(async e=>{b.info("> project info"),console.log(await T(e.cwd)),b.break(),b.info("> components.json"),console.log(await R(e.cwd));});async function zt(e){if(!e.resolvedPaths.ui)throw new Error("We could not find a valid `ui` path in your `components.json` file. Please ensure you have a valid `ui` path in your `components.json` file.");let t=e.resolvedPaths.ui,[r,i]=await Promise.all([ie("**/*.{js,ts,jsx,tsx}",{cwd:t}),u()]);if(Object.keys(i).length===0)throw new Error("Something went wrong fetching the registry icons.");let o=Object.entries(v).map(([f,d])=>({title:d.name,value:f})),n=await We([{type:"select",name:"sourceLibrary",message:`Which icon library would you like to ${a.info("migrate from")}?`,choices:o},{type:"select",name:"targetLibrary",message:`Which icon library would you like to ${a.info("migrate to")}?`,choices:o}]);if(n.sourceLibrary===n.targetLibrary)throw new Error("You cannot migrate to the same icon library. Please choose a different icon library.");if(!(n.sourceLibrary in v&&n.targetLibrary in v))throw new Error("Invalid icon library. Please choose a valid icon library.");let s=v[n.sourceLibrary],a$1=v[n.targetLibrary],{confirm:p}=await We({type:"confirm",name:"confirm",initial:!0,message:`We will migrate ${a.info(r.length)} files in ${a.info(`./${k__default.relative(e.resolvedPaths.cwd,t)}`)} from ${a.info(s.name)} to ${a.info(a$1.name)}. Continue?`});p||(b.info("Migration cancelled."),process.exit(0)),a$1.package&&await q([a$1.package],e,{silent:!1});let m=c("Migrating icons...")?.start();await Promise.all(r.map(async f=>{m.text=`Migrating ${f}...`;let d=k__default.join(t,f),h=await promises.readFile(d,"utf-8"),S=await $i(h,n.sourceLibrary,n.targetLibrary,i);await promises.writeFile(d,S);})),m.succeed("Migration complete.");}async function $i(e,t,r,i){let o=v[t]?.import,n=v[r]?.import,s=await promises.mkdtemp(k__default.join(tmpdir(),"shadcn-")),a=new Project({compilerOptions:{}}),p=k__default.join(s,`shadcn-icons-${randomBytes(4).toString("hex")}.tsx`),m=a.createSourceFile(p,e,{scriptKind:ScriptKind.TSX}),f=[];for(let d of m.getImportDeclarations()??[])if(d.getModuleSpecifier()?.getText()===`"${o}"`){for(let h of d.getNamedImports()??[]){let S=h.getName(),E=Object.values(i).find(y=>y[t]===S)?.[r];!E||f.includes(E)||(f.push(E),h.remove(),m.getDescendantsOfKind(SyntaxKind.JsxSelfClosingElement).filter(y=>y.getTagNameNode()?.getText()===S).forEach(y=>y.getTagNameNode()?.replaceWithText(E)));}d.getNamedImports()?.length===0&&d.remove();}return f.length>0&&m.addImportDeclaration({moduleSpecifier:n,namedImports:f.map(d=>({name:d}))}),await m.getText()}async function Bt(e){let t={};if(!W.existsSync(e.cwd)||!W.existsSync(k__default.resolve(e.cwd,"package.json")))return t[C]=!0,{errors:t,config:null};if(!W.existsSync(k__default.resolve(e.cwd,"components.json")))return t[$]=!0,{errors:t,config:null};try{let r=await R(e.cwd);return {errors:t,config:r}}catch{b.break(),b.error(`An invalid ${a.info("components.json")} file was found at ${a.info(e.cwd)}.
Before you can run a migration, you must create a valid ${a.info("components.json")} file by running the ${a.info("init")} command.`),b.error(`Learn more at ${a.info("https://ui.shadcn.com/docs/components-json")}.`),b.break(),process.exit(1);}}var Kt=[{name:"icons",description:"migrate your ui components to a different icon library."}],_i=z.object({cwd:z.string(),list:z.boolean(),migration:z.string().refine(e=>e&&Kt.some(t=>t.name===e),{message:"You must specify a valid migration. Run `shadcn migrate --list` to see available migrations."}).optional()}),Gt=new Command().name("migrate").description("run a migration.").argument("[migration]","the migration to run.").option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("-l, --list","list all migrations.",!1).action(async(e,t)=>{try{let r=_i.parse({cwd:k__default.resolve(t.cwd),migration:e,list:t.list});if(r.list||!r.migration){b.info("Available migrations:");for(let n of Kt)b.info(`- ${n.name}: ${n.description}`);return}if(!r.migration)throw new Error("You must specify a migration. Run `shadcn migrate --list` to see available migrations.");let{errors:i,config:o}=await Bt(r);if(i[C]||i[$])throw new Error("No `components.json` file found. Ensure you are at the root of your project.");if(!o)throw new Error("Something went wrong reading your `components.json` file. Please ensure you have a valid `components.json` file.");r.migration==="icons"&&await zt(o);}catch(r){b.break(),d(r);}});var Jt={name:"shadcn",version:"2.3.0",description:"Add components to your apps.",publishConfig:{access:"public"},license:"MIT",author:{name:"shadcn",url:"https://twitter.com/shadcn"},repository:{type:"git",url:"https://github.com/shadcn/ui.git",directory:"packages/shadcn"},files:["dist"],keywords:["components","ui","tailwind","radix-ui","shadcn"],type:"module",exports:{".":{types:"./dist/index.d.ts",default:"./dist/index.js"},"./registry":{types:"./dist/registry/index.d.ts",default:"./dist/registry/index.js"}},bin:"./dist/index.js",scripts:{dev:"tsup --watch",build:"tsup",typecheck:"tsc --noEmit",clean:"rimraf dist && rimraf components","start:dev":"cross-env REGISTRY_URL=http://localhost:3333/r node dist/index.js","start:prod":"cross-env REGISTRY_URL=https://ui.shadcn.com/r node dist/index.js",start:"node dist/index.js","format:write":'prettier --write "**/*.{ts,tsx,mdx}" --cache',"format:check":'prettier --check "**/*.{ts,tsx,mdx}" --cache',release:"changeset version","pub:beta":"pnpm build && pnpm publish --no-git-checks --access public --tag beta","pub:next":"pnpm build && pnpm publish --no-git-checks --access public --tag next",prepublishOnly:"pnpm build","pub:release":"pnpm build && pnpm publish --access public",test:"vitest run","test:dev":"REGISTRY_URL=http://localhost:3333/r vitest run"},dependencies:{"@antfu/ni":"^0.21.4","@babel/core":"^7.22.1","@babel/parser":"^7.22.6","@babel/plugin-transform-typescript":"^7.22.5",commander:"^10.0.0",cosmiconfig:"^8.1.3",deepmerge:"^4.3.1",diff:"^5.1.0",execa:"^7.0.0","fast-glob":"^3.3.2","fs-extra":"^11.1.0","https-proxy-agent":"^6.2.0",kleur:"^4.1.5","node-fetch":"^3.3.0",ora:"^6.1.2",postcss:"^8.4.24",prompts:"^2.4.2",recast:"^0.23.2","stringify-object":"^5.0.0","ts-morph":"^18.0.0","tsconfig-paths":"^4.2.0",zod:"^3.20.2"},devDependencies:{"@types/babel__core":"^7.20.1","@types/diff":"^5.0.3","@types/fs-extra":"^11.0.1","@types/prompts":"^2.4.2","@types/stringify-object":"^4.0.5",gitpkg:"github:airhorns/gitpkg#gitpkg-v1.0.0-beta.4-gitpkg-82083c3",rimraf:"^6.0.1",tsup:"^6.6.3","type-fest":"^3.8.0",typescript:"^4.9.3"}};process.on("SIGINT",()=>process.exit(0));process.on("SIGTERM",()=>process.exit(0));async function Mi(){let e=new Command().name("shadcn").description("add components and dependencies to your project").version(Jt.version,"-v, --version","display the version number");e.addCommand(Pt).addCommand($t).addCommand(Mt).addCommand(Gt).addCommand(Vt).addCommand(At),e.parse();}Mi();
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.js.map